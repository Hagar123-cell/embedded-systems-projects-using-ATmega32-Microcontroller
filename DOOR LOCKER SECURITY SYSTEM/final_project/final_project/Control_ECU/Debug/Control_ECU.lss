
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00001f06  00001f9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800070  00800070  00001faa  2**0
                  ALLOC
  3 .stab         00001ff8  00000000  00000000  00001fac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001186  00000000  00000000  00003fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000512a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000526a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000053da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007023  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000090a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009877  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 82 09 	jmp	0x1304	; 0x1304 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 37       	cpi	r26, 0x72	; 114
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ba 0b 	call	0x1774	; 0x1774 <main>
      8a:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4a 0f 	jmp	0x1e94	; 0x1e94 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4a 0f 	jmp	0x1e94	; 0x1e94 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DcMotor_Init>:
#include"GPIO.h"
#include"common_macros.h"
#define Timer0
#include"Timer.h"
void DcMotor_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*SET IN1 & IN2 FOR THE DC_MOTOR AS OUTPUT*/
	setPinDirection(IN1_PORT_ID, IN1_PIN_ID, PIN_OUTPUT);
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <setPinDirection>
	setPinDirection(IN2_PORT_ID, IN2_PIN_ID, PIN_OUTPUT);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <setPinDirection>

	/*stop the motor initialy*/
	CLEAR_BIT(PORTB, IN1_PIN_ID);
     b62:	a8 e3       	ldi	r26, 0x38	; 56
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 e3       	ldi	r30, 0x38	; 56
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	8b 7f       	andi	r24, 0xFB	; 251
     b6e:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB, IN1_PIN_ID);
     b70:	a8 e3       	ldi	r26, 0x38	; 56
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	e8 e3       	ldi	r30, 0x38	; 56
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	8b 7f       	andi	r24, 0xFB	; 251
     b7c:	8c 93       	st	X, r24

}
     b7e:	cf 91       	pop	r28
     b80:	df 91       	pop	r29
     b82:	08 95       	ret

00000b84 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state)
{
     b84:	df 93       	push	r29
     b86:	cf 93       	push	r28
     b88:	0f 92       	push	r0
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	89 83       	std	Y+1, r24	; 0x01
	/*adjust the state of the rotation of motor(clkwise/ anti clkwise/ stop)*/
	PORTB = (PORTB & 0xFC) | state;
     b90:	a8 e3       	ldi	r26, 0x38	; 56
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	e8 e3       	ldi	r30, 0x38	; 56
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	98 2f       	mov	r25, r24
     b9c:	9c 7f       	andi	r25, 0xFC	; 252
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	89 2b       	or	r24, r25
     ba2:	8c 93       	st	X, r24

	/*send the required speed to pwm to generate the wave on the enable pin of the motor*/
	PWM_Timer0_Start(100);
     ba4:	84 e6       	ldi	r24, 0x64	; 100
     ba6:	0e 94 4b 09 	call	0x1296	; 0x1296 <PWM_Timer0_Start>
}
     baa:	0f 90       	pop	r0
     bac:	cf 91       	pop	r28
     bae:	df 91       	pop	r29
     bb0:	08 95       	ret

00000bb2 <setPinDirection>:

/*
 * set the direction of the given pin (input / output)
 */
void setPinDirection(uint8 PORT_ID,uint8 PIN_ID, GPIO_PinDirectionType direction)
{
     bb2:	df 93       	push	r29
     bb4:	cf 93       	push	r28
     bb6:	00 d0       	rcall	.+0      	; 0xbb8 <setPinDirection+0x6>
     bb8:	00 d0       	rcall	.+0      	; 0xbba <setPinDirection+0x8>
     bba:	0f 92       	push	r0
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	89 83       	std	Y+1, r24	; 0x01
     bc2:	6a 83       	std	Y+2, r22	; 0x02
     bc4:	4b 83       	std	Y+3, r20	; 0x03
	if(PORT_ID >= NUM_OF_PORTS || PIN_ID >= NUM_OF_PINS_PER_PORT )
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
     bc8:	84 30       	cpi	r24, 0x04	; 4
     bca:	08 f0       	brcs	.+2      	; 0xbce <setPinDirection+0x1c>
     bcc:	d5 c0       	rjmp	.+426    	; 0xd78 <setPinDirection+0x1c6>
     bce:	8a 81       	ldd	r24, Y+2	; 0x02
     bd0:	88 30       	cpi	r24, 0x08	; 8
     bd2:	08 f0       	brcs	.+2      	; 0xbd6 <setPinDirection+0x24>
     bd4:	d1 c0       	rjmp	.+418    	; 0xd78 <setPinDirection+0x1c6>
	{
		/*do nothing*/
	}
	else
	{
		switch(PORT_ID)
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	28 2f       	mov	r18, r24
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	3d 83       	std	Y+5, r19	; 0x05
     bde:	2c 83       	std	Y+4, r18	; 0x04
     be0:	8c 81       	ldd	r24, Y+4	; 0x04
     be2:	9d 81       	ldd	r25, Y+5	; 0x05
     be4:	81 30       	cpi	r24, 0x01	; 1
     be6:	91 05       	cpc	r25, r1
     be8:	09 f4       	brne	.+2      	; 0xbec <setPinDirection+0x3a>
     bea:	43 c0       	rjmp	.+134    	; 0xc72 <setPinDirection+0xc0>
     bec:	2c 81       	ldd	r18, Y+4	; 0x04
     bee:	3d 81       	ldd	r19, Y+5	; 0x05
     bf0:	22 30       	cpi	r18, 0x02	; 2
     bf2:	31 05       	cpc	r19, r1
     bf4:	2c f4       	brge	.+10     	; 0xc00 <setPinDirection+0x4e>
     bf6:	8c 81       	ldd	r24, Y+4	; 0x04
     bf8:	9d 81       	ldd	r25, Y+5	; 0x05
     bfa:	00 97       	sbiw	r24, 0x00	; 0
     bfc:	71 f0       	breq	.+28     	; 0xc1a <setPinDirection+0x68>
     bfe:	bc c0       	rjmp	.+376    	; 0xd78 <setPinDirection+0x1c6>
     c00:	2c 81       	ldd	r18, Y+4	; 0x04
     c02:	3d 81       	ldd	r19, Y+5	; 0x05
     c04:	22 30       	cpi	r18, 0x02	; 2
     c06:	31 05       	cpc	r19, r1
     c08:	09 f4       	brne	.+2      	; 0xc0c <setPinDirection+0x5a>
     c0a:	5f c0       	rjmp	.+190    	; 0xcca <setPinDirection+0x118>
     c0c:	8c 81       	ldd	r24, Y+4	; 0x04
     c0e:	9d 81       	ldd	r25, Y+5	; 0x05
     c10:	83 30       	cpi	r24, 0x03	; 3
     c12:	91 05       	cpc	r25, r1
     c14:	09 f4       	brne	.+2      	; 0xc18 <setPinDirection+0x66>
     c16:	85 c0       	rjmp	.+266    	; 0xd22 <setPinDirection+0x170>
     c18:	af c0       	rjmp	.+350    	; 0xd78 <setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_INPUT)
     c1a:	8b 81       	ldd	r24, Y+3	; 0x03
     c1c:	88 23       	and	r24, r24
     c1e:	a9 f4       	brne	.+42     	; 0xc4a <setPinDirection+0x98>
				CLEAR_BIT(DDRA, PIN_ID);
     c20:	aa e3       	ldi	r26, 0x3A	; 58
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	ea e3       	ldi	r30, 0x3A	; 58
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	48 2f       	mov	r20, r24
     c2c:	8a 81       	ldd	r24, Y+2	; 0x02
     c2e:	28 2f       	mov	r18, r24
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	02 2e       	mov	r0, r18
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <setPinDirection+0x8c>
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	0a 94       	dec	r0
     c40:	e2 f7       	brpl	.-8      	; 0xc3a <setPinDirection+0x88>
     c42:	80 95       	com	r24
     c44:	84 23       	and	r24, r20
     c46:	8c 93       	st	X, r24
     c48:	97 c0       	rjmp	.+302    	; 0xd78 <setPinDirection+0x1c6>
			else
				SET_BIT(DDRA, PIN_ID);
     c4a:	aa e3       	ldi	r26, 0x3A	; 58
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	ea e3       	ldi	r30, 0x3A	; 58
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	48 2f       	mov	r20, r24
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	02 2e       	mov	r0, r18
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <setPinDirection+0xb6>
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	0a 94       	dec	r0
     c6a:	e2 f7       	brpl	.-8      	; 0xc64 <setPinDirection+0xb2>
     c6c:	84 2b       	or	r24, r20
     c6e:	8c 93       	st	X, r24
     c70:	83 c0       	rjmp	.+262    	; 0xd78 <setPinDirection+0x1c6>
			break;
		case PORTB_ID:
			if(direction == PIN_INPUT)
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	88 23       	and	r24, r24
     c76:	a9 f4       	brne	.+42     	; 0xca2 <setPinDirection+0xf0>
				CLEAR_BIT(DDRB, PIN_ID);
     c78:	a7 e3       	ldi	r26, 0x37	; 55
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e7 e3       	ldi	r30, 0x37	; 55
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	48 2f       	mov	r20, r24
     c84:	8a 81       	ldd	r24, Y+2	; 0x02
     c86:	28 2f       	mov	r18, r24
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	02 2e       	mov	r0, r18
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <setPinDirection+0xe4>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	0a 94       	dec	r0
     c98:	e2 f7       	brpl	.-8      	; 0xc92 <setPinDirection+0xe0>
     c9a:	80 95       	com	r24
     c9c:	84 23       	and	r24, r20
     c9e:	8c 93       	st	X, r24
     ca0:	6b c0       	rjmp	.+214    	; 0xd78 <setPinDirection+0x1c6>
			else
				SET_BIT(DDRB, PIN_ID);
     ca2:	a7 e3       	ldi	r26, 0x37	; 55
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e7 e3       	ldi	r30, 0x37	; 55
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	48 2f       	mov	r20, r24
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	02 2e       	mov	r0, r18
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <setPinDirection+0x10e>
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	0a 94       	dec	r0
     cc2:	e2 f7       	brpl	.-8      	; 0xcbc <setPinDirection+0x10a>
     cc4:	84 2b       	or	r24, r20
     cc6:	8c 93       	st	X, r24
     cc8:	57 c0       	rjmp	.+174    	; 0xd78 <setPinDirection+0x1c6>
			break;
		case PORTC_ID:
			if(direction == PIN_INPUT)
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	88 23       	and	r24, r24
     cce:	a9 f4       	brne	.+42     	; 0xcfa <setPinDirection+0x148>
				CLEAR_BIT(DDRC, PIN_ID);
     cd0:	a4 e3       	ldi	r26, 0x34	; 52
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e4 e3       	ldi	r30, 0x34	; 52
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	48 2f       	mov	r20, r24
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	28 2f       	mov	r18, r24
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	02 2e       	mov	r0, r18
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <setPinDirection+0x13c>
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	0a 94       	dec	r0
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <setPinDirection+0x138>
     cf2:	80 95       	com	r24
     cf4:	84 23       	and	r24, r20
     cf6:	8c 93       	st	X, r24
     cf8:	3f c0       	rjmp	.+126    	; 0xd78 <setPinDirection+0x1c6>
			else
				SET_BIT(DDRC, PIN_ID);
     cfa:	a4 e3       	ldi	r26, 0x34	; 52
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e4 e3       	ldi	r30, 0x34	; 52
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	48 2f       	mov	r20, r24
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	28 2f       	mov	r18, r24
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	02 2e       	mov	r0, r18
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <setPinDirection+0x166>
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	0a 94       	dec	r0
     d1a:	e2 f7       	brpl	.-8      	; 0xd14 <setPinDirection+0x162>
     d1c:	84 2b       	or	r24, r20
     d1e:	8c 93       	st	X, r24
     d20:	2b c0       	rjmp	.+86     	; 0xd78 <setPinDirection+0x1c6>
			break;
		case PORTD_ID:
			if(direction == PIN_INPUT)
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	88 23       	and	r24, r24
     d26:	a9 f4       	brne	.+42     	; 0xd52 <setPinDirection+0x1a0>
				CLEAR_BIT(DDRD, PIN_ID);
     d28:	a1 e3       	ldi	r26, 0x31	; 49
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e1 e3       	ldi	r30, 0x31	; 49
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	48 2f       	mov	r20, r24
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 2e       	mov	r0, r18
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <setPinDirection+0x194>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	0a 94       	dec	r0
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <setPinDirection+0x190>
     d4a:	80 95       	com	r24
     d4c:	84 23       	and	r24, r20
     d4e:	8c 93       	st	X, r24
     d50:	13 c0       	rjmp	.+38     	; 0xd78 <setPinDirection+0x1c6>
			else
				SET_BIT(DDRD, PIN_ID);
     d52:	a1 e3       	ldi	r26, 0x31	; 49
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e1 e3       	ldi	r30, 0x31	; 49
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	48 2f       	mov	r20, r24
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	02 2e       	mov	r0, r18
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <setPinDirection+0x1be>
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	0a 94       	dec	r0
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <setPinDirection+0x1ba>
     d74:	84 2b       	or	r24, r20
     d76:	8c 93       	st	X, r24
			break;
		}
	}
}
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <setPortDirection>:

/*
 * set the direction of the given port (input / output)
 */
void setPortDirection(uint8 PORT_ID, GPIO_PortDirectionType direction)
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <setPortDirection+0x6>
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <setPortDirection+0x8>
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	6a 83       	std	Y+2, r22	; 0x02
	if(PORT_ID >= NUM_OF_PORTS)
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	90 f5       	brcc	.+100    	; 0xe02 <setPortDirection+0x7a>
	{
		/*do nothing*/
	}
	else
	{
		switch(PORT_ID)
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	3c 83       	std	Y+4, r19	; 0x04
     da6:	2b 83       	std	Y+3, r18	; 0x03
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	9c 81       	ldd	r25, Y+4	; 0x04
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	91 05       	cpc	r25, r1
     db0:	d1 f0       	breq	.+52     	; 0xde6 <setPortDirection+0x5e>
     db2:	2b 81       	ldd	r18, Y+3	; 0x03
     db4:	3c 81       	ldd	r19, Y+4	; 0x04
     db6:	22 30       	cpi	r18, 0x02	; 2
     db8:	31 05       	cpc	r19, r1
     dba:	2c f4       	brge	.+10     	; 0xdc6 <setPortDirection+0x3e>
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	9c 81       	ldd	r25, Y+4	; 0x04
     dc0:	00 97       	sbiw	r24, 0x00	; 0
     dc2:	61 f0       	breq	.+24     	; 0xddc <setPortDirection+0x54>
     dc4:	1e c0       	rjmp	.+60     	; 0xe02 <setPortDirection+0x7a>
     dc6:	2b 81       	ldd	r18, Y+3	; 0x03
     dc8:	3c 81       	ldd	r19, Y+4	; 0x04
     dca:	22 30       	cpi	r18, 0x02	; 2
     dcc:	31 05       	cpc	r19, r1
     dce:	81 f0       	breq	.+32     	; 0xdf0 <setPortDirection+0x68>
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	9c 81       	ldd	r25, Y+4	; 0x04
     dd4:	83 30       	cpi	r24, 0x03	; 3
     dd6:	91 05       	cpc	r25, r1
     dd8:	81 f0       	breq	.+32     	; 0xdfa <setPortDirection+0x72>
     dda:	13 c0       	rjmp	.+38     	; 0xe02 <setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
     ddc:	ea e3       	ldi	r30, 0x3A	; 58
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	80 83       	st	Z, r24
     de4:	0e c0       	rjmp	.+28     	; 0xe02 <setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
     de6:	e7 e3       	ldi	r30, 0x37	; 55
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	80 83       	st	Z, r24
     dee:	09 c0       	rjmp	.+18     	; 0xe02 <setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
     df0:	e4 e3       	ldi	r30, 0x34	; 52
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	80 83       	st	Z, r24
     df8:	04 c0       	rjmp	.+8      	; 0xe02 <setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
     dfa:	e1 e3       	ldi	r30, 0x31	; 49
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	80 83       	st	Z, r24
			break;
		}
	}
}
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	08 95       	ret

00000e10 <readPin>:

/*
 * return the value for the given pin
 */
uint8 readPin(uint8 PORT_ID, uint8 PIN_ID)
{
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	00 d0       	rcall	.+0      	; 0xe16 <readPin+0x6>
     e16:	00 d0       	rcall	.+0      	; 0xe18 <readPin+0x8>
     e18:	0f 92       	push	r0
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	8a 83       	std	Y+2, r24	; 0x02
     e20:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     e22:	19 82       	std	Y+1, r1	; 0x01

	if(PORT_ID >= NUM_OF_PORTS || PIN_ID >= NUM_OF_PINS_PER_PORT)
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	84 30       	cpi	r24, 0x04	; 4
     e28:	08 f0       	brcs	.+2      	; 0xe2c <readPin+0x1c>
     e2a:	84 c0       	rjmp	.+264    	; 0xf34 <readPin+0x124>
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	88 30       	cpi	r24, 0x08	; 8
     e30:	08 f0       	brcs	.+2      	; 0xe34 <readPin+0x24>
     e32:	80 c0       	rjmp	.+256    	; 0xf34 <readPin+0x124>
		/*do nothing*/
	}
	else
	{
		/* Read the pin value as required */
		switch(PORT_ID)
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	3d 83       	std	Y+5, r19	; 0x05
     e3c:	2c 83       	std	Y+4, r18	; 0x04
     e3e:	4c 81       	ldd	r20, Y+4	; 0x04
     e40:	5d 81       	ldd	r21, Y+5	; 0x05
     e42:	41 30       	cpi	r20, 0x01	; 1
     e44:	51 05       	cpc	r21, r1
     e46:	79 f1       	breq	.+94     	; 0xea6 <readPin+0x96>
     e48:	8c 81       	ldd	r24, Y+4	; 0x04
     e4a:	9d 81       	ldd	r25, Y+5	; 0x05
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	91 05       	cpc	r25, r1
     e50:	34 f4       	brge	.+12     	; 0xe5e <readPin+0x4e>
     e52:	2c 81       	ldd	r18, Y+4	; 0x04
     e54:	3d 81       	ldd	r19, Y+5	; 0x05
     e56:	21 15       	cp	r18, r1
     e58:	31 05       	cpc	r19, r1
     e5a:	69 f0       	breq	.+26     	; 0xe76 <readPin+0x66>
     e5c:	6b c0       	rjmp	.+214    	; 0xf34 <readPin+0x124>
     e5e:	4c 81       	ldd	r20, Y+4	; 0x04
     e60:	5d 81       	ldd	r21, Y+5	; 0x05
     e62:	42 30       	cpi	r20, 0x02	; 2
     e64:	51 05       	cpc	r21, r1
     e66:	b9 f1       	breq	.+110    	; 0xed6 <readPin+0xc6>
     e68:	8c 81       	ldd	r24, Y+4	; 0x04
     e6a:	9d 81       	ldd	r25, Y+5	; 0x05
     e6c:	83 30       	cpi	r24, 0x03	; 3
     e6e:	91 05       	cpc	r25, r1
     e70:	09 f4       	brne	.+2      	; 0xe74 <readPin+0x64>
     e72:	49 c0       	rjmp	.+146    	; 0xf06 <readPin+0xf6>
     e74:	5f c0       	rjmp	.+190    	; 0xf34 <readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,PIN_ID))
     e76:	e9 e3       	ldi	r30, 0x39	; 57
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	88 2f       	mov	r24, r24
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	a9 01       	movw	r20, r18
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <readPin+0x7e>
     e8a:	55 95       	asr	r21
     e8c:	47 95       	ror	r20
     e8e:	8a 95       	dec	r24
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <readPin+0x7a>
     e92:	ca 01       	movw	r24, r20
     e94:	81 70       	andi	r24, 0x01	; 1
     e96:	90 70       	andi	r25, 0x00	; 0
     e98:	88 23       	and	r24, r24
     e9a:	19 f0       	breq	.+6      	; 0xea2 <readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	89 83       	std	Y+1, r24	; 0x01
     ea0:	49 c0       	rjmp	.+146    	; 0xf34 <readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     ea2:	19 82       	std	Y+1, r1	; 0x01
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,PIN_ID))
     ea6:	e6 e3       	ldi	r30, 0x36	; 54
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	88 2f       	mov	r24, r24
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	a9 01       	movw	r20, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <readPin+0xae>
     eba:	55 95       	asr	r21
     ebc:	47 95       	ror	r20
     ebe:	8a 95       	dec	r24
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <readPin+0xaa>
     ec2:	ca 01       	movw	r24, r20
     ec4:	81 70       	andi	r24, 0x01	; 1
     ec6:	90 70       	andi	r25, 0x00	; 0
     ec8:	88 23       	and	r24, r24
     eca:	19 f0       	breq	.+6      	; 0xed2 <readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	89 83       	std	Y+1, r24	; 0x01
     ed0:	31 c0       	rjmp	.+98     	; 0xf34 <readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     ed2:	19 82       	std	Y+1, r1	; 0x01
     ed4:	2f c0       	rjmp	.+94     	; 0xf34 <readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,PIN_ID))
     ed6:	e3 e3       	ldi	r30, 0x33	; 51
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	88 2f       	mov	r24, r24
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	a9 01       	movw	r20, r18
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <readPin+0xde>
     eea:	55 95       	asr	r21
     eec:	47 95       	ror	r20
     eee:	8a 95       	dec	r24
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <readPin+0xda>
     ef2:	ca 01       	movw	r24, r20
     ef4:	81 70       	andi	r24, 0x01	; 1
     ef6:	90 70       	andi	r25, 0x00	; 0
     ef8:	88 23       	and	r24, r24
     efa:	19 f0       	breq	.+6      	; 0xf02 <readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	89 83       	std	Y+1, r24	; 0x01
     f00:	19 c0       	rjmp	.+50     	; 0xf34 <readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f02:	19 82       	std	Y+1, r1	; 0x01
     f04:	17 c0       	rjmp	.+46     	; 0xf34 <readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,PIN_ID))
     f06:	e0 e3       	ldi	r30, 0x30	; 48
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	88 2f       	mov	r24, r24
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	a9 01       	movw	r20, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <readPin+0x10e>
     f1a:	55 95       	asr	r21
     f1c:	47 95       	ror	r20
     f1e:	8a 95       	dec	r24
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <readPin+0x10a>
     f22:	ca 01       	movw	r24, r20
     f24:	81 70       	andi	r24, 0x01	; 1
     f26:	90 70       	andi	r25, 0x00	; 0
     f28:	88 23       	and	r24, r24
     f2a:	19 f0       	breq	.+6      	; 0xf32 <readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	01 c0       	rjmp	.+2      	; 0xf34 <readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f32:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
     f34:	89 81       	ldd	r24, Y+1	; 0x01
}
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <writePin>:

/*
 * Write the given value in the given pin
 */
void writePin(uint8 PORT_ID, uint8 PIN_ID, uint8 value )
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <writePin+0x6>
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <writePin+0x8>
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	89 83       	std	Y+1, r24	; 0x01
     f56:	6a 83       	std	Y+2, r22	; 0x02
     f58:	4b 83       	std	Y+3, r20	; 0x03
	if(PORT_ID >= NUM_OF_PORTS || PIN_ID >= NUM_OF_PINS_PER_PORT)
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	84 30       	cpi	r24, 0x04	; 4
     f5e:	08 f0       	brcs	.+2      	; 0xf62 <writePin+0x1c>
     f60:	d5 c0       	rjmp	.+426    	; 0x110c <writePin+0x1c6>
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	88 30       	cpi	r24, 0x08	; 8
     f66:	08 f0       	brcs	.+2      	; 0xf6a <writePin+0x24>
     f68:	d1 c0       	rjmp	.+418    	; 0x110c <writePin+0x1c6>
		/*do nothing*/
	}
	else
	{
		/* Read the pin value as required */
		switch(PORT_ID)
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	3d 83       	std	Y+5, r19	; 0x05
     f72:	2c 83       	std	Y+4, r18	; 0x04
     f74:	8c 81       	ldd	r24, Y+4	; 0x04
     f76:	9d 81       	ldd	r25, Y+5	; 0x05
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	91 05       	cpc	r25, r1
     f7c:	09 f4       	brne	.+2      	; 0xf80 <writePin+0x3a>
     f7e:	43 c0       	rjmp	.+134    	; 0x1006 <writePin+0xc0>
     f80:	2c 81       	ldd	r18, Y+4	; 0x04
     f82:	3d 81       	ldd	r19, Y+5	; 0x05
     f84:	22 30       	cpi	r18, 0x02	; 2
     f86:	31 05       	cpc	r19, r1
     f88:	2c f4       	brge	.+10     	; 0xf94 <writePin+0x4e>
     f8a:	8c 81       	ldd	r24, Y+4	; 0x04
     f8c:	9d 81       	ldd	r25, Y+5	; 0x05
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	71 f0       	breq	.+28     	; 0xfae <writePin+0x68>
     f92:	bc c0       	rjmp	.+376    	; 0x110c <writePin+0x1c6>
     f94:	2c 81       	ldd	r18, Y+4	; 0x04
     f96:	3d 81       	ldd	r19, Y+5	; 0x05
     f98:	22 30       	cpi	r18, 0x02	; 2
     f9a:	31 05       	cpc	r19, r1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <writePin+0x5a>
     f9e:	5f c0       	rjmp	.+190    	; 0x105e <writePin+0x118>
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	9d 81       	ldd	r25, Y+5	; 0x05
     fa4:	83 30       	cpi	r24, 0x03	; 3
     fa6:	91 05       	cpc	r25, r1
     fa8:	09 f4       	brne	.+2      	; 0xfac <writePin+0x66>
     faa:	85 c0       	rjmp	.+266    	; 0x10b6 <writePin+0x170>
     fac:	af c0       	rjmp	.+350    	; 0x110c <writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	81 30       	cpi	r24, 0x01	; 1
     fb2:	a1 f4       	brne	.+40     	; 0xfdc <writePin+0x96>
				SET_BIT(PORTA, PIN_ID);
     fb4:	ab e3       	ldi	r26, 0x3B	; 59
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	eb e3       	ldi	r30, 0x3B	; 59
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <writePin+0x8c>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <writePin+0x88>
     fd6:	84 2b       	or	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	98 c0       	rjmp	.+304    	; 0x110c <writePin+0x1c6>
			else
				CLEAR_BIT(PORTA, PIN_ID);
     fdc:	ab e3       	ldi	r26, 0x3B	; 59
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	eb e3       	ldi	r30, 0x3B	; 59
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <writePin+0xb4>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <writePin+0xb0>
     ffe:	80 95       	com	r24
    1000:	84 23       	and	r24, r20
    1002:	8c 93       	st	X, r24
    1004:	83 c0       	rjmp	.+262    	; 0x110c <writePin+0x1c6>

			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	a1 f4       	brne	.+40     	; 0x1034 <writePin+0xee>
				SET_BIT(PORTB, PIN_ID);
    100c:	a8 e3       	ldi	r26, 0x38	; 56
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e8 e3       	ldi	r30, 0x38	; 56
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 2e       	mov	r0, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <writePin+0xe4>
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	0a 94       	dec	r0
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <writePin+0xe0>
    102e:	84 2b       	or	r24, r20
    1030:	8c 93       	st	X, r24
    1032:	6c c0       	rjmp	.+216    	; 0x110c <writePin+0x1c6>
			else
				CLEAR_BIT(PORTB, PIN_ID);
    1034:	a8 e3       	ldi	r26, 0x38	; 56
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e8 e3       	ldi	r30, 0x38	; 56
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <writePin+0x10c>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <writePin+0x108>
    1056:	80 95       	com	r24
    1058:	84 23       	and	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	57 c0       	rjmp	.+174    	; 0x110c <writePin+0x1c6>

			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	a1 f4       	brne	.+40     	; 0x108c <writePin+0x146>
				SET_BIT(PORTC, PIN_ID);
    1064:	a5 e3       	ldi	r26, 0x35	; 53
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e5 e3       	ldi	r30, 0x35	; 53
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <writePin+0x13c>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <writePin+0x138>
    1086:	84 2b       	or	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	40 c0       	rjmp	.+128    	; 0x110c <writePin+0x1c6>
			else
				CLEAR_BIT(PORTC, PIN_ID);
    108c:	a5 e3       	ldi	r26, 0x35	; 53
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e5 e3       	ldi	r30, 0x35	; 53
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <writePin+0x164>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <writePin+0x160>
    10ae:	80 95       	com	r24
    10b0:	84 23       	and	r24, r20
    10b2:	8c 93       	st	X, r24
    10b4:	2b c0       	rjmp	.+86     	; 0x110c <writePin+0x1c6>

			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	a1 f4       	brne	.+40     	; 0x10e4 <writePin+0x19e>
				SET_BIT(PORTD, PIN_ID);
    10bc:	a2 e3       	ldi	r26, 0x32	; 50
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e2 e3       	ldi	r30, 0x32	; 50
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <writePin+0x194>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <writePin+0x190>
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	14 c0       	rjmp	.+40     	; 0x110c <writePin+0x1c6>
			else
				CLEAR_BIT(PORTD, PIN_ID);
    10e4:	a2 e3       	ldi	r26, 0x32	; 50
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e2 e3       	ldi	r30, 0x32	; 50
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <writePin+0x1bc>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <writePin+0x1b8>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24

			break;
		}
	}
}
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <readPort>:

/*
 * read pin register for the given port
 */
uint32 readPort(uint8 PORT_ID)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	27 97       	sbiw	r28, 0x07	; 7
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	de bf       	out	0x3e, r29	; 62
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	cd bf       	out	0x3d, r28	; 61
    1130:	8d 83       	std	Y+5, r24	; 0x05
	uint32 port_value = LOGIC_LOW;
    1132:	19 82       	std	Y+1, r1	; 0x01
    1134:	1a 82       	std	Y+2, r1	; 0x02
    1136:	1b 82       	std	Y+3, r1	; 0x03
    1138:	1c 82       	std	Y+4, r1	; 0x04
	if(PORT_ID >= NUM_OF_PORTS)
    113a:	8d 81       	ldd	r24, Y+5	; 0x05
    113c:	84 30       	cpi	r24, 0x04	; 4
    113e:	08 f0       	brcs	.+2      	; 0x1142 <readPort+0x26>
    1140:	4e c0       	rjmp	.+156    	; 0x11de <readPort+0xc2>
		/*do nothing*/
	}
	else
	{
		/* Read the pin value as required */
		switch(PORT_ID)
    1142:	8d 81       	ldd	r24, Y+5	; 0x05
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	3f 83       	std	Y+7, r19	; 0x07
    114a:	2e 83       	std	Y+6, r18	; 0x06
    114c:	8e 81       	ldd	r24, Y+6	; 0x06
    114e:	9f 81       	ldd	r25, Y+7	; 0x07
    1150:	81 30       	cpi	r24, 0x01	; 1
    1152:	91 05       	cpc	r25, r1
    1154:	09 f1       	breq	.+66     	; 0x1198 <readPort+0x7c>
    1156:	2e 81       	ldd	r18, Y+6	; 0x06
    1158:	3f 81       	ldd	r19, Y+7	; 0x07
    115a:	22 30       	cpi	r18, 0x02	; 2
    115c:	31 05       	cpc	r19, r1
    115e:	2c f4       	brge	.+10     	; 0x116a <readPort+0x4e>
    1160:	8e 81       	ldd	r24, Y+6	; 0x06
    1162:	9f 81       	ldd	r25, Y+7	; 0x07
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	61 f0       	breq	.+24     	; 0x1180 <readPort+0x64>
    1168:	3a c0       	rjmp	.+116    	; 0x11de <readPort+0xc2>
    116a:	2e 81       	ldd	r18, Y+6	; 0x06
    116c:	3f 81       	ldd	r19, Y+7	; 0x07
    116e:	22 30       	cpi	r18, 0x02	; 2
    1170:	31 05       	cpc	r19, r1
    1172:	f1 f0       	breq	.+60     	; 0x11b0 <readPort+0x94>
    1174:	8e 81       	ldd	r24, Y+6	; 0x06
    1176:	9f 81       	ldd	r25, Y+7	; 0x07
    1178:	83 30       	cpi	r24, 0x03	; 3
    117a:	91 05       	cpc	r25, r1
    117c:	29 f1       	breq	.+74     	; 0x11c8 <readPort+0xac>
    117e:	2f c0       	rjmp	.+94     	; 0x11de <readPort+0xc2>
		{
		case PORTA_ID:
			port_value = PINA;
    1180:	e9 e3       	ldi	r30, 0x39	; 57
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	88 2f       	mov	r24, r24
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	a0 e0       	ldi	r26, 0x00	; 0
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	9a 83       	std	Y+2, r25	; 0x02
    1192:	ab 83       	std	Y+3, r26	; 0x03
    1194:	bc 83       	std	Y+4, r27	; 0x04
    1196:	23 c0       	rjmp	.+70     	; 0x11de <readPort+0xc2>
			break;
		case PORTB_ID:
			port_value = PINB;
    1198:	e6 e3       	ldi	r30, 0x36	; 54
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	88 2f       	mov	r24, r24
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	a0 e0       	ldi	r26, 0x00	; 0
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	9a 83       	std	Y+2, r25	; 0x02
    11aa:	ab 83       	std	Y+3, r26	; 0x03
    11ac:	bc 83       	std	Y+4, r27	; 0x04
    11ae:	17 c0       	rjmp	.+46     	; 0x11de <readPort+0xc2>
			break;
		case PORTC_ID:
			port_value = PINC;
    11b0:	e3 e3       	ldi	r30, 0x33	; 51
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	88 2f       	mov	r24, r24
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	a0 e0       	ldi	r26, 0x00	; 0
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	9a 83       	std	Y+2, r25	; 0x02
    11c2:	ab 83       	std	Y+3, r26	; 0x03
    11c4:	bc 83       	std	Y+4, r27	; 0x04
    11c6:	0b c0       	rjmp	.+22     	; 0x11de <readPort+0xc2>
			break;
		case PORTD_ID:
			port_value = PIND;
    11c8:	e0 e3       	ldi	r30, 0x30	; 48
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	88 2f       	mov	r24, r24
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	a0 e0       	ldi	r26, 0x00	; 0
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	ab 83       	std	Y+3, r26	; 0x03
    11dc:	bc 83       	std	Y+4, r27	; 0x04
			break;
		}
	}
	return port_value;
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	9a 81       	ldd	r25, Y+2	; 0x02
    11e2:	ab 81       	ldd	r26, Y+3	; 0x03
    11e4:	bc 81       	ldd	r27, Y+4	; 0x04
}
    11e6:	bc 01       	movw	r22, r24
    11e8:	cd 01       	movw	r24, r26
    11ea:	27 96       	adiw	r28, 0x07	; 7
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	cd bf       	out	0x3d, r28	; 61
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	08 95       	ret

000011fc <writePort>:
/*
 * write the given value on the given port
 */
void writePort(uint8 PORT_ID, uint32 value)
{
    11fc:	df 93       	push	r29
    11fe:	cf 93       	push	r28
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    1204:	27 97       	sbiw	r28, 0x07	; 7
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	4a 83       	std	Y+2, r20	; 0x02
    1214:	5b 83       	std	Y+3, r21	; 0x03
    1216:	6c 83       	std	Y+4, r22	; 0x04
    1218:	7d 83       	std	Y+5, r23	; 0x05
	if(PORT_ID >= NUM_OF_PORTS)
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	84 30       	cpi	r24, 0x04	; 4
    121e:	90 f5       	brcc	.+100    	; 0x1284 <writePort+0x88>
		/*do nothing*/
	}
	else
	{
		/* Read the pin value as required */
		switch(PORT_ID)
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	3f 83       	std	Y+7, r19	; 0x07
    1228:	2e 83       	std	Y+6, r18	; 0x06
    122a:	8e 81       	ldd	r24, Y+6	; 0x06
    122c:	9f 81       	ldd	r25, Y+7	; 0x07
    122e:	81 30       	cpi	r24, 0x01	; 1
    1230:	91 05       	cpc	r25, r1
    1232:	d1 f0       	breq	.+52     	; 0x1268 <writePort+0x6c>
    1234:	2e 81       	ldd	r18, Y+6	; 0x06
    1236:	3f 81       	ldd	r19, Y+7	; 0x07
    1238:	22 30       	cpi	r18, 0x02	; 2
    123a:	31 05       	cpc	r19, r1
    123c:	2c f4       	brge	.+10     	; 0x1248 <writePort+0x4c>
    123e:	8e 81       	ldd	r24, Y+6	; 0x06
    1240:	9f 81       	ldd	r25, Y+7	; 0x07
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	61 f0       	breq	.+24     	; 0x125e <writePort+0x62>
    1246:	1e c0       	rjmp	.+60     	; 0x1284 <writePort+0x88>
    1248:	2e 81       	ldd	r18, Y+6	; 0x06
    124a:	3f 81       	ldd	r19, Y+7	; 0x07
    124c:	22 30       	cpi	r18, 0x02	; 2
    124e:	31 05       	cpc	r19, r1
    1250:	81 f0       	breq	.+32     	; 0x1272 <writePort+0x76>
    1252:	8e 81       	ldd	r24, Y+6	; 0x06
    1254:	9f 81       	ldd	r25, Y+7	; 0x07
    1256:	83 30       	cpi	r24, 0x03	; 3
    1258:	91 05       	cpc	r25, r1
    125a:	81 f0       	breq	.+32     	; 0x127c <writePort+0x80>
    125c:	13 c0       	rjmp	.+38     	; 0x1284 <writePort+0x88>
		{
		case PORTA_ID:
			PORTA = value;
    125e:	eb e3       	ldi	r30, 0x3B	; 59
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	80 83       	st	Z, r24
    1266:	0e c0       	rjmp	.+28     	; 0x1284 <writePort+0x88>
			break;
		case PORTB_ID:
			PORTB = value;
    1268:	e8 e3       	ldi	r30, 0x38	; 56
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	80 83       	st	Z, r24
    1270:	09 c0       	rjmp	.+18     	; 0x1284 <writePort+0x88>
			break;
		case PORTC_ID:
			PORTC = value;
    1272:	e5 e3       	ldi	r30, 0x35	; 53
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	80 83       	st	Z, r24
    127a:	04 c0       	rjmp	.+8      	; 0x1284 <writePort+0x88>
			break;
		case PORTD_ID:
			PORTD = value;
    127c:	e2 e3       	ldi	r30, 0x32	; 50
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	80 83       	st	Z, r24
			break;
		}
	}
}
    1284:	27 96       	adiw	r28, 0x07	; 7
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	f8 94       	cli
    128a:	de bf       	out	0x3e, r29	; 62
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	cd bf       	out	0x3d, r28	; 61
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <PWM_Timer0_Start>:
 duty_cycle: The required duty cycle percentage of the generated PWM signal. Its value should be from 0 → 100

 Return: Non
*/
void PWM_Timer0_Start(uint8 duty_cycle)
{
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	0f 92       	push	r0
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	89 83       	std	Y+1, r24	; 0x01
	/*SET INITIAL COUNTING VALUE*/
		TCNT0 = 0;
    12a6:	e2 e5       	ldi	r30, 0x52	; 82
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	10 82       	st	Z, r1
	/*
	 * SET COM01 TO WORK WITH NON INVERING MODE
	 * SET WGM01 & WGM00 TO SET TIMER0 ON FAST PWM MODE
	 * SET CS01 TO HAVE PRESCALER -> 8
	 */
	TCCR0 = (1<<WGM01) | (1<<WGM00) | (1<<COM01) | (1<<CS01);
    12ac:	e3 e5       	ldi	r30, 0x53	; 83
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	8a e6       	ldi	r24, 0x6A	; 106
    12b2:	80 83       	st	Z, r24

	/*SET THE COMPARE VALUE ACCORDING TO THE DUTY CYCLE*/
	OCR0 = (uint8)(((uint32)duty_cycle*255)/100);
    12b4:	0c e5       	ldi	r16, 0x5C	; 92
    12b6:	10 e0       	ldi	r17, 0x00	; 0
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	a0 e0       	ldi	r26, 0x00	; 0
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	2f ef       	ldi	r18, 0xFF	; 255
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	40 e0       	ldi	r20, 0x00	; 0
    12c8:	50 e0       	ldi	r21, 0x00	; 0
    12ca:	bc 01       	movw	r22, r24
    12cc:	cd 01       	movw	r24, r26
    12ce:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__mulsi3>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	24 e6       	ldi	r18, 0x64	; 100
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	40 e0       	ldi	r20, 0x00	; 0
    12dc:	50 e0       	ldi	r21, 0x00	; 0
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__udivmodsi4>
    12e6:	da 01       	movw	r26, r20
    12e8:	c9 01       	movw	r24, r18
    12ea:	f8 01       	movw	r30, r16
    12ec:	80 83       	st	Z, r24

	/*SET PB3/OC0 AS OUTPUT TO GENERATE PWM ON*/
	setPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	63 e0       	ldi	r22, 0x03	; 3
    12f2:	41 e0       	ldi	r20, 0x01	; 1
    12f4:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <setPinDirection>
}
    12f8:	0f 90       	pop	r0
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	08 95       	ret

00001304 <__vector_9>:

/*******************************************************************************
                            ISRs
 ******************************************************************************/
ISR(TIMER1_OVF_vect)
{
    1304:	1f 92       	push	r1
    1306:	0f 92       	push	r0
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	0f 92       	push	r0
    130c:	11 24       	eor	r1, r1
    130e:	2f 93       	push	r18
    1310:	3f 93       	push	r19
    1312:	4f 93       	push	r20
    1314:	5f 93       	push	r21
    1316:	6f 93       	push	r22
    1318:	7f 93       	push	r23
    131a:	8f 93       	push	r24
    131c:	9f 93       	push	r25
    131e:	af 93       	push	r26
    1320:	bf 93       	push	r27
    1322:	ef 93       	push	r30
    1324:	ff 93       	push	r31
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1_call_back_ptr != NULL_PTR)
    132e:	80 91 70 00 	lds	r24, 0x0070
    1332:	90 91 71 00 	lds	r25, 0x0071
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	29 f0       	breq	.+10     	; 0x1344 <__vector_9+0x40>
	{
		(*g_timer1_call_back_ptr)();
    133a:	e0 91 70 00 	lds	r30, 0x0070
    133e:	f0 91 71 00 	lds	r31, 0x0071
    1342:	09 95       	icall
	}
}
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	ff 91       	pop	r31
    134a:	ef 91       	pop	r30
    134c:	bf 91       	pop	r27
    134e:	af 91       	pop	r26
    1350:	9f 91       	pop	r25
    1352:	8f 91       	pop	r24
    1354:	7f 91       	pop	r23
    1356:	6f 91       	pop	r22
    1358:	5f 91       	pop	r21
    135a:	4f 91       	pop	r20
    135c:	3f 91       	pop	r19
    135e:	2f 91       	pop	r18
    1360:	0f 90       	pop	r0
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	0f 90       	pop	r0
    1366:	1f 90       	pop	r1
    1368:	18 95       	reti

0000136a <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    136a:	1f 92       	push	r1
    136c:	0f 92       	push	r0
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	0f 92       	push	r0
    1372:	11 24       	eor	r1, r1
    1374:	2f 93       	push	r18
    1376:	3f 93       	push	r19
    1378:	4f 93       	push	r20
    137a:	5f 93       	push	r21
    137c:	6f 93       	push	r22
    137e:	7f 93       	push	r23
    1380:	8f 93       	push	r24
    1382:	9f 93       	push	r25
    1384:	af 93       	push	r26
    1386:	bf 93       	push	r27
    1388:	ef 93       	push	r30
    138a:	ff 93       	push	r31
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1_call_back_ptr != NULL_PTR)
    1394:	80 91 70 00 	lds	r24, 0x0070
    1398:	90 91 71 00 	lds	r25, 0x0071
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	29 f0       	breq	.+10     	; 0x13aa <__vector_7+0x40>
	{
		(*g_timer1_call_back_ptr)();
    13a0:	e0 91 70 00 	lds	r30, 0x0070
    13a4:	f0 91 71 00 	lds	r31, 0x0071
    13a8:	09 95       	icall
	}
}
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	ff 91       	pop	r31
    13b0:	ef 91       	pop	r30
    13b2:	bf 91       	pop	r27
    13b4:	af 91       	pop	r26
    13b6:	9f 91       	pop	r25
    13b8:	8f 91       	pop	r24
    13ba:	7f 91       	pop	r23
    13bc:	6f 91       	pop	r22
    13be:	5f 91       	pop	r21
    13c0:	4f 91       	pop	r20
    13c2:	3f 91       	pop	r19
    13c4:	2f 91       	pop	r18
    13c6:	0f 90       	pop	r0
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	0f 90       	pop	r0
    13cc:	1f 90       	pop	r1
    13ce:	18 95       	reti

000013d0 <Timer1_init>:
 ******************************************************************************/
/*
 * Function to initialize the Timer driver
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <Timer1_init+0x6>
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	9a 83       	std	Y+2, r25	; 0x02
    13dc:	89 83       	std	Y+1, r24	; 0x01
	/*set initial counting value*/
	TCNT1 = Config_Ptr -> initial_value;
    13de:	ac e4       	ldi	r26, 0x4C	; 76
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e9 81       	ldd	r30, Y+1	; 0x01
    13e4:	fa 81       	ldd	r31, Y+2	; 0x02
    13e6:	80 81       	ld	r24, Z
    13e8:	91 81       	ldd	r25, Z+1	; 0x01
    13ea:	11 96       	adiw	r26, 0x01	; 1
    13ec:	9c 93       	st	X, r25
    13ee:	8e 93       	st	-X, r24

	if(Config_Ptr -> mode == normal)
    13f0:	e9 81       	ldd	r30, Y+1	; 0x01
    13f2:	fa 81       	ldd	r31, Y+2	; 0x02
    13f4:	85 81       	ldd	r24, Z+5	; 0x05
    13f6:	88 23       	and	r24, r24
    13f8:	99 f4       	brne	.+38     	; 0x1420 <Timer1_init+0x50>
	{

		/* set FOC1A & FOC1B indicates non-pwm mode*/
		TCCR1A = (1<<FOC1B) | (1<<FOC1A);
    13fa:	ef e4       	ldi	r30, 0x4F	; 79
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	8c e0       	ldi	r24, 0x0C	; 12
    1400:	80 83       	st	Z, r24

		/* set ICNC1 to cancel ICU*/
		TCCR1B = (1<<ICNC1) | (Config_Ptr -> prescaler);
    1402:	ae e4       	ldi	r26, 0x4E	; 78
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e9 81       	ldd	r30, Y+1	; 0x01
    1408:	fa 81       	ldd	r31, Y+2	; 0x02
    140a:	84 81       	ldd	r24, Z+4	; 0x04
    140c:	80 68       	ori	r24, 0x80	; 128
    140e:	8c 93       	st	X, r24

		/*  Overflow Interrupt Enable*/
		TIMSK |= (1<<TOIE1);
    1410:	a9 e5       	ldi	r26, 0x59	; 89
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e9 e5       	ldi	r30, 0x59	; 89
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	84 60       	ori	r24, 0x04	; 4
    141c:	8c 93       	st	X, r24
    141e:	20 c0       	rjmp	.+64     	; 0x1460 <Timer1_init+0x90>
	}
	else if(Config_Ptr -> mode == compare)
    1420:	e9 81       	ldd	r30, Y+1	; 0x01
    1422:	fa 81       	ldd	r31, Y+2	; 0x02
    1424:	85 81       	ldd	r24, Z+5	; 0x05
    1426:	81 30       	cpi	r24, 0x01	; 1
    1428:	d9 f4       	brne	.+54     	; 0x1460 <Timer1_init+0x90>
	{

		/* set FOC1A & FOC1B indicates non-pwm mode*/

		TCCR1A = (1<<FOC1B) | (1<<FOC1A);
    142a:	ef e4       	ldi	r30, 0x4F	; 79
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	8c e0       	ldi	r24, 0x0C	; 12
    1430:	80 83       	st	Z, r24

		/*
		 * set ICNC1 to cancel ICU
		 * set WGM12 to select CTC mode
		 */
		TCCR1B = (1<<ICNC1) | (1<<WGM12) | (Config_Ptr -> prescaler);
    1432:	ae e4       	ldi	r26, 0x4E	; 78
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e9 81       	ldd	r30, Y+1	; 0x01
    1438:	fa 81       	ldd	r31, Y+2	; 0x02
    143a:	84 81       	ldd	r24, Z+4	; 0x04
    143c:	88 68       	ori	r24, 0x88	; 136
    143e:	8c 93       	st	X, r24

		/*set the compare value*/
		OCR1A = Config_Ptr -> compare_value;
    1440:	aa e4       	ldi	r26, 0x4A	; 74
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e9 81       	ldd	r30, Y+1	; 0x01
    1446:	fa 81       	ldd	r31, Y+2	; 0x02
    1448:	82 81       	ldd	r24, Z+2	; 0x02
    144a:	93 81       	ldd	r25, Z+3	; 0x03
    144c:	11 96       	adiw	r26, 0x01	; 1
    144e:	9c 93       	st	X, r25
    1450:	8e 93       	st	-X, r24

		/* Output Compare A Match Interrupt Enable*/
		TIMSK |= (1<<OCIE1A);
    1452:	a9 e5       	ldi	r26, 0x59	; 89
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e9 e5       	ldi	r30, 0x59	; 89
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	80 61       	ori	r24, 0x10	; 16
    145e:	8c 93       	st	X, r24
	}
}
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <Timer1_deInit>:

/*
 * Function to disable the Timer1
 */
void Timer1_deInit(void)
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
	/*clear CS10 &  CS11 &  CS12 to stop timer*/
	TCCR1B = 0;
    1472:	ee e4       	ldi	r30, 0x4E	; 78
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	10 82       	st	Z, r1
}
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <Timer1_setCallBack>:

/*
 * Function to set the Call Back function address
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	00 d0       	rcall	.+0      	; 0x1484 <Timer1_setCallBack+0x6>
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	9a 83       	std	Y+2, r25	; 0x02
    148a:	89 83       	std	Y+1, r24	; 0x01
	g_timer1_call_back_ptr = a_ptr;
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	9a 81       	ldd	r25, Y+2	; 0x02
    1490:	90 93 71 00 	sts	0x0071, r25
    1494:	80 93 70 00 	sts	0x0070, r24
}
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <Buzzer_init>:
 */
#include"buzzer.h"
#include"GPIO.h"
#include"std_types.h"
void Buzzer_init(void)
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    setPinDirection( PORTB_ID, PIN3_ID, PIN_OUTPUT);
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	63 e0       	ldi	r22, 0x03	; 3
    14ae:	41 e0       	ldi	r20, 0x01	; 1
    14b0:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <setPinDirection>
    writePin(PORTB_ID, PIN3_ID, LOGIC_LOW);
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	63 e0       	ldi	r22, 0x03	; 3
    14b8:	40 e0       	ldi	r20, 0x00	; 0
    14ba:	0e 94 a3 07 	call	0xf46	; 0xf46 <writePin>
}
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <Buzzer_on>:

void Buzzer_on(void)
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    writePin(PORTB_ID, PIN3_ID, LOGIC_HIGH);
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	63 e0       	ldi	r22, 0x03	; 3
    14d0:	41 e0       	ldi	r20, 0x01	; 1
    14d2:	0e 94 a3 07 	call	0xf46	; 0xf46 <writePin>

}
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <Buzzer_off>:

void Buzzer_off(void)
{
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    writePin(PORTB_ID, PIN3_ID, LOGIC_LOW);
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	63 e0       	ldi	r22, 0x03	; 3
    14e8:	40 e0       	ldi	r20, 0x00	; 0
    14ea:	0e 94 a3 07 	call	0xf46	; 0xf46 <writePin>
}
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "i2c.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <EEPROM_writeByte+0x6>
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <EEPROM_writeByte+0x8>
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	9a 83       	std	Y+2, r25	; 0x02
    1502:	89 83       	std	Y+1, r24	; 0x01
    1504:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1506:	0e 94 57 0b 	call	0x16ae	; 0x16ae <TWI_start>
    if (TWI_getStatus() != TWI_START)
    150a:	0e 94 af 0b 	call	0x175e	; 0x175e <TWI_getStatus>
    150e:	88 30       	cpi	r24, 0x08	; 8
    1510:	11 f0       	breq	.+4      	; 0x1516 <EEPROM_writeByte+0x22>
        return ERROR;
    1512:	1c 82       	std	Y+4, r1	; 0x04
    1514:	28 c0       	rjmp	.+80     	; 0x1566 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	9a 81       	ldd	r25, Y+2	; 0x02
    151a:	80 70       	andi	r24, 0x00	; 0
    151c:	97 70       	andi	r25, 0x07	; 7
    151e:	88 0f       	add	r24, r24
    1520:	89 2f       	mov	r24, r25
    1522:	88 1f       	adc	r24, r24
    1524:	99 0b       	sbc	r25, r25
    1526:	91 95       	neg	r25
    1528:	80 6a       	ori	r24, 0xA0	; 160
    152a:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    152e:	0e 94 af 0b 	call	0x175e	; 0x175e <TWI_getStatus>
    1532:	88 31       	cpi	r24, 0x18	; 24
    1534:	11 f0       	breq	.+4      	; 0x153a <EEPROM_writeByte+0x46>
        return ERROR; 
    1536:	1c 82       	std	Y+4, r1	; 0x04
    1538:	16 c0       	rjmp	.+44     	; 0x1566 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1540:	0e 94 af 0b 	call	0x175e	; 0x175e <TWI_getStatus>
    1544:	88 32       	cpi	r24, 0x28	; 40
    1546:	11 f0       	breq	.+4      	; 0x154c <EEPROM_writeByte+0x58>
        return ERROR;
    1548:	1c 82       	std	Y+4, r1	; 0x04
    154a:	0d c0       	rjmp	.+26     	; 0x1566 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1552:	0e 94 af 0b 	call	0x175e	; 0x175e <TWI_getStatus>
    1556:	88 32       	cpi	r24, 0x28	; 40
    1558:	11 f0       	breq	.+4      	; 0x155e <EEPROM_writeByte+0x6a>
        return ERROR;
    155a:	1c 82       	std	Y+4, r1	; 0x04
    155c:	04 c0       	rjmp	.+8      	; 0x1566 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    155e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <TWI_stop>
	
    return SUCCESS;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	8c 83       	std	Y+4, r24	; 0x04
    1566:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	08 95       	ret

00001576 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	00 d0       	rcall	.+0      	; 0x157c <EEPROM_readByte+0x6>
    157c:	00 d0       	rcall	.+0      	; 0x157e <EEPROM_readByte+0x8>
    157e:	0f 92       	push	r0
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	9a 83       	std	Y+2, r25	; 0x02
    1586:	89 83       	std	Y+1, r24	; 0x01
    1588:	7c 83       	std	Y+4, r23	; 0x04
    158a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    158c:	0e 94 57 0b 	call	0x16ae	; 0x16ae <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1590:	0e 94 af 0b 	call	0x175e	; 0x175e <TWI_getStatus>
    1594:	88 30       	cpi	r24, 0x08	; 8
    1596:	11 f0       	breq	.+4      	; 0x159c <EEPROM_readByte+0x26>
        return ERROR;
    1598:	1d 82       	std	Y+5, r1	; 0x05
    159a:	44 c0       	rjmp	.+136    	; 0x1624 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	9a 81       	ldd	r25, Y+2	; 0x02
    15a0:	80 70       	andi	r24, 0x00	; 0
    15a2:	97 70       	andi	r25, 0x07	; 7
    15a4:	88 0f       	add	r24, r24
    15a6:	89 2f       	mov	r24, r25
    15a8:	88 1f       	adc	r24, r24
    15aa:	99 0b       	sbc	r25, r25
    15ac:	91 95       	neg	r25
    15ae:	80 6a       	ori	r24, 0xA0	; 160
    15b0:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    15b4:	0e 94 af 0b 	call	0x175e	; 0x175e <TWI_getStatus>
    15b8:	88 31       	cpi	r24, 0x18	; 24
    15ba:	11 f0       	breq	.+4      	; 0x15c0 <EEPROM_readByte+0x4a>
        return ERROR;
    15bc:	1d 82       	std	Y+5, r1	; 0x05
    15be:	32 c0       	rjmp	.+100    	; 0x1624 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    15c6:	0e 94 af 0b 	call	0x175e	; 0x175e <TWI_getStatus>
    15ca:	88 32       	cpi	r24, 0x28	; 40
    15cc:	11 f0       	breq	.+4      	; 0x15d2 <EEPROM_readByte+0x5c>
        return ERROR;
    15ce:	1d 82       	std	Y+5, r1	; 0x05
    15d0:	29 c0       	rjmp	.+82     	; 0x1624 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    15d2:	0e 94 57 0b 	call	0x16ae	; 0x16ae <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    15d6:	0e 94 af 0b 	call	0x175e	; 0x175e <TWI_getStatus>
    15da:	80 31       	cpi	r24, 0x10	; 16
    15dc:	11 f0       	breq	.+4      	; 0x15e2 <EEPROM_readByte+0x6c>
        return ERROR;
    15de:	1d 82       	std	Y+5, r1	; 0x05
    15e0:	21 c0       	rjmp	.+66     	; 0x1624 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	9a 81       	ldd	r25, Y+2	; 0x02
    15e6:	80 70       	andi	r24, 0x00	; 0
    15e8:	97 70       	andi	r25, 0x07	; 7
    15ea:	88 0f       	add	r24, r24
    15ec:	89 2f       	mov	r24, r25
    15ee:	88 1f       	adc	r24, r24
    15f0:	99 0b       	sbc	r25, r25
    15f2:	91 95       	neg	r25
    15f4:	81 6a       	ori	r24, 0xA1	; 161
    15f6:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    15fa:	0e 94 af 0b 	call	0x175e	; 0x175e <TWI_getStatus>
    15fe:	80 34       	cpi	r24, 0x40	; 64
    1600:	11 f0       	breq	.+4      	; 0x1606 <EEPROM_readByte+0x90>
        return ERROR;
    1602:	1d 82       	std	Y+5, r1	; 0x05
    1604:	0f c0       	rjmp	.+30     	; 0x1624 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1606:	0e 94 9c 0b 	call	0x1738	; 0x1738 <TWI_readByteWithNACK>
    160a:	eb 81       	ldd	r30, Y+3	; 0x03
    160c:	fc 81       	ldd	r31, Y+4	; 0x04
    160e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1610:	0e 94 af 0b 	call	0x175e	; 0x175e <TWI_getStatus>
    1614:	88 35       	cpi	r24, 0x58	; 88
    1616:	11 f0       	breq	.+4      	; 0x161c <EEPROM_readByte+0xa6>
        return ERROR;
    1618:	1d 82       	std	Y+5, r1	; 0x05
    161a:	04 c0       	rjmp	.+8      	; 0x1624 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    161c:	0e 94 67 0b 	call	0x16ce	; 0x16ce <TWI_stop>

    return SUCCESS;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	8d 83       	std	Y+5, r24	; 0x05
    1624:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <TWI_init>:
 */
#include"i2c.h"
#include<avr/io.h>
#include"common_macros.h"
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	00 d0       	rcall	.+0      	; 0x163c <TWI_init+0x6>
    163c:	0f 92       	push	r0
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	9b 83       	std	Y+3, r25	; 0x03
    1644:	8a 83       	std	Y+2, r24	; 0x02
	/*calculate TWBR depending on SCL freq*/
	uint8 bit_rate = (uint8)(((cpu_clk_freq / Config_Ptr->bit_rate)-16)/2);
    1646:	ea 81       	ldd	r30, Y+2	; 0x02
    1648:	fb 81       	ldd	r31, Y+3	; 0x03
    164a:	81 81       	ldd	r24, Z+1	; 0x01
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	40 e0       	ldi	r20, 0x00	; 0
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	92 e1       	ldi	r25, 0x12	; 18
    1658:	aa e7       	ldi	r26, 0x7A	; 122
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	bc 01       	movw	r22, r24
    165e:	cd 01       	movw	r24, r26
    1660:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__udivmodsi4>
    1664:	da 01       	movw	r26, r20
    1666:	c9 01       	movw	r24, r18
    1668:	40 97       	sbiw	r24, 0x10	; 16
    166a:	a1 09       	sbc	r26, r1
    166c:	b1 09       	sbc	r27, r1
    166e:	b6 95       	lsr	r27
    1670:	a7 95       	ror	r26
    1672:	97 95       	ror	r25
    1674:	87 95       	ror	r24
    1676:	89 83       	std	Y+1, r24	; 0x01
	TWBR = bit_rate;
    1678:	e0 e2       	ldi	r30, 0x20	; 32
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	80 83       	st	Z, r24
	TWSR = pre_1 ;
    1680:	e1 e2       	ldi	r30, 0x21	; 33
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	10 82       	st	Z, r1

	/*set TWEN to enable TWI*/
	TWCR |= (1<<TWEN);
    1686:	a6 e5       	ldi	r26, 0x56	; 86
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e6 e5       	ldi	r30, 0x56	; 86
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	84 60       	ori	r24, 0x04	; 4
    1692:	8c 93       	st	X, r24

	/*set an address for the device when its a slave*/
	TWAR = (Config_Ptr -> address)<<1;
    1694:	a2 e2       	ldi	r26, 0x22	; 34
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	ea 81       	ldd	r30, Y+2	; 0x02
    169a:	fb 81       	ldd	r31, Y+3	; 0x03
    169c:	80 81       	ld	r24, Z
    169e:	88 0f       	add	r24, r24
    16a0:	8c 93       	st	X, r24
}
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <TWI_start>:

void TWI_start(void)
{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    16b6:	e6 e5       	ldi	r30, 0x56	; 86
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	84 ea       	ldi	r24, 0xA4	; 164
    16bc:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));}
    16be:	e6 e5       	ldi	r30, 0x56	; 86
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	88 23       	and	r24, r24
    16c6:	dc f7       	brge	.-10     	; 0x16be <TWI_start+0x10>
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <TWI_stop>:

void TWI_stop(void)
{
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    16d6:	e6 e5       	ldi	r30, 0x56	; 86
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	84 e9       	ldi	r24, 0x94	; 148
    16dc:	80 83       	st	Z, r24
}
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	08 95       	ret

000016e4 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	0f 92       	push	r0
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	89 83       	std	Y+1, r24	; 0x01
	/*put data to be sent*/
	TWDR = data;
    16f0:	e3 e2       	ldi	r30, 0x23	; 35
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	80 83       	st	Z, r24

	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    16f8:	e6 e5       	ldi	r30, 0x56	; 86
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	84 e8       	ldi	r24, 0x84	; 132
    16fe:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1700:	e6 e5       	ldi	r30, 0x56	; 86
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	88 23       	and	r24, r24
    1708:	dc f7       	brge	.-10     	; 0x1700 <TWI_writeByte+0x1c>
}
    170a:	0f 90       	pop	r0
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
	/*
		 * Clear the TWINT flag before sending the stop bit TWINT=1
		 * Enable TWI Module TWEN=1
		 * set TWEA to enable ACK
		 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1<<TWEA);
    171a:	e6 e5       	ldi	r30, 0x56	; 86
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	84 ec       	ldi	r24, 0xC4	; 196
    1720:	80 83       	st	Z, r24

	 /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1722:	e6 e5       	ldi	r30, 0x56	; 86
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	88 23       	and	r24, r24
    172a:	dc f7       	brge	.-10     	; 0x1722 <TWI_readByteWithACK+0x10>
	/*read data*/
	return TWDR;
    172c:	e3 e2       	ldi	r30, 0x23	; 35
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
}
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
	/*
			 * Clear the TWINT flag before sending the stop bit TWINT=1
			 * Enable TWI Module TWEN=1
			 */
		TWCR = (1 << TWINT) | (1 << TWEN);
    1740:	e6 e5       	ldi	r30, 0x56	; 86
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	84 e8       	ldi	r24, 0x84	; 132
    1746:	80 83       	st	Z, r24

		 /* Wait for TWINT flag set in TWCR Register (data received successfully) */
	    while(BIT_IS_CLEAR(TWCR,TWINT));
    1748:	e6 e5       	ldi	r30, 0x56	; 86
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	88 23       	and	r24, r24
    1750:	dc f7       	brge	.-10     	; 0x1748 <TWI_readByteWithNACK+0x10>
		/*read data*/
		return TWDR;
    1752:	e3 e2       	ldi	r30, 0x23	; 35
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
}
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	08 95       	ret

0000175e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
	/*clear prescaler bits to get correct status*/
	return(TWSR & 0xF8);
    1766:	e1 e2       	ldi	r30, 0x21	; 33
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	88 7f       	andi	r24, 0xF8	; 248
}
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <main>:
#include"std_types.h"
#include"DC_MOTOR.h"
#include"util/delay.h"

int main(void)
{
    1774:	1f 93       	push	r17
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	c3 55       	subi	r28, 0x53	; 83
    1780:	d0 40       	sbci	r29, 0x00	; 0
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
	DcMotor_Init();
    178c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DcMotor_Init>
	UART_ConfigType config = {five_bits, no_parity, one_bit, 9600};
    1790:	ce 01       	movw	r24, r28
    1792:	c2 96       	adiw	r24, 0x32	; 50
    1794:	61 96       	adiw	r28, 0x11	; 17
    1796:	9f af       	std	Y+63, r25	; 0x3f
    1798:	8e af       	std	Y+62, r24	; 0x3e
    179a:	61 97       	sbiw	r28, 0x11	; 17
    179c:	e8 e6       	ldi	r30, 0x68	; 104
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	63 96       	adiw	r28, 0x13	; 19
    17a2:	ff af       	std	Y+63, r31	; 0x3f
    17a4:	ee af       	std	Y+62, r30	; 0x3e
    17a6:	63 97       	sbiw	r28, 0x13	; 19
    17a8:	f7 e0       	ldi	r31, 0x07	; 7
    17aa:	64 96       	adiw	r28, 0x14	; 20
    17ac:	ff af       	std	Y+63, r31	; 0x3f
    17ae:	64 97       	sbiw	r28, 0x14	; 20
    17b0:	63 96       	adiw	r28, 0x13	; 19
    17b2:	ee ad       	ldd	r30, Y+62	; 0x3e
    17b4:	ff ad       	ldd	r31, Y+63	; 0x3f
    17b6:	63 97       	sbiw	r28, 0x13	; 19
    17b8:	00 80       	ld	r0, Z
    17ba:	63 96       	adiw	r28, 0x13	; 19
    17bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    17be:	9f ad       	ldd	r25, Y+63	; 0x3f
    17c0:	63 97       	sbiw	r28, 0x13	; 19
    17c2:	01 96       	adiw	r24, 0x01	; 1
    17c4:	63 96       	adiw	r28, 0x13	; 19
    17c6:	9f af       	std	Y+63, r25	; 0x3f
    17c8:	8e af       	std	Y+62, r24	; 0x3e
    17ca:	63 97       	sbiw	r28, 0x13	; 19
    17cc:	61 96       	adiw	r28, 0x11	; 17
    17ce:	ee ad       	ldd	r30, Y+62	; 0x3e
    17d0:	ff ad       	ldd	r31, Y+63	; 0x3f
    17d2:	61 97       	sbiw	r28, 0x11	; 17
    17d4:	00 82       	st	Z, r0
    17d6:	61 96       	adiw	r28, 0x11	; 17
    17d8:	8e ad       	ldd	r24, Y+62	; 0x3e
    17da:	9f ad       	ldd	r25, Y+63	; 0x3f
    17dc:	61 97       	sbiw	r28, 0x11	; 17
    17de:	01 96       	adiw	r24, 0x01	; 1
    17e0:	61 96       	adiw	r28, 0x11	; 17
    17e2:	9f af       	std	Y+63, r25	; 0x3f
    17e4:	8e af       	std	Y+62, r24	; 0x3e
    17e6:	61 97       	sbiw	r28, 0x11	; 17
    17e8:	64 96       	adiw	r28, 0x14	; 20
    17ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    17ec:	64 97       	sbiw	r28, 0x14	; 20
    17ee:	91 50       	subi	r25, 0x01	; 1
    17f0:	64 96       	adiw	r28, 0x14	; 20
    17f2:	9f af       	std	Y+63, r25	; 0x3f
    17f4:	64 97       	sbiw	r28, 0x14	; 20
    17f6:	64 96       	adiw	r28, 0x14	; 20
    17f8:	ef ad       	ldd	r30, Y+63	; 0x3f
    17fa:	64 97       	sbiw	r28, 0x14	; 20
    17fc:	ee 23       	and	r30, r30
    17fe:	c1 f6       	brne	.-80     	; 0x17b0 <main+0x3c>
	UART_init(&config);
    1800:	ce 01       	movw	r24, r28
    1802:	c2 96       	adiw	r24, 0x32	; 50
    1804:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <UART_init>

	while(1)
	{
		UART_sendByte(ready);
    1808:	82 e1       	ldi	r24, 0x12	; 18
    180a:	0e 94 77 0e 	call	0x1cee	; 0x1cee <UART_sendByte>

		uint8 pass1[5];
		uint8 pass2[5];
		uint8 flag = TRUE;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	89 ab       	std	Y+49, r24	; 0x31
		UART_recieveString(pass1);
    1812:	ce 01       	movw	r24, r28
    1814:	c9 96       	adiw	r24, 0x39	; 57
    1816:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <UART_recieveString>
		UART_recieveString(pass2);
    181a:	ce 01       	movw	r24, r28
    181c:	ce 96       	adiw	r24, 0x3e	; 62
    181e:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <UART_recieveString>
		for(uint8 i = 0; i<5; i++)
    1822:	1d a6       	std	Y+45, r1	; 0x2d
    1824:	1c c0       	rjmp	.+56     	; 0x185e <main+0xea>
		{
			if(pass1[i] != pass2[i])
    1826:	8d a5       	ldd	r24, Y+45	; 0x2d
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	ce 01       	movw	r24, r28
    182e:	c9 96       	adiw	r24, 0x39	; 57
    1830:	fc 01       	movw	r30, r24
    1832:	e2 0f       	add	r30, r18
    1834:	f3 1f       	adc	r31, r19
    1836:	40 81       	ld	r20, Z
    1838:	8d a5       	ldd	r24, Y+45	; 0x2d
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	ce 01       	movw	r24, r28
    1840:	ce 96       	adiw	r24, 0x3e	; 62
    1842:	fc 01       	movw	r30, r24
    1844:	e2 0f       	add	r30, r18
    1846:	f3 1f       	adc	r31, r19
    1848:	80 81       	ld	r24, Z
    184a:	48 17       	cp	r20, r24
    184c:	29 f0       	breq	.+10     	; 0x1858 <main+0xe4>
			{
				UART_sendByte(un_matched);
    184e:	84 e4       	ldi	r24, 0x44	; 68
    1850:	0e 94 77 0e 	call	0x1cee	; 0x1cee <UART_sendByte>
				flag = FALSE;
    1854:	19 aa       	std	Y+49, r1	; 0x31
    1856:	06 c0       	rjmp	.+12     	; 0x1864 <main+0xf0>
		uint8 pass1[5];
		uint8 pass2[5];
		uint8 flag = TRUE;
		UART_recieveString(pass1);
		UART_recieveString(pass2);
		for(uint8 i = 0; i<5; i++)
    1858:	8d a5       	ldd	r24, Y+45	; 0x2d
    185a:	8f 5f       	subi	r24, 0xFF	; 255
    185c:	8d a7       	std	Y+45, r24	; 0x2d
    185e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1860:	85 30       	cpi	r24, 0x05	; 5
    1862:	08 f3       	brcs	.-62     	; 0x1826 <main+0xb2>
				flag = FALSE;
				break;
			}
		}

		TWI_ConfigType twi_config = {0x01, F_400k};
    1864:	fe 01       	movw	r30, r28
    1866:	ed 5b       	subi	r30, 0xBD	; 189
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	80 83       	st	Z, r24
    186e:	fe 01       	movw	r30, r28
    1870:	ed 5b       	subi	r30, 0xBD	; 189
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	81 83       	std	Z+1, r24	; 0x01
		TWI_init(&twi_config);
    1878:	ce 01       	movw	r24, r28
    187a:	8d 5b       	subi	r24, 0xBD	; 189
    187c:	9f 4f       	sbci	r25, 0xFF	; 255
    187e:	0e 94 1b 0b 	call	0x1636	; 0x1636 <TWI_init>
		uint8 add = 0x1;
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	88 ab       	std	Y+48, r24	; 0x30
		if(flag == TRUE)
    1886:	89 a9       	ldd	r24, Y+49	; 0x31
    1888:	81 30       	cpi	r24, 0x01	; 1
    188a:	d9 f4       	brne	.+54     	; 0x18c2 <main+0x14e>
		{
			for(uint8 i=0; i<5; i++)
    188c:	1c a6       	std	Y+44, r1	; 0x2c
    188e:	16 c0       	rjmp	.+44     	; 0x18bc <main+0x148>
			{
				EEPROM_writeByte(add, pass1[i]);
    1890:	88 a9       	ldd	r24, Y+48	; 0x30
    1892:	48 2f       	mov	r20, r24
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	8c a5       	ldd	r24, Y+44	; 0x2c
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	ce 01       	movw	r24, r28
    189e:	c9 96       	adiw	r24, 0x39	; 57
    18a0:	fc 01       	movw	r30, r24
    18a2:	e2 0f       	add	r30, r18
    18a4:	f3 1f       	adc	r31, r19
    18a6:	20 81       	ld	r18, Z
    18a8:	ca 01       	movw	r24, r20
    18aa:	62 2f       	mov	r22, r18
    18ac:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <EEPROM_writeByte>
				add++;
    18b0:	88 a9       	ldd	r24, Y+48	; 0x30
    18b2:	8f 5f       	subi	r24, 0xFF	; 255
    18b4:	88 ab       	std	Y+48, r24	; 0x30
		TWI_ConfigType twi_config = {0x01, F_400k};
		TWI_init(&twi_config);
		uint8 add = 0x1;
		if(flag == TRUE)
		{
			for(uint8 i=0; i<5; i++)
    18b6:	8c a5       	ldd	r24, Y+44	; 0x2c
    18b8:	8f 5f       	subi	r24, 0xFF	; 255
    18ba:	8c a7       	std	Y+44, r24	; 0x2c
    18bc:	8c a5       	ldd	r24, Y+44	; 0x2c
    18be:	85 30       	cpi	r24, 0x05	; 5
    18c0:	38 f3       	brcs	.-50     	; 0x1890 <main+0x11c>
				EEPROM_writeByte(add, pass1[i]);
				add++;
			}
		}
		/*********** + or - **************/
		while(UART_recieveByte() != ready_again){}
    18c2:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <UART_recieveByte>
    18c6:	85 35       	cpi	r24, 0x55	; 85
    18c8:	e1 f7       	brne	.-8      	; 0x18c2 <main+0x14e>
		uint8 pass[5], original_pass[5];
		UART_recieveString(pass);
    18ca:	ce 01       	movw	r24, r28
    18cc:	8b 5b       	subi	r24, 0xBB	; 187
    18ce:	9f 4f       	sbci	r25, 0xFF	; 255
    18d0:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <UART_recieveString>
		uint8 add_repeated = 0x1;
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	8f a7       	std	Y+47, r24	; 0x2f
		uint8 flag2 = TRUE;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	8e a7       	std	Y+46, r24	; 0x2e
		for(uint8 i = 0; i<5; i++)
    18dc:	1b a6       	std	Y+43, r1	; 0x2b
    18de:	20 c0       	rjmp	.+64     	; 0x1920 <main+0x1ac>
		{
			if(pass[i] != EEPROM_readByte(add_repeated, original_pass))
    18e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    18e2:	28 2f       	mov	r18, r24
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	ce 01       	movw	r24, r28
    18e8:	8b 5b       	subi	r24, 0xBB	; 187
    18ea:	9f 4f       	sbci	r25, 0xFF	; 255
    18ec:	fc 01       	movw	r30, r24
    18ee:	e2 0f       	add	r30, r18
    18f0:	f3 1f       	adc	r31, r19
    18f2:	10 81       	ld	r17, Z
    18f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18f6:	88 2f       	mov	r24, r24
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	9e 01       	movw	r18, r28
    18fc:	26 5b       	subi	r18, 0xB6	; 182
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1900:	b9 01       	movw	r22, r18
    1902:	0e 94 bb 0a 	call	0x1576	; 0x1576 <EEPROM_readByte>
    1906:	18 17       	cp	r17, r24
    1908:	29 f0       	breq	.+10     	; 0x1914 <main+0x1a0>
			{
				UART_sendByte(un_matched);
    190a:	84 e4       	ldi	r24, 0x44	; 68
    190c:	0e 94 77 0e 	call	0x1cee	; 0x1cee <UART_sendByte>
				flag2 = FALSE;
    1910:	1e a6       	std	Y+46, r1	; 0x2e
    1912:	09 c0       	rjmp	.+18     	; 0x1926 <main+0x1b2>
				break;
			}
			add_repeated++;
    1914:	8f a5       	ldd	r24, Y+47	; 0x2f
    1916:	8f 5f       	subi	r24, 0xFF	; 255
    1918:	8f a7       	std	Y+47, r24	; 0x2f
		while(UART_recieveByte() != ready_again){}
		uint8 pass[5], original_pass[5];
		UART_recieveString(pass);
		uint8 add_repeated = 0x1;
		uint8 flag2 = TRUE;
		for(uint8 i = 0; i<5; i++)
    191a:	8b a5       	ldd	r24, Y+43	; 0x2b
    191c:	8f 5f       	subi	r24, 0xFF	; 255
    191e:	8b a7       	std	Y+43, r24	; 0x2b
    1920:	8b a5       	ldd	r24, Y+43	; 0x2b
    1922:	85 30       	cpi	r24, 0x05	; 5
    1924:	e8 f2       	brcs	.-70     	; 0x18e0 <main+0x16c>
				break;
			}
			add_repeated++;
		}

		if(flag2 == TRUE)
    1926:	8e a5       	ldd	r24, Y+46	; 0x2e
    1928:	81 30       	cpi	r24, 0x01	; 1
    192a:	09 f0       	breq	.+2      	; 0x192e <main+0x1ba>
    192c:	6d cf       	rjmp	.-294    	; 0x1808 <main+0x94>
		{
			UART_sendByte(matched);
    192e:	86 e6       	ldi	r24, 0x66	; 102
    1930:	0e 94 77 0e 	call	0x1cee	; 0x1cee <UART_sendByte>
			DcMotor_Rotate(clkWise);
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	0e 94 c2 05 	call	0xb84	; 0xb84 <DcMotor_Rotate>
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	90 e6       	ldi	r25, 0x60	; 96
    193e:	aa e6       	ldi	r26, 0x6A	; 106
    1940:	b6 e4       	ldi	r27, 0x46	; 70
    1942:	8f a3       	std	Y+39, r24	; 0x27
    1944:	98 a7       	std	Y+40, r25	; 0x28
    1946:	a9 a7       	std	Y+41, r26	; 0x29
    1948:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194a:	6f a1       	ldd	r22, Y+39	; 0x27
    194c:	78 a5       	ldd	r23, Y+40	; 0x28
    194e:	89 a5       	ldd	r24, Y+41	; 0x29
    1950:	9a a5       	ldd	r25, Y+42	; 0x2a
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	4a ef       	ldi	r20, 0xFA	; 250
    1958:	54 e4       	ldi	r21, 0x44	; 68
    195a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	8b a3       	std	Y+35, r24	; 0x23
    1964:	9c a3       	std	Y+36, r25	; 0x24
    1966:	ad a3       	std	Y+37, r26	; 0x25
    1968:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    196a:	6b a1       	ldd	r22, Y+35	; 0x23
    196c:	7c a1       	ldd	r23, Y+36	; 0x24
    196e:	8d a1       	ldd	r24, Y+37	; 0x25
    1970:	9e a1       	ldd	r25, Y+38	; 0x26
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e8       	ldi	r20, 0x80	; 128
    1978:	5f e3       	ldi	r21, 0x3F	; 63
    197a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    197e:	88 23       	and	r24, r24
    1980:	2c f4       	brge	.+10     	; 0x198c <main+0x218>
		__ticks = 1;
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	9a a3       	std	Y+34, r25	; 0x22
    1988:	89 a3       	std	Y+33, r24	; 0x21
    198a:	3f c0       	rjmp	.+126    	; 0x1a0a <main+0x296>
	else if (__tmp > 65535)
    198c:	6b a1       	ldd	r22, Y+35	; 0x23
    198e:	7c a1       	ldd	r23, Y+36	; 0x24
    1990:	8d a1       	ldd	r24, Y+37	; 0x25
    1992:	9e a1       	ldd	r25, Y+38	; 0x26
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	3f ef       	ldi	r19, 0xFF	; 255
    1998:	4f e7       	ldi	r20, 0x7F	; 127
    199a:	57 e4       	ldi	r21, 0x47	; 71
    199c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19a0:	18 16       	cp	r1, r24
    19a2:	4c f5       	brge	.+82     	; 0x19f6 <main+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a4:	6f a1       	ldd	r22, Y+39	; 0x27
    19a6:	78 a5       	ldd	r23, Y+40	; 0x28
    19a8:	89 a5       	ldd	r24, Y+41	; 0x29
    19aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e2       	ldi	r20, 0x20	; 32
    19b2:	51 e4       	ldi	r21, 0x41	; 65
    19b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	bc 01       	movw	r22, r24
    19be:	cd 01       	movw	r24, r26
    19c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	9a a3       	std	Y+34, r25	; 0x22
    19ca:	89 a3       	std	Y+33, r24	; 0x21
    19cc:	0f c0       	rjmp	.+30     	; 0x19ec <main+0x278>
    19ce:	88 ec       	ldi	r24, 0xC8	; 200
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	98 a3       	std	Y+32, r25	; 0x20
    19d4:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19d8:	98 a1       	ldd	r25, Y+32	; 0x20
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <main+0x266>
    19de:	98 a3       	std	Y+32, r25	; 0x20
    19e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e2:	89 a1       	ldd	r24, Y+33	; 0x21
    19e4:	9a a1       	ldd	r25, Y+34	; 0x22
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	9a a3       	std	Y+34, r25	; 0x22
    19ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ec:	89 a1       	ldd	r24, Y+33	; 0x21
    19ee:	9a a1       	ldd	r25, Y+34	; 0x22
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	69 f7       	brne	.-38     	; 0x19ce <main+0x25a>
    19f4:	14 c0       	rjmp	.+40     	; 0x1a1e <main+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f6:	6b a1       	ldd	r22, Y+35	; 0x23
    19f8:	7c a1       	ldd	r23, Y+36	; 0x24
    19fa:	8d a1       	ldd	r24, Y+37	; 0x25
    19fc:	9e a1       	ldd	r25, Y+38	; 0x26
    19fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	9a a3       	std	Y+34, r25	; 0x22
    1a08:	89 a3       	std	Y+33, r24	; 0x21
    1a0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a0e:	9e 8f       	std	Y+30, r25	; 0x1e
    1a10:	8d 8f       	std	Y+29, r24	; 0x1d
    1a12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <main+0x2a2>
    1a1a:	9e 8f       	std	Y+30, r25	; 0x1e
    1a1c:	8d 8f       	std	Y+29, r24	; 0x1d
			/*lccccccd*/
			_delay_ms(15000);
			DcMotor_Rotate(stop);
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	0e 94 c2 05 	call	0xb84	; 0xb84 <DcMotor_Rotate>
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	90 e8       	ldi	r25, 0x80	; 128
    1a28:	ab e3       	ldi	r26, 0x3B	; 59
    1a2a:	b5 e4       	ldi	r27, 0x45	; 69
    1a2c:	89 8f       	std	Y+25, r24	; 0x19
    1a2e:	9a 8f       	std	Y+26, r25	; 0x1a
    1a30:	ab 8f       	std	Y+27, r26	; 0x1b
    1a32:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a34:	69 8d       	ldd	r22, Y+25	; 0x19
    1a36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	4a ef       	ldi	r20, 0xFA	; 250
    1a42:	54 e4       	ldi	r21, 0x44	; 68
    1a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	8d 8b       	std	Y+21, r24	; 0x15
    1a4e:	9e 8b       	std	Y+22, r25	; 0x16
    1a50:	af 8b       	std	Y+23, r26	; 0x17
    1a52:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a54:	6d 89       	ldd	r22, Y+21	; 0x15
    1a56:	7e 89       	ldd	r23, Y+22	; 0x16
    1a58:	8f 89       	ldd	r24, Y+23	; 0x17
    1a5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	40 e8       	ldi	r20, 0x80	; 128
    1a62:	5f e3       	ldi	r21, 0x3F	; 63
    1a64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a68:	88 23       	and	r24, r24
    1a6a:	2c f4       	brge	.+10     	; 0x1a76 <main+0x302>
		__ticks = 1;
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	9c 8b       	std	Y+20, r25	; 0x14
    1a72:	8b 8b       	std	Y+19, r24	; 0x13
    1a74:	3f c0       	rjmp	.+126    	; 0x1af4 <main+0x380>
	else if (__tmp > 65535)
    1a76:	6d 89       	ldd	r22, Y+21	; 0x15
    1a78:	7e 89       	ldd	r23, Y+22	; 0x16
    1a7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	3f ef       	ldi	r19, 0xFF	; 255
    1a82:	4f e7       	ldi	r20, 0x7F	; 127
    1a84:	57 e4       	ldi	r21, 0x47	; 71
    1a86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a8a:	18 16       	cp	r1, r24
    1a8c:	4c f5       	brge	.+82     	; 0x1ae0 <main+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 e2       	ldi	r20, 0x20	; 32
    1a9c:	51 e4       	ldi	r21, 0x41	; 65
    1a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	cd 01       	movw	r24, r26
    1aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	9c 8b       	std	Y+20, r25	; 0x14
    1ab4:	8b 8b       	std	Y+19, r24	; 0x13
    1ab6:	0f c0       	rjmp	.+30     	; 0x1ad6 <main+0x362>
    1ab8:	88 ec       	ldi	r24, 0xC8	; 200
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	9a 8b       	std	Y+18, r25	; 0x12
    1abe:	89 8b       	std	Y+17, r24	; 0x11
    1ac0:	89 89       	ldd	r24, Y+17	; 0x11
    1ac2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	f1 f7       	brne	.-4      	; 0x1ac4 <main+0x350>
    1ac8:	9a 8b       	std	Y+18, r25	; 0x12
    1aca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1acc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ace:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	9c 8b       	std	Y+20, r25	; 0x14
    1ad4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad8:	9c 89       	ldd	r25, Y+20	; 0x14
    1ada:	00 97       	sbiw	r24, 0x00	; 0
    1adc:	69 f7       	brne	.-38     	; 0x1ab8 <main+0x344>
    1ade:	14 c0       	rjmp	.+40     	; 0x1b08 <main+0x394>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	9c 8b       	std	Y+20, r25	; 0x14
    1af2:	8b 8b       	std	Y+19, r24	; 0x13
    1af4:	8b 89       	ldd	r24, Y+19	; 0x13
    1af6:	9c 89       	ldd	r25, Y+20	; 0x14
    1af8:	98 8b       	std	Y+16, r25	; 0x10
    1afa:	8f 87       	std	Y+15, r24	; 0x0f
    1afc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1afe:	98 89       	ldd	r25, Y+16	; 0x10
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	f1 f7       	brne	.-4      	; 0x1b00 <main+0x38c>
    1b04:	98 8b       	std	Y+16, r25	; 0x10
    1b06:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(3000);
			DcMotor_Rotate(antiClkWise);
    1b08:	82 e0       	ldi	r24, 0x02	; 2
    1b0a:	0e 94 c2 05 	call	0xb84	; 0xb84 <DcMotor_Rotate>
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e6       	ldi	r25, 0x60	; 96
    1b12:	aa e6       	ldi	r26, 0x6A	; 106
    1b14:	b6 e4       	ldi	r27, 0x46	; 70
    1b16:	8b 87       	std	Y+11, r24	; 0x0b
    1b18:	9c 87       	std	Y+12, r25	; 0x0c
    1b1a:	ad 87       	std	Y+13, r26	; 0x0d
    1b1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	4a ef       	ldi	r20, 0xFA	; 250
    1b2c:	54 e4       	ldi	r21, 0x44	; 68
    1b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	8f 83       	std	Y+7, r24	; 0x07
    1b38:	98 87       	std	Y+8, r25	; 0x08
    1b3a:	a9 87       	std	Y+9, r26	; 0x09
    1b3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b40:	78 85       	ldd	r23, Y+8	; 0x08
    1b42:	89 85       	ldd	r24, Y+9	; 0x09
    1b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e8       	ldi	r20, 0x80	; 128
    1b4c:	5f e3       	ldi	r21, 0x3F	; 63
    1b4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b52:	88 23       	and	r24, r24
    1b54:	2c f4       	brge	.+10     	; 0x1b60 <main+0x3ec>
		__ticks = 1;
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	9e 83       	std	Y+6, r25	; 0x06
    1b5c:	8d 83       	std	Y+5, r24	; 0x05
    1b5e:	3f c0       	rjmp	.+126    	; 0x1bde <main+0x46a>
	else if (__tmp > 65535)
    1b60:	6f 81       	ldd	r22, Y+7	; 0x07
    1b62:	78 85       	ldd	r23, Y+8	; 0x08
    1b64:	89 85       	ldd	r24, Y+9	; 0x09
    1b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	3f ef       	ldi	r19, 0xFF	; 255
    1b6c:	4f e7       	ldi	r20, 0x7F	; 127
    1b6e:	57 e4       	ldi	r21, 0x47	; 71
    1b70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b74:	18 16       	cp	r1, r24
    1b76:	4c f5       	brge	.+82     	; 0x1bca <main+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e2       	ldi	r20, 0x20	; 32
    1b86:	51 e4       	ldi	r21, 0x41	; 65
    1b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	bc 01       	movw	r22, r24
    1b92:	cd 01       	movw	r24, r26
    1b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	9e 83       	std	Y+6, r25	; 0x06
    1b9e:	8d 83       	std	Y+5, r24	; 0x05
    1ba0:	0f c0       	rjmp	.+30     	; 0x1bc0 <main+0x44c>
    1ba2:	88 ec       	ldi	r24, 0xC8	; 200
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	9c 83       	std	Y+4, r25	; 0x04
    1ba8:	8b 83       	std	Y+3, r24	; 0x03
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	9c 81       	ldd	r25, Y+4	; 0x04
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <main+0x43a>
    1bb2:	9c 83       	std	Y+4, r25	; 0x04
    1bb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	9e 83       	std	Y+6, r25	; 0x06
    1bbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	69 f7       	brne	.-38     	; 0x1ba2 <main+0x42e>
    1bc8:	1f ce       	rjmp	.-962    	; 0x1808 <main+0x94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bca:	6f 81       	ldd	r22, Y+7	; 0x07
    1bcc:	78 85       	ldd	r23, Y+8	; 0x08
    1bce:	89 85       	ldd	r24, Y+9	; 0x09
    1bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	9e 83       	std	Y+6, r25	; 0x06
    1bdc:	8d 83       	std	Y+5, r24	; 0x05
    1bde:	8d 81       	ldd	r24, Y+5	; 0x05
    1be0:	9e 81       	ldd	r25, Y+6	; 0x06
    1be2:	9a 83       	std	Y+2, r25	; 0x02
    1be4:	89 83       	std	Y+1, r24	; 0x01
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	f1 f7       	brne	.-4      	; 0x1bea <main+0x476>
    1bee:	9a 83       	std	Y+2, r25	; 0x02
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	0a ce       	rjmp	.-1004   	; 0x1808 <main+0x94>

00001bf4 <UART_init>:
#include"uart.h"
#include<avr/io.h>
#include"std_types.h"
#include"common_macros.h"
void UART_init(const UART_ConfigType * Config_Ptr)
{
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	00 d0       	rcall	.+0      	; 0x1bfa <UART_init+0x6>
    1bfa:	00 d0       	rcall	.+0      	; 0x1bfc <UART_init+0x8>
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	9c 83       	std	Y+4, r25	; 0x04
    1c02:	8b 83       	std	Y+3, r24	; 0x03
	//uint8 no_of_data_bits =
	uint16 UBRR_VALUE = 0;
    1c04:	1a 82       	std	Y+2, r1	; 0x02
    1c06:	19 82       	std	Y+1, r1	; 0x01
	/*set U2X to double transfer rate for asynchronus comm*/
	UCSRA = (1<<U2X);
    1c08:	eb e2       	ldi	r30, 0x2B	; 43
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	82 e0       	ldi	r24, 0x02	; 2
    1c0e:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN) | ((GET_BIT((Config_Ptr-> bit_data), 2))<<UCSZ2);
    1c10:	aa e2       	ldi	r26, 0x2A	; 42
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	eb 81       	ldd	r30, Y+3	; 0x03
    1c16:	fc 81       	ldd	r31, Y+4	; 0x04
    1c18:	80 81       	ld	r24, Z
    1c1a:	84 70       	andi	r24, 0x04	; 4
    1c1c:	88 61       	ori	r24, 0x18	; 24
    1c1e:	8c 93       	st	X, r24
	/************************** UCSRC Description **************************
		 *URSEL = 1 to read UCSRC and not write to ubrrh
		 *UCSZ0 = 1 & UCSZ1 = 1 to enable 8 bits mode
		 ***********************************************************************/
	UCSRC = (GET_BIT((Config_Ptr-> bit_data), 0)<<UCSZ0) |(GET_BIT((Config_Ptr-> bit_data), 1)<<UCSZ1) | ((Config_Ptr -> parity) << UPM0) | ((Config_Ptr->stop_bit) << USBS) | (1<<URSEL);
    1c20:	a0 e4       	ldi	r26, 0x40	; 64
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	eb 81       	ldd	r30, Y+3	; 0x03
    1c26:	fc 81       	ldd	r31, Y+4	; 0x04
    1c28:	80 81       	ld	r24, Z
    1c2a:	88 2f       	mov	r24, r24
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	81 70       	andi	r24, 0x01	; 1
    1c30:	90 70       	andi	r25, 0x00	; 0
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	28 2f       	mov	r18, r24
    1c38:	eb 81       	ldd	r30, Y+3	; 0x03
    1c3a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c3c:	80 81       	ld	r24, Z
    1c3e:	88 2f       	mov	r24, r24
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	82 70       	andi	r24, 0x02	; 2
    1c44:	90 70       	andi	r25, 0x00	; 0
    1c46:	95 95       	asr	r25
    1c48:	87 95       	ror	r24
    1c4a:	88 0f       	add	r24, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	88 0f       	add	r24, r24
    1c50:	99 1f       	adc	r25, r25
    1c52:	28 2b       	or	r18, r24
    1c54:	eb 81       	ldd	r30, Y+3	; 0x03
    1c56:	fc 81       	ldd	r31, Y+4	; 0x04
    1c58:	81 81       	ldd	r24, Z+1	; 0x01
    1c5a:	88 2f       	mov	r24, r24
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	82 95       	swap	r24
    1c60:	92 95       	swap	r25
    1c62:	90 7f       	andi	r25, 0xF0	; 240
    1c64:	98 27       	eor	r25, r24
    1c66:	80 7f       	andi	r24, 0xF0	; 240
    1c68:	98 27       	eor	r25, r24
    1c6a:	28 2b       	or	r18, r24
    1c6c:	eb 81       	ldd	r30, Y+3	; 0x03
    1c6e:	fc 81       	ldd	r31, Y+4	; 0x04
    1c70:	82 81       	ldd	r24, Z+2	; 0x02
    1c72:	88 2f       	mov	r24, r24
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	88 0f       	add	r24, r24
    1c78:	99 1f       	adc	r25, r25
    1c7a:	88 0f       	add	r24, r24
    1c7c:	99 1f       	adc	r25, r25
    1c7e:	88 0f       	add	r24, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	82 2b       	or	r24, r18
    1c84:	80 68       	ori	r24, 0x80	; 128
    1c86:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	UBRR_VALUE = (uint16)(((F_CPU / ((Config_Ptr -> baud_rate) * 8UL))) - 1);
    1c88:	eb 81       	ldd	r30, Y+3	; 0x03
    1c8a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c8c:	83 81       	ldd	r24, Z+3	; 0x03
    1c8e:	94 81       	ldd	r25, Z+4	; 0x04
    1c90:	a5 81       	ldd	r26, Z+5	; 0x05
    1c92:	b6 81       	ldd	r27, Z+6	; 0x06
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	aa 1f       	adc	r26, r26
    1c9a:	bb 1f       	adc	r27, r27
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	aa 1f       	adc	r26, r26
    1ca2:	bb 1f       	adc	r27, r27
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	aa 1f       	adc	r26, r26
    1caa:	bb 1f       	adc	r27, r27
    1cac:	9c 01       	movw	r18, r24
    1cae:	ad 01       	movw	r20, r26
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	92 e1       	ldi	r25, 0x12	; 18
    1cb4:	aa e7       	ldi	r26, 0x7A	; 122
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	bc 01       	movw	r22, r24
    1cba:	cd 01       	movw	r24, r26
    1cbc:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__udivmodsi4>
    1cc0:	da 01       	movw	r26, r20
    1cc2:	c9 01       	movw	r24, r18
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	9a 83       	std	Y+2, r25	; 0x02
    1cc8:	89 83       	std	Y+1, r24	; 0x01

		/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
		UBRRH = UBRR_VALUE>>8;
    1cca:	e0 e4       	ldi	r30, 0x40	; 64
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd2:	89 2f       	mov	r24, r25
    1cd4:	99 27       	eor	r25, r25
    1cd6:	80 83       	st	Z, r24
		UBRRL = UBRR_VALUE;
    1cd8:	e9 e2       	ldi	r30, 0x29	; 41
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	80 83       	st	Z, r24
}
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <UART_sendByte>:

void UART_sendByte(uint8 data)
{
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	0f 92       	push	r0
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	89 83       	std	Y+1, r24	; 0x01
	/*polling until data buffer is empty*/
	while(!(UCSRA &(1<<UDRE))){}
    1cfa:	eb e2       	ldi	r30, 0x2B	; 43
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	88 2f       	mov	r24, r24
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	80 72       	andi	r24, 0x20	; 32
    1d06:	90 70       	andi	r25, 0x00	; 0
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	b9 f3       	breq	.-18     	; 0x1cfa <UART_sendByte+0xc>
	UDR = data;
    1d0c:	ec e2       	ldi	r30, 0x2C	; 44
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	80 83       	st	Z, r24
}
    1d14:	0f 90       	pop	r0
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <UART_recieveByte>:
uint8 UART_recieveByte(void)
{
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
	/*polling until recieve complete*/
	while(!(UCSRA &(1<<RXC))){}
    1d24:	eb e2       	ldi	r30, 0x2B	; 43
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	88 23       	and	r24, r24
    1d2c:	dc f7       	brge	.-10     	; 0x1d24 <UART_recieveByte+0x8>
	return UDR;
    1d2e:	ec e2       	ldi	r30, 0x2C	; 44
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
}
    1d34:	cf 91       	pop	r28
    1d36:	df 91       	pop	r29
    1d38:	08 95       	ret

00001d3a <UART_sendString>:

void UART_sendString(const uint8* str)
{
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <UART_sendString+0x6>
    1d40:	0f 92       	push	r0
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	9b 83       	std	Y+3, r25	; 0x03
    1d48:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1d4a:	19 82       	std	Y+1, r1	; 0x01
    1d4c:	0e c0       	rjmp	.+28     	; 0x1d6a <UART_sendString+0x30>
	while(str[i] != '\0')
	{
		UART_sendByte(str[i]);
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	9b 81       	ldd	r25, Y+3	; 0x03
    1d58:	fc 01       	movw	r30, r24
    1d5a:	e2 0f       	add	r30, r18
    1d5c:	f3 1f       	adc	r31, r19
    1d5e:	80 81       	ld	r24, Z
    1d60:	0e 94 77 0e 	call	0x1cee	; 0x1cee <UART_sendByte>
		i++;
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	8f 5f       	subi	r24, 0xFF	; 255
    1d68:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8* str)
{
	uint8 i = 0;
	while(str[i] != '\0')
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	28 2f       	mov	r18, r24
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	9b 81       	ldd	r25, Y+3	; 0x03
    1d74:	fc 01       	movw	r30, r24
    1d76:	e2 0f       	add	r30, r18
    1d78:	f3 1f       	adc	r31, r19
    1d7a:	80 81       	ld	r24, Z
    1d7c:	88 23       	and	r24, r24
    1d7e:	39 f7       	brne	.-50     	; 0x1d4e <UART_sendString+0x14>
	{
		UART_sendByte(str[i]);
		i++;
	}
}
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <UART_recieveString>:

void UART_recieveString(uint8 *recieved_str)
{
    1d8c:	0f 93       	push	r16
    1d8e:	1f 93       	push	r17
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <UART_recieveString+0xa>
    1d96:	0f 92       	push	r0
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	9b 83       	std	Y+3, r25	; 0x03
    1d9e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1da0:	19 82       	std	Y+1, r1	; 0x01
	recieved_str[i] = UART_recieveByte();
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	9b 81       	ldd	r25, Y+3	; 0x03
    1dac:	8c 01       	movw	r16, r24
    1dae:	02 0f       	add	r16, r18
    1db0:	13 1f       	adc	r17, r19
    1db2:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <UART_recieveByte>
    1db6:	f8 01       	movw	r30, r16
    1db8:	80 83       	st	Z, r24
    1dba:	0f c0       	rjmp	.+30     	; 0x1dda <UART_recieveString+0x4e>
	while(recieved_str[i] != '#')
	{
		i++;
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	8f 5f       	subi	r24, 0xFF	; 255
    1dc0:	89 83       	std	Y+1, r24	; 0x01
		recieved_str[i] = UART_recieveByte();
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	9b 81       	ldd	r25, Y+3	; 0x03
    1dcc:	8c 01       	movw	r16, r24
    1dce:	02 0f       	add	r16, r18
    1dd0:	13 1f       	adc	r17, r19
    1dd2:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <UART_recieveByte>
    1dd6:	f8 01       	movw	r30, r16
    1dd8:	80 83       	st	Z, r24

void UART_recieveString(uint8 *recieved_str)
{
	uint8 i = 0;
	recieved_str[i] = UART_recieveByte();
	while(recieved_str[i] != '#')
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	9b 81       	ldd	r25, Y+3	; 0x03
    1de4:	fc 01       	movw	r30, r24
    1de6:	e2 0f       	add	r30, r18
    1de8:	f3 1f       	adc	r31, r19
    1dea:	80 81       	ld	r24, Z
    1dec:	83 32       	cpi	r24, 0x23	; 35
    1dee:	31 f7       	brne	.-52     	; 0x1dbc <UART_recieveString+0x30>
	{
		i++;
		recieved_str[i] = UART_recieveByte();
	}
	recieved_str[i] = '\0';
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	28 2f       	mov	r18, r24
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	e2 0f       	add	r30, r18
    1dfe:	f3 1f       	adc	r31, r19
    1e00:	10 82       	st	Z, r1
}
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	1f 91       	pop	r17
    1e0e:	0f 91       	pop	r16
    1e10:	08 95       	ret

00001e12 <__mulsi3>:
    1e12:	62 9f       	mul	r22, r18
    1e14:	d0 01       	movw	r26, r0
    1e16:	73 9f       	mul	r23, r19
    1e18:	f0 01       	movw	r30, r0
    1e1a:	82 9f       	mul	r24, r18
    1e1c:	e0 0d       	add	r30, r0
    1e1e:	f1 1d       	adc	r31, r1
    1e20:	64 9f       	mul	r22, r20
    1e22:	e0 0d       	add	r30, r0
    1e24:	f1 1d       	adc	r31, r1
    1e26:	92 9f       	mul	r25, r18
    1e28:	f0 0d       	add	r31, r0
    1e2a:	83 9f       	mul	r24, r19
    1e2c:	f0 0d       	add	r31, r0
    1e2e:	74 9f       	mul	r23, r20
    1e30:	f0 0d       	add	r31, r0
    1e32:	65 9f       	mul	r22, r21
    1e34:	f0 0d       	add	r31, r0
    1e36:	99 27       	eor	r25, r25
    1e38:	72 9f       	mul	r23, r18
    1e3a:	b0 0d       	add	r27, r0
    1e3c:	e1 1d       	adc	r30, r1
    1e3e:	f9 1f       	adc	r31, r25
    1e40:	63 9f       	mul	r22, r19
    1e42:	b0 0d       	add	r27, r0
    1e44:	e1 1d       	adc	r30, r1
    1e46:	f9 1f       	adc	r31, r25
    1e48:	bd 01       	movw	r22, r26
    1e4a:	cf 01       	movw	r24, r30
    1e4c:	11 24       	eor	r1, r1
    1e4e:	08 95       	ret

00001e50 <__udivmodsi4>:
    1e50:	a1 e2       	ldi	r26, 0x21	; 33
    1e52:	1a 2e       	mov	r1, r26
    1e54:	aa 1b       	sub	r26, r26
    1e56:	bb 1b       	sub	r27, r27
    1e58:	fd 01       	movw	r30, r26
    1e5a:	0d c0       	rjmp	.+26     	; 0x1e76 <__udivmodsi4_ep>

00001e5c <__udivmodsi4_loop>:
    1e5c:	aa 1f       	adc	r26, r26
    1e5e:	bb 1f       	adc	r27, r27
    1e60:	ee 1f       	adc	r30, r30
    1e62:	ff 1f       	adc	r31, r31
    1e64:	a2 17       	cp	r26, r18
    1e66:	b3 07       	cpc	r27, r19
    1e68:	e4 07       	cpc	r30, r20
    1e6a:	f5 07       	cpc	r31, r21
    1e6c:	20 f0       	brcs	.+8      	; 0x1e76 <__udivmodsi4_ep>
    1e6e:	a2 1b       	sub	r26, r18
    1e70:	b3 0b       	sbc	r27, r19
    1e72:	e4 0b       	sbc	r30, r20
    1e74:	f5 0b       	sbc	r31, r21

00001e76 <__udivmodsi4_ep>:
    1e76:	66 1f       	adc	r22, r22
    1e78:	77 1f       	adc	r23, r23
    1e7a:	88 1f       	adc	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	1a 94       	dec	r1
    1e80:	69 f7       	brne	.-38     	; 0x1e5c <__udivmodsi4_loop>
    1e82:	60 95       	com	r22
    1e84:	70 95       	com	r23
    1e86:	80 95       	com	r24
    1e88:	90 95       	com	r25
    1e8a:	9b 01       	movw	r18, r22
    1e8c:	ac 01       	movw	r20, r24
    1e8e:	bd 01       	movw	r22, r26
    1e90:	cf 01       	movw	r24, r30
    1e92:	08 95       	ret

00001e94 <__prologue_saves__>:
    1e94:	2f 92       	push	r2
    1e96:	3f 92       	push	r3
    1e98:	4f 92       	push	r4
    1e9a:	5f 92       	push	r5
    1e9c:	6f 92       	push	r6
    1e9e:	7f 92       	push	r7
    1ea0:	8f 92       	push	r8
    1ea2:	9f 92       	push	r9
    1ea4:	af 92       	push	r10
    1ea6:	bf 92       	push	r11
    1ea8:	cf 92       	push	r12
    1eaa:	df 92       	push	r13
    1eac:	ef 92       	push	r14
    1eae:	ff 92       	push	r15
    1eb0:	0f 93       	push	r16
    1eb2:	1f 93       	push	r17
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	ca 1b       	sub	r28, r26
    1ebe:	db 0b       	sbc	r29, r27
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	09 94       	ijmp

00001ecc <__epilogue_restores__>:
    1ecc:	2a 88       	ldd	r2, Y+18	; 0x12
    1ece:	39 88       	ldd	r3, Y+17	; 0x11
    1ed0:	48 88       	ldd	r4, Y+16	; 0x10
    1ed2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ed4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ed6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ed8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1eda:	9b 84       	ldd	r9, Y+11	; 0x0b
    1edc:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ede:	b9 84       	ldd	r11, Y+9	; 0x09
    1ee0:	c8 84       	ldd	r12, Y+8	; 0x08
    1ee2:	df 80       	ldd	r13, Y+7	; 0x07
    1ee4:	ee 80       	ldd	r14, Y+6	; 0x06
    1ee6:	fd 80       	ldd	r15, Y+5	; 0x05
    1ee8:	0c 81       	ldd	r16, Y+4	; 0x04
    1eea:	1b 81       	ldd	r17, Y+3	; 0x03
    1eec:	aa 81       	ldd	r26, Y+2	; 0x02
    1eee:	b9 81       	ldd	r27, Y+1	; 0x01
    1ef0:	ce 0f       	add	r28, r30
    1ef2:	d1 1d       	adc	r29, r1
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	cd bf       	out	0x3d, r28	; 61
    1efe:	ed 01       	movw	r28, r26
    1f00:	08 95       	ret

00001f02 <_exit>:
    1f02:	f8 94       	cli

00001f04 <__stop_program>:
    1f04:	ff cf       	rjmp	.-2      	; 0x1f04 <__stop_program>
