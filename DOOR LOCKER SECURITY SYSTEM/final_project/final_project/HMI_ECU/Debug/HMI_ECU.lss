
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  000029ac  00002a40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000ba  008000ba  00002a9a  2**0
                  ALLOC
  3 .stab         0000258c  00000000  00000000  00002a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010ea  00000000  00000000  00005028  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006112  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006252  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000063c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000800b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a091  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a85f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3b       	cpi	r26, 0xBA	; 186
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa eb       	ldi	r26, 0xBA	; 186
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3b       	cpi	r26, 0xBC	; 188
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ac 12 	call	0x2558	; 0x2558 <main>
      8a:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ea       	ldi	r26, 0xAA	; 170
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ea       	ldi	r24, 0xAA	; 170
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 84 14 	jmp	0x2908	; 0x2908 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <setPinDirection>:

/*
 * set the direction of the given pin (input / output)
 */
void setPinDirection(uint8 PORT_ID,uint8 PIN_ID, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <setPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <setPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	if(PORT_ID >= NUM_OF_PORTS || PIN_ID >= NUM_OF_PINS_PER_PORT )
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	84 30       	cpi	r24, 0x04	; 4
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <setPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <setPinDirection+0x1c6>
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	88 30       	cpi	r24, 0x08	; 8
     b66:	08 f0       	brcs	.+2      	; 0xb6a <setPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <setPinDirection+0x1c6>
	{
		/*do nothing*/
	}
	else
	{
		switch(PORT_ID)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <setPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <setPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <setPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <setPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <setPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <setPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <setPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <setPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <setPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_INPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	88 23       	and	r24, r24
     bb2:	a9 f4       	brne	.+42     	; 0xbde <setPinDirection+0x98>
				CLEAR_BIT(DDRA, PIN_ID);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <setPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <setPinDirection+0x88>
     bd6:	80 95       	com	r24
     bd8:	84 23       	and	r24, r20
     bda:	8c 93       	st	X, r24
     bdc:	97 c0       	rjmp	.+302    	; 0xd0c <setPinDirection+0x1c6>
			else
				SET_BIT(DDRA, PIN_ID);
     bde:	aa e3       	ldi	r26, 0x3A	; 58
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	ea e3       	ldi	r30, 0x3A	; 58
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	48 2f       	mov	r20, r24
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	02 2e       	mov	r0, r18
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <setPinDirection+0xb6>
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	0a 94       	dec	r0
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <setPinDirection+0xb2>
     c00:	84 2b       	or	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <setPinDirection+0x1c6>
			break;
		case PORTB_ID:
			if(direction == PIN_INPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	88 23       	and	r24, r24
     c0a:	a9 f4       	brne	.+42     	; 0xc36 <setPinDirection+0xf0>
				CLEAR_BIT(DDRB, PIN_ID);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <setPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <setPinDirection+0xe0>
     c2e:	80 95       	com	r24
     c30:	84 23       	and	r24, r20
     c32:	8c 93       	st	X, r24
     c34:	6b c0       	rjmp	.+214    	; 0xd0c <setPinDirection+0x1c6>
			else
				SET_BIT(DDRB, PIN_ID);
     c36:	a7 e3       	ldi	r26, 0x37	; 55
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e7 e3       	ldi	r30, 0x37	; 55
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	48 2f       	mov	r20, r24
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	28 2f       	mov	r18, r24
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	02 2e       	mov	r0, r18
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <setPinDirection+0x10e>
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	0a 94       	dec	r0
     c56:	e2 f7       	brpl	.-8      	; 0xc50 <setPinDirection+0x10a>
     c58:	84 2b       	or	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <setPinDirection+0x1c6>
			break;
		case PORTC_ID:
			if(direction == PIN_INPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	88 23       	and	r24, r24
     c62:	a9 f4       	brne	.+42     	; 0xc8e <setPinDirection+0x148>
				CLEAR_BIT(DDRC, PIN_ID);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <setPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <setPinDirection+0x138>
     c86:	80 95       	com	r24
     c88:	84 23       	and	r24, r20
     c8a:	8c 93       	st	X, r24
     c8c:	3f c0       	rjmp	.+126    	; 0xd0c <setPinDirection+0x1c6>
			else
				SET_BIT(DDRC, PIN_ID);
     c8e:	a4 e3       	ldi	r26, 0x34	; 52
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e4 e3       	ldi	r30, 0x34	; 52
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <setPinDirection+0x166>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <setPinDirection+0x162>
     cb0:	84 2b       	or	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <setPinDirection+0x1c6>
			break;
		case PORTD_ID:
			if(direction == PIN_INPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	88 23       	and	r24, r24
     cba:	a9 f4       	brne	.+42     	; 0xce6 <setPinDirection+0x1a0>
				CLEAR_BIT(DDRD, PIN_ID);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <setPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <setPinDirection+0x190>
     cde:	80 95       	com	r24
     ce0:	84 23       	and	r24, r20
     ce2:	8c 93       	st	X, r24
     ce4:	13 c0       	rjmp	.+38     	; 0xd0c <setPinDirection+0x1c6>
			else
				SET_BIT(DDRD, PIN_ID);
     ce6:	a1 e3       	ldi	r26, 0x31	; 49
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e1 e3       	ldi	r30, 0x31	; 49
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 2e       	mov	r0, r18
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <setPinDirection+0x1be>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	0a 94       	dec	r0
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <setPinDirection+0x1ba>
     d08:	84 2b       	or	r24, r20
     d0a:	8c 93       	st	X, r24
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <setPortDirection>:

/*
 * set the direction of the given port (input / output)
 */
void setPortDirection(uint8 PORT_ID, GPIO_PortDirectionType direction)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <setPortDirection+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <setPortDirection+0x8>
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	89 83       	std	Y+1, r24	; 0x01
     d2a:	6a 83       	std	Y+2, r22	; 0x02
	if(PORT_ID >= NUM_OF_PORTS)
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	84 30       	cpi	r24, 0x04	; 4
     d30:	90 f5       	brcc	.+100    	; 0xd96 <setPortDirection+0x7a>
	{
		/*do nothing*/
	}
	else
	{
		switch(PORT_ID)
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	3c 83       	std	Y+4, r19	; 0x04
     d3a:	2b 83       	std	Y+3, r18	; 0x03
     d3c:	8b 81       	ldd	r24, Y+3	; 0x03
     d3e:	9c 81       	ldd	r25, Y+4	; 0x04
     d40:	81 30       	cpi	r24, 0x01	; 1
     d42:	91 05       	cpc	r25, r1
     d44:	d1 f0       	breq	.+52     	; 0xd7a <setPortDirection+0x5e>
     d46:	2b 81       	ldd	r18, Y+3	; 0x03
     d48:	3c 81       	ldd	r19, Y+4	; 0x04
     d4a:	22 30       	cpi	r18, 0x02	; 2
     d4c:	31 05       	cpc	r19, r1
     d4e:	2c f4       	brge	.+10     	; 0xd5a <setPortDirection+0x3e>
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	9c 81       	ldd	r25, Y+4	; 0x04
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	61 f0       	breq	.+24     	; 0xd70 <setPortDirection+0x54>
     d58:	1e c0       	rjmp	.+60     	; 0xd96 <setPortDirection+0x7a>
     d5a:	2b 81       	ldd	r18, Y+3	; 0x03
     d5c:	3c 81       	ldd	r19, Y+4	; 0x04
     d5e:	22 30       	cpi	r18, 0x02	; 2
     d60:	31 05       	cpc	r19, r1
     d62:	81 f0       	breq	.+32     	; 0xd84 <setPortDirection+0x68>
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	9c 81       	ldd	r25, Y+4	; 0x04
     d68:	83 30       	cpi	r24, 0x03	; 3
     d6a:	91 05       	cpc	r25, r1
     d6c:	81 f0       	breq	.+32     	; 0xd8e <setPortDirection+0x72>
     d6e:	13 c0       	rjmp	.+38     	; 0xd96 <setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
     d70:	ea e3       	ldi	r30, 0x3A	; 58
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	80 83       	st	Z, r24
     d78:	0e c0       	rjmp	.+28     	; 0xd96 <setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
     d7a:	e7 e3       	ldi	r30, 0x37	; 55
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	80 83       	st	Z, r24
     d82:	09 c0       	rjmp	.+18     	; 0xd96 <setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
     d84:	e4 e3       	ldi	r30, 0x34	; 52
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	80 83       	st	Z, r24
     d8c:	04 c0       	rjmp	.+8      	; 0xd96 <setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
     d8e:	e1 e3       	ldi	r30, 0x31	; 49
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	80 83       	st	Z, r24
			break;
		}
	}
}
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <readPin>:

/*
 * return the value for the given pin
 */
uint8 readPin(uint8 PORT_ID, uint8 PIN_ID)
{
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	00 d0       	rcall	.+0      	; 0xdaa <readPin+0x6>
     daa:	00 d0       	rcall	.+0      	; 0xdac <readPin+0x8>
     dac:	0f 92       	push	r0
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	8a 83       	std	Y+2, r24	; 0x02
     db4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     db6:	19 82       	std	Y+1, r1	; 0x01

	if(PORT_ID >= NUM_OF_PORTS || PIN_ID >= NUM_OF_PINS_PER_PORT)
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	84 30       	cpi	r24, 0x04	; 4
     dbc:	08 f0       	brcs	.+2      	; 0xdc0 <readPin+0x1c>
     dbe:	84 c0       	rjmp	.+264    	; 0xec8 <readPin+0x124>
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	88 30       	cpi	r24, 0x08	; 8
     dc4:	08 f0       	brcs	.+2      	; 0xdc8 <readPin+0x24>
     dc6:	80 c0       	rjmp	.+256    	; 0xec8 <readPin+0x124>
		/*do nothing*/
	}
	else
	{
		/* Read the pin value as required */
		switch(PORT_ID)
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	3d 83       	std	Y+5, r19	; 0x05
     dd0:	2c 83       	std	Y+4, r18	; 0x04
     dd2:	4c 81       	ldd	r20, Y+4	; 0x04
     dd4:	5d 81       	ldd	r21, Y+5	; 0x05
     dd6:	41 30       	cpi	r20, 0x01	; 1
     dd8:	51 05       	cpc	r21, r1
     dda:	79 f1       	breq	.+94     	; 0xe3a <readPin+0x96>
     ddc:	8c 81       	ldd	r24, Y+4	; 0x04
     dde:	9d 81       	ldd	r25, Y+5	; 0x05
     de0:	82 30       	cpi	r24, 0x02	; 2
     de2:	91 05       	cpc	r25, r1
     de4:	34 f4       	brge	.+12     	; 0xdf2 <readPin+0x4e>
     de6:	2c 81       	ldd	r18, Y+4	; 0x04
     de8:	3d 81       	ldd	r19, Y+5	; 0x05
     dea:	21 15       	cp	r18, r1
     dec:	31 05       	cpc	r19, r1
     dee:	69 f0       	breq	.+26     	; 0xe0a <readPin+0x66>
     df0:	6b c0       	rjmp	.+214    	; 0xec8 <readPin+0x124>
     df2:	4c 81       	ldd	r20, Y+4	; 0x04
     df4:	5d 81       	ldd	r21, Y+5	; 0x05
     df6:	42 30       	cpi	r20, 0x02	; 2
     df8:	51 05       	cpc	r21, r1
     dfa:	b9 f1       	breq	.+110    	; 0xe6a <readPin+0xc6>
     dfc:	8c 81       	ldd	r24, Y+4	; 0x04
     dfe:	9d 81       	ldd	r25, Y+5	; 0x05
     e00:	83 30       	cpi	r24, 0x03	; 3
     e02:	91 05       	cpc	r25, r1
     e04:	09 f4       	brne	.+2      	; 0xe08 <readPin+0x64>
     e06:	49 c0       	rjmp	.+146    	; 0xe9a <readPin+0xf6>
     e08:	5f c0       	rjmp	.+190    	; 0xec8 <readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,PIN_ID))
     e0a:	e9 e3       	ldi	r30, 0x39	; 57
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	88 2f       	mov	r24, r24
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	a9 01       	movw	r20, r18
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <readPin+0x7e>
     e1e:	55 95       	asr	r21
     e20:	47 95       	ror	r20
     e22:	8a 95       	dec	r24
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <readPin+0x7a>
     e26:	ca 01       	movw	r24, r20
     e28:	81 70       	andi	r24, 0x01	; 1
     e2a:	90 70       	andi	r25, 0x00	; 0
     e2c:	88 23       	and	r24, r24
     e2e:	19 f0       	breq	.+6      	; 0xe36 <readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	89 83       	std	Y+1, r24	; 0x01
     e34:	49 c0       	rjmp	.+146    	; 0xec8 <readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     e36:	19 82       	std	Y+1, r1	; 0x01
     e38:	47 c0       	rjmp	.+142    	; 0xec8 <readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,PIN_ID))
     e3a:	e6 e3       	ldi	r30, 0x36	; 54
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	88 2f       	mov	r24, r24
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	a9 01       	movw	r20, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <readPin+0xae>
     e4e:	55 95       	asr	r21
     e50:	47 95       	ror	r20
     e52:	8a 95       	dec	r24
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <readPin+0xaa>
     e56:	ca 01       	movw	r24, r20
     e58:	81 70       	andi	r24, 0x01	; 1
     e5a:	90 70       	andi	r25, 0x00	; 0
     e5c:	88 23       	and	r24, r24
     e5e:	19 f0       	breq	.+6      	; 0xe66 <readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	89 83       	std	Y+1, r24	; 0x01
     e64:	31 c0       	rjmp	.+98     	; 0xec8 <readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     e66:	19 82       	std	Y+1, r1	; 0x01
     e68:	2f c0       	rjmp	.+94     	; 0xec8 <readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,PIN_ID))
     e6a:	e3 e3       	ldi	r30, 0x33	; 51
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	88 2f       	mov	r24, r24
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	a9 01       	movw	r20, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <readPin+0xde>
     e7e:	55 95       	asr	r21
     e80:	47 95       	ror	r20
     e82:	8a 95       	dec	r24
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <readPin+0xda>
     e86:	ca 01       	movw	r24, r20
     e88:	81 70       	andi	r24, 0x01	; 1
     e8a:	90 70       	andi	r25, 0x00	; 0
     e8c:	88 23       	and	r24, r24
     e8e:	19 f0       	breq	.+6      	; 0xe96 <readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	89 83       	std	Y+1, r24	; 0x01
     e94:	19 c0       	rjmp	.+50     	; 0xec8 <readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     e96:	19 82       	std	Y+1, r1	; 0x01
     e98:	17 c0       	rjmp	.+46     	; 0xec8 <readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,PIN_ID))
     e9a:	e0 e3       	ldi	r30, 0x30	; 48
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	88 2f       	mov	r24, r24
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	a9 01       	movw	r20, r18
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <readPin+0x10e>
     eae:	55 95       	asr	r21
     eb0:	47 95       	ror	r20
     eb2:	8a 95       	dec	r24
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <readPin+0x10a>
     eb6:	ca 01       	movw	r24, r20
     eb8:	81 70       	andi	r24, 0x01	; 1
     eba:	90 70       	andi	r25, 0x00	; 0
     ebc:	88 23       	and	r24, r24
     ebe:	19 f0       	breq	.+6      	; 0xec6 <readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	01 c0       	rjmp	.+2      	; 0xec8 <readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     ec6:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
}
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <writePin>:

/*
 * Write the given value in the given pin
 */
void writePin(uint8 PORT_ID, uint8 PIN_ID, uint8 value )
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <writePin+0x6>
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <writePin+0x8>
     ee2:	0f 92       	push	r0
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	89 83       	std	Y+1, r24	; 0x01
     eea:	6a 83       	std	Y+2, r22	; 0x02
     eec:	4b 83       	std	Y+3, r20	; 0x03
	if(PORT_ID >= NUM_OF_PORTS || PIN_ID >= NUM_OF_PINS_PER_PORT)
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	84 30       	cpi	r24, 0x04	; 4
     ef2:	08 f0       	brcs	.+2      	; 0xef6 <writePin+0x1c>
     ef4:	d5 c0       	rjmp	.+426    	; 0x10a0 <writePin+0x1c6>
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	88 30       	cpi	r24, 0x08	; 8
     efa:	08 f0       	brcs	.+2      	; 0xefe <writePin+0x24>
     efc:	d1 c0       	rjmp	.+418    	; 0x10a0 <writePin+0x1c6>
		/*do nothing*/
	}
	else
	{
		/* Read the pin value as required */
		switch(PORT_ID)
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	3d 83       	std	Y+5, r19	; 0x05
     f06:	2c 83       	std	Y+4, r18	; 0x04
     f08:	8c 81       	ldd	r24, Y+4	; 0x04
     f0a:	9d 81       	ldd	r25, Y+5	; 0x05
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	91 05       	cpc	r25, r1
     f10:	09 f4       	brne	.+2      	; 0xf14 <writePin+0x3a>
     f12:	43 c0       	rjmp	.+134    	; 0xf9a <writePin+0xc0>
     f14:	2c 81       	ldd	r18, Y+4	; 0x04
     f16:	3d 81       	ldd	r19, Y+5	; 0x05
     f18:	22 30       	cpi	r18, 0x02	; 2
     f1a:	31 05       	cpc	r19, r1
     f1c:	2c f4       	brge	.+10     	; 0xf28 <writePin+0x4e>
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	9d 81       	ldd	r25, Y+5	; 0x05
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	71 f0       	breq	.+28     	; 0xf42 <writePin+0x68>
     f26:	bc c0       	rjmp	.+376    	; 0x10a0 <writePin+0x1c6>
     f28:	2c 81       	ldd	r18, Y+4	; 0x04
     f2a:	3d 81       	ldd	r19, Y+5	; 0x05
     f2c:	22 30       	cpi	r18, 0x02	; 2
     f2e:	31 05       	cpc	r19, r1
     f30:	09 f4       	brne	.+2      	; 0xf34 <writePin+0x5a>
     f32:	5f c0       	rjmp	.+190    	; 0xff2 <writePin+0x118>
     f34:	8c 81       	ldd	r24, Y+4	; 0x04
     f36:	9d 81       	ldd	r25, Y+5	; 0x05
     f38:	83 30       	cpi	r24, 0x03	; 3
     f3a:	91 05       	cpc	r25, r1
     f3c:	09 f4       	brne	.+2      	; 0xf40 <writePin+0x66>
     f3e:	85 c0       	rjmp	.+266    	; 0x104a <writePin+0x170>
     f40:	af c0       	rjmp	.+350    	; 0x10a0 <writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	81 30       	cpi	r24, 0x01	; 1
     f46:	a1 f4       	brne	.+40     	; 0xf70 <writePin+0x96>
				SET_BIT(PORTA, PIN_ID);
     f48:	ab e3       	ldi	r26, 0x3B	; 59
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	eb e3       	ldi	r30, 0x3B	; 59
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 2e       	mov	r0, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <writePin+0x8c>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <writePin+0x88>
     f6a:	84 2b       	or	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	98 c0       	rjmp	.+304    	; 0x10a0 <writePin+0x1c6>
			else
				CLEAR_BIT(PORTA, PIN_ID);
     f70:	ab e3       	ldi	r26, 0x3B	; 59
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	eb e3       	ldi	r30, 0x3B	; 59
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <writePin+0xb4>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <writePin+0xb0>
     f92:	80 95       	com	r24
     f94:	84 23       	and	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	83 c0       	rjmp	.+262    	; 0x10a0 <writePin+0x1c6>

			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	a1 f4       	brne	.+40     	; 0xfc8 <writePin+0xee>
				SET_BIT(PORTB, PIN_ID);
     fa0:	a8 e3       	ldi	r26, 0x38	; 56
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e8 e3       	ldi	r30, 0x38	; 56
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <writePin+0xe4>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <writePin+0xe0>
     fc2:	84 2b       	or	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	6c c0       	rjmp	.+216    	; 0x10a0 <writePin+0x1c6>
			else
				CLEAR_BIT(PORTB, PIN_ID);
     fc8:	a8 e3       	ldi	r26, 0x38	; 56
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e8 e3       	ldi	r30, 0x38	; 56
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <writePin+0x10c>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <writePin+0x108>
     fea:	80 95       	com	r24
     fec:	84 23       	and	r24, r20
     fee:	8c 93       	st	X, r24
     ff0:	57 c0       	rjmp	.+174    	; 0x10a0 <writePin+0x1c6>

			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	a1 f4       	brne	.+40     	; 0x1020 <writePin+0x146>
				SET_BIT(PORTC, PIN_ID);
     ff8:	a5 e3       	ldi	r26, 0x35	; 53
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e5 e3       	ldi	r30, 0x35	; 53
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <writePin+0x13c>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <writePin+0x138>
    101a:	84 2b       	or	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	40 c0       	rjmp	.+128    	; 0x10a0 <writePin+0x1c6>
			else
				CLEAR_BIT(PORTC, PIN_ID);
    1020:	a5 e3       	ldi	r26, 0x35	; 53
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e5 e3       	ldi	r30, 0x35	; 53
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <writePin+0x164>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <writePin+0x160>
    1042:	80 95       	com	r24
    1044:	84 23       	and	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	2b c0       	rjmp	.+86     	; 0x10a0 <writePin+0x1c6>

			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	a1 f4       	brne	.+40     	; 0x1078 <writePin+0x19e>
				SET_BIT(PORTD, PIN_ID);
    1050:	a2 e3       	ldi	r26, 0x32	; 50
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e2 e3       	ldi	r30, 0x32	; 50
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 2e       	mov	r0, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <writePin+0x194>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <writePin+0x190>
    1072:	84 2b       	or	r24, r20
    1074:	8c 93       	st	X, r24
    1076:	14 c0       	rjmp	.+40     	; 0x10a0 <writePin+0x1c6>
			else
				CLEAR_BIT(PORTD, PIN_ID);
    1078:	a2 e3       	ldi	r26, 0x32	; 50
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e2 e3       	ldi	r30, 0x32	; 50
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	48 2f       	mov	r20, r24
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 2e       	mov	r0, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <writePin+0x1bc>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	0a 94       	dec	r0
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <writePin+0x1b8>
    109a:	80 95       	com	r24
    109c:	84 23       	and	r24, r20
    109e:	8c 93       	st	X, r24

			break;
		}
	}
}
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <readPort>:

/*
 * read pin register for the given port
 */
uint32 readPort(uint8 PORT_ID)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	27 97       	sbiw	r28, 0x07	; 7
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	8d 83       	std	Y+5, r24	; 0x05
	uint32 port_value = LOGIC_LOW;
    10c6:	19 82       	std	Y+1, r1	; 0x01
    10c8:	1a 82       	std	Y+2, r1	; 0x02
    10ca:	1b 82       	std	Y+3, r1	; 0x03
    10cc:	1c 82       	std	Y+4, r1	; 0x04
	if(PORT_ID >= NUM_OF_PORTS)
    10ce:	8d 81       	ldd	r24, Y+5	; 0x05
    10d0:	84 30       	cpi	r24, 0x04	; 4
    10d2:	08 f0       	brcs	.+2      	; 0x10d6 <readPort+0x26>
    10d4:	4e c0       	rjmp	.+156    	; 0x1172 <readPort+0xc2>
		/*do nothing*/
	}
	else
	{
		/* Read the pin value as required */
		switch(PORT_ID)
    10d6:	8d 81       	ldd	r24, Y+5	; 0x05
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	3f 83       	std	Y+7, r19	; 0x07
    10de:	2e 83       	std	Y+6, r18	; 0x06
    10e0:	8e 81       	ldd	r24, Y+6	; 0x06
    10e2:	9f 81       	ldd	r25, Y+7	; 0x07
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	91 05       	cpc	r25, r1
    10e8:	09 f1       	breq	.+66     	; 0x112c <readPort+0x7c>
    10ea:	2e 81       	ldd	r18, Y+6	; 0x06
    10ec:	3f 81       	ldd	r19, Y+7	; 0x07
    10ee:	22 30       	cpi	r18, 0x02	; 2
    10f0:	31 05       	cpc	r19, r1
    10f2:	2c f4       	brge	.+10     	; 0x10fe <readPort+0x4e>
    10f4:	8e 81       	ldd	r24, Y+6	; 0x06
    10f6:	9f 81       	ldd	r25, Y+7	; 0x07
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	61 f0       	breq	.+24     	; 0x1114 <readPort+0x64>
    10fc:	3a c0       	rjmp	.+116    	; 0x1172 <readPort+0xc2>
    10fe:	2e 81       	ldd	r18, Y+6	; 0x06
    1100:	3f 81       	ldd	r19, Y+7	; 0x07
    1102:	22 30       	cpi	r18, 0x02	; 2
    1104:	31 05       	cpc	r19, r1
    1106:	f1 f0       	breq	.+60     	; 0x1144 <readPort+0x94>
    1108:	8e 81       	ldd	r24, Y+6	; 0x06
    110a:	9f 81       	ldd	r25, Y+7	; 0x07
    110c:	83 30       	cpi	r24, 0x03	; 3
    110e:	91 05       	cpc	r25, r1
    1110:	29 f1       	breq	.+74     	; 0x115c <readPort+0xac>
    1112:	2f c0       	rjmp	.+94     	; 0x1172 <readPort+0xc2>
		{
		case PORTA_ID:
			port_value = PINA;
    1114:	e9 e3       	ldi	r30, 0x39	; 57
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	88 2f       	mov	r24, r24
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	a0 e0       	ldi	r26, 0x00	; 0
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	9a 83       	std	Y+2, r25	; 0x02
    1126:	ab 83       	std	Y+3, r26	; 0x03
    1128:	bc 83       	std	Y+4, r27	; 0x04
    112a:	23 c0       	rjmp	.+70     	; 0x1172 <readPort+0xc2>
			break;
		case PORTB_ID:
			port_value = PINB;
    112c:	e6 e3       	ldi	r30, 0x36	; 54
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	a0 e0       	ldi	r26, 0x00	; 0
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	89 83       	std	Y+1, r24	; 0x01
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	ab 83       	std	Y+3, r26	; 0x03
    1140:	bc 83       	std	Y+4, r27	; 0x04
    1142:	17 c0       	rjmp	.+46     	; 0x1172 <readPort+0xc2>
			break;
		case PORTC_ID:
			port_value = PINC;
    1144:	e3 e3       	ldi	r30, 0x33	; 51
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	a0 e0       	ldi	r26, 0x00	; 0
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	89 83       	std	Y+1, r24	; 0x01
    1154:	9a 83       	std	Y+2, r25	; 0x02
    1156:	ab 83       	std	Y+3, r26	; 0x03
    1158:	bc 83       	std	Y+4, r27	; 0x04
    115a:	0b c0       	rjmp	.+22     	; 0x1172 <readPort+0xc2>
			break;
		case PORTD_ID:
			port_value = PIND;
    115c:	e0 e3       	ldi	r30, 0x30	; 48
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	88 2f       	mov	r24, r24
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	a0 e0       	ldi	r26, 0x00	; 0
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	9a 83       	std	Y+2, r25	; 0x02
    116e:	ab 83       	std	Y+3, r26	; 0x03
    1170:	bc 83       	std	Y+4, r27	; 0x04
			break;
		}
	}
	return port_value;
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	9a 81       	ldd	r25, Y+2	; 0x02
    1176:	ab 81       	ldd	r26, Y+3	; 0x03
    1178:	bc 81       	ldd	r27, Y+4	; 0x04
}
    117a:	bc 01       	movw	r22, r24
    117c:	cd 01       	movw	r24, r26
    117e:	27 96       	adiw	r28, 0x07	; 7
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <writePort>:
/*
 * write the given value on the given port
 */
void writePort(uint8 PORT_ID, uint32 value)
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	27 97       	sbiw	r28, 0x07	; 7
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	89 83       	std	Y+1, r24	; 0x01
    11a6:	4a 83       	std	Y+2, r20	; 0x02
    11a8:	5b 83       	std	Y+3, r21	; 0x03
    11aa:	6c 83       	std	Y+4, r22	; 0x04
    11ac:	7d 83       	std	Y+5, r23	; 0x05
	if(PORT_ID >= NUM_OF_PORTS)
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	84 30       	cpi	r24, 0x04	; 4
    11b2:	90 f5       	brcc	.+100    	; 0x1218 <writePort+0x88>
		/*do nothing*/
	}
	else
	{
		/* Read the pin value as required */
		switch(PORT_ID)
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	3f 83       	std	Y+7, r19	; 0x07
    11bc:	2e 83       	std	Y+6, r18	; 0x06
    11be:	8e 81       	ldd	r24, Y+6	; 0x06
    11c0:	9f 81       	ldd	r25, Y+7	; 0x07
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	91 05       	cpc	r25, r1
    11c6:	d1 f0       	breq	.+52     	; 0x11fc <writePort+0x6c>
    11c8:	2e 81       	ldd	r18, Y+6	; 0x06
    11ca:	3f 81       	ldd	r19, Y+7	; 0x07
    11cc:	22 30       	cpi	r18, 0x02	; 2
    11ce:	31 05       	cpc	r19, r1
    11d0:	2c f4       	brge	.+10     	; 0x11dc <writePort+0x4c>
    11d2:	8e 81       	ldd	r24, Y+6	; 0x06
    11d4:	9f 81       	ldd	r25, Y+7	; 0x07
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	61 f0       	breq	.+24     	; 0x11f2 <writePort+0x62>
    11da:	1e c0       	rjmp	.+60     	; 0x1218 <writePort+0x88>
    11dc:	2e 81       	ldd	r18, Y+6	; 0x06
    11de:	3f 81       	ldd	r19, Y+7	; 0x07
    11e0:	22 30       	cpi	r18, 0x02	; 2
    11e2:	31 05       	cpc	r19, r1
    11e4:	81 f0       	breq	.+32     	; 0x1206 <writePort+0x76>
    11e6:	8e 81       	ldd	r24, Y+6	; 0x06
    11e8:	9f 81       	ldd	r25, Y+7	; 0x07
    11ea:	83 30       	cpi	r24, 0x03	; 3
    11ec:	91 05       	cpc	r25, r1
    11ee:	81 f0       	breq	.+32     	; 0x1210 <writePort+0x80>
    11f0:	13 c0       	rjmp	.+38     	; 0x1218 <writePort+0x88>
		{
		case PORTA_ID:
			PORTA = value;
    11f2:	eb e3       	ldi	r30, 0x3B	; 59
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	80 83       	st	Z, r24
    11fa:	0e c0       	rjmp	.+28     	; 0x1218 <writePort+0x88>
			break;
		case PORTB_ID:
			PORTB = value;
    11fc:	e8 e3       	ldi	r30, 0x38	; 56
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	80 83       	st	Z, r24
    1204:	09 c0       	rjmp	.+18     	; 0x1218 <writePort+0x88>
			break;
		case PORTC_ID:
			PORTC = value;
    1206:	e5 e3       	ldi	r30, 0x35	; 53
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	80 83       	st	Z, r24
    120e:	04 c0       	rjmp	.+8      	; 0x1218 <writePort+0x88>
			break;
		case PORTD_ID:
			PORTD = value;
    1210:	e2 e3       	ldi	r30, 0x32	; 50
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	80 83       	st	Z, r24
			break;
		}
	}
}
    1218:	27 96       	adiw	r28, 0x07	; 7
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	de bf       	out	0x3e, r29	; 62
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	cd bf       	out	0x3d, r28	; 61
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	2e 97       	sbiw	r28, 0x0e	; 14
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
	setPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	61 e0       	ldi	r22, 0x01	; 1
    1242:	41 e0       	ldi	r20, 0x01	; 1
    1244:	0e 94 a3 05 	call	0xb46	; 0xb46 <setPinDirection>
	setPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	62 e0       	ldi	r22, 0x02	; 2
    124c:	41 e0       	ldi	r20, 0x01	; 1
    124e:	0e 94 a3 05 	call	0xb46	; 0xb46 <setPinDirection>
#if(LCD_DATA_BITS_MODE == 8)
	setPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    1252:	82 e0       	ldi	r24, 0x02	; 2
    1254:	6f ef       	ldi	r22, 0xFF	; 255
    1256:	0e 94 8e 06 	call	0xd1c	; 0xd1c <setPortDirection>
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	a0 ea       	ldi	r26, 0xA0	; 160
    1260:	b1 e4       	ldi	r27, 0x41	; 65
    1262:	8b 87       	std	Y+11, r24	; 0x0b
    1264:	9c 87       	std	Y+12, r25	; 0x0c
    1266:	ad 87       	std	Y+13, r26	; 0x0d
    1268:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    126a:	6b 85       	ldd	r22, Y+11	; 0x0b
    126c:	7c 85       	ldd	r23, Y+12	; 0x0c
    126e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1270:	9e 85       	ldd	r25, Y+14	; 0x0e
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	4a ef       	ldi	r20, 0xFA	; 250
    1278:	54 e4       	ldi	r21, 0x44	; 68
    127a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    127e:	dc 01       	movw	r26, r24
    1280:	cb 01       	movw	r24, r22
    1282:	8f 83       	std	Y+7, r24	; 0x07
    1284:	98 87       	std	Y+8, r25	; 0x08
    1286:	a9 87       	std	Y+9, r26	; 0x09
    1288:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    128a:	6f 81       	ldd	r22, Y+7	; 0x07
    128c:	78 85       	ldd	r23, Y+8	; 0x08
    128e:	89 85       	ldd	r24, Y+9	; 0x09
    1290:	9a 85       	ldd	r25, Y+10	; 0x0a
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	40 e8       	ldi	r20, 0x80	; 128
    1298:	5f e3       	ldi	r21, 0x3F	; 63
    129a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    129e:	88 23       	and	r24, r24
    12a0:	2c f4       	brge	.+10     	; 0x12ac <LCD_init+0x82>
		__ticks = 1;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	9e 83       	std	Y+6, r25	; 0x06
    12a8:	8d 83       	std	Y+5, r24	; 0x05
    12aa:	3f c0       	rjmp	.+126    	; 0x132a <LCD_init+0x100>
	else if (__tmp > 65535)
    12ac:	6f 81       	ldd	r22, Y+7	; 0x07
    12ae:	78 85       	ldd	r23, Y+8	; 0x08
    12b0:	89 85       	ldd	r24, Y+9	; 0x09
    12b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	3f ef       	ldi	r19, 0xFF	; 255
    12b8:	4f e7       	ldi	r20, 0x7F	; 127
    12ba:	57 e4       	ldi	r21, 0x47	; 71
    12bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12c0:	18 16       	cp	r1, r24
    12c2:	4c f5       	brge	.+82     	; 0x1316 <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    12c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	40 e2       	ldi	r20, 0x20	; 32
    12d2:	51 e4       	ldi	r21, 0x41	; 65
    12d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	bc 01       	movw	r22, r24
    12de:	cd 01       	movw	r24, r26
    12e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	9e 83       	std	Y+6, r25	; 0x06
    12ea:	8d 83       	std	Y+5, r24	; 0x05
    12ec:	0f c0       	rjmp	.+30     	; 0x130c <LCD_init+0xe2>
    12ee:	88 ec       	ldi	r24, 0xC8	; 200
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	9c 83       	std	Y+4, r25	; 0x04
    12f4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	9c 81       	ldd	r25, Y+4	; 0x04
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	f1 f7       	brne	.-4      	; 0x12fa <LCD_init+0xd0>
    12fe:	9c 83       	std	Y+4, r25	; 0x04
    1300:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1302:	8d 81       	ldd	r24, Y+5	; 0x05
    1304:	9e 81       	ldd	r25, Y+6	; 0x06
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	9e 83       	std	Y+6, r25	; 0x06
    130a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    130c:	8d 81       	ldd	r24, Y+5	; 0x05
    130e:	9e 81       	ldd	r25, Y+6	; 0x06
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	69 f7       	brne	.-38     	; 0x12ee <LCD_init+0xc4>
    1314:	14 c0       	rjmp	.+40     	; 0x133e <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1316:	6f 81       	ldd	r22, Y+7	; 0x07
    1318:	78 85       	ldd	r23, Y+8	; 0x08
    131a:	89 85       	ldd	r24, Y+9	; 0x09
    131c:	9a 85       	ldd	r25, Y+10	; 0x0a
    131e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	9e 83       	std	Y+6, r25	; 0x06
    1328:	8d 83       	std	Y+5, r24	; 0x05
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	9e 81       	ldd	r25, Y+6	; 0x06
    132e:	9a 83       	std	Y+2, r25	; 0x02
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	9a 81       	ldd	r25, Y+2	; 0x02
    1336:	01 97       	sbiw	r24, 0x01	; 1
    1338:	f1 f7       	brne	.-4      	; 0x1336 <LCD_init+0x10c>
    133a:	9a 83       	std	Y+2, r25	; 0x02
    133c:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    133e:	88 e3       	ldi	r24, 0x38	; 56
    1340:	0e 94 b1 09 	call	0x1362	; 0x1362 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1344:	8c e0       	ldi	r24, 0x0C	; 12
    1346:	0e 94 b1 09 	call	0x1362	; 0x1362 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	0e 94 b1 09 	call	0x1362	; 0x1362 <LCD_sendCommand>
}
    1350:	2e 96       	adiw	r28, 0x0e	; 14
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	e9 97       	sbiw	r28, 0x39	; 57
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	89 af       	std	Y+57, r24	; 0x39
	writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	61 e0       	ldi	r22, 0x01	; 1
    137c:	40 e0       	ldi	r20, 0x00	; 0
    137e:	0e 94 6d 07 	call	0xeda	; 0xeda <writePin>
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	a0 e8       	ldi	r26, 0x80	; 128
    1388:	bf e3       	ldi	r27, 0x3F	; 63
    138a:	8d ab       	std	Y+53, r24	; 0x35
    138c:	9e ab       	std	Y+54, r25	; 0x36
    138e:	af ab       	std	Y+55, r26	; 0x37
    1390:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1392:	6d a9       	ldd	r22, Y+53	; 0x35
    1394:	7e a9       	ldd	r23, Y+54	; 0x36
    1396:	8f a9       	ldd	r24, Y+55	; 0x37
    1398:	98 ad       	ldd	r25, Y+56	; 0x38
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	4a ef       	ldi	r20, 0xFA	; 250
    13a0:	54 e4       	ldi	r21, 0x44	; 68
    13a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	89 ab       	std	Y+49, r24	; 0x31
    13ac:	9a ab       	std	Y+50, r25	; 0x32
    13ae:	ab ab       	std	Y+51, r26	; 0x33
    13b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13b2:	69 a9       	ldd	r22, Y+49	; 0x31
    13b4:	7a a9       	ldd	r23, Y+50	; 0x32
    13b6:	8b a9       	ldd	r24, Y+51	; 0x33
    13b8:	9c a9       	ldd	r25, Y+52	; 0x34
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	40 e8       	ldi	r20, 0x80	; 128
    13c0:	5f e3       	ldi	r21, 0x3F	; 63
    13c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13c6:	88 23       	and	r24, r24
    13c8:	2c f4       	brge	.+10     	; 0x13d4 <LCD_sendCommand+0x72>
		__ticks = 1;
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	98 ab       	std	Y+48, r25	; 0x30
    13d0:	8f a7       	std	Y+47, r24	; 0x2f
    13d2:	3f c0       	rjmp	.+126    	; 0x1452 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    13d4:	69 a9       	ldd	r22, Y+49	; 0x31
    13d6:	7a a9       	ldd	r23, Y+50	; 0x32
    13d8:	8b a9       	ldd	r24, Y+51	; 0x33
    13da:	9c a9       	ldd	r25, Y+52	; 0x34
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	3f ef       	ldi	r19, 0xFF	; 255
    13e0:	4f e7       	ldi	r20, 0x7F	; 127
    13e2:	57 e4       	ldi	r21, 0x47	; 71
    13e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e8:	18 16       	cp	r1, r24
    13ea:	4c f5       	brge	.+82     	; 0x143e <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ec:	6d a9       	ldd	r22, Y+53	; 0x35
    13ee:	7e a9       	ldd	r23, Y+54	; 0x36
    13f0:	8f a9       	ldd	r24, Y+55	; 0x37
    13f2:	98 ad       	ldd	r25, Y+56	; 0x38
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	40 e2       	ldi	r20, 0x20	; 32
    13fa:	51 e4       	ldi	r21, 0x41	; 65
    13fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	bc 01       	movw	r22, r24
    1406:	cd 01       	movw	r24, r26
    1408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140c:	dc 01       	movw	r26, r24
    140e:	cb 01       	movw	r24, r22
    1410:	98 ab       	std	Y+48, r25	; 0x30
    1412:	8f a7       	std	Y+47, r24	; 0x2f
    1414:	0f c0       	rjmp	.+30     	; 0x1434 <LCD_sendCommand+0xd2>
    1416:	88 ec       	ldi	r24, 0xC8	; 200
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	9e a7       	std	Y+46, r25	; 0x2e
    141c:	8d a7       	std	Y+45, r24	; 0x2d
    141e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1420:	9e a5       	ldd	r25, Y+46	; 0x2e
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	f1 f7       	brne	.-4      	; 0x1422 <LCD_sendCommand+0xc0>
    1426:	9e a7       	std	Y+46, r25	; 0x2e
    1428:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    142a:	8f a5       	ldd	r24, Y+47	; 0x2f
    142c:	98 a9       	ldd	r25, Y+48	; 0x30
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	98 ab       	std	Y+48, r25	; 0x30
    1432:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1434:	8f a5       	ldd	r24, Y+47	; 0x2f
    1436:	98 a9       	ldd	r25, Y+48	; 0x30
    1438:	00 97       	sbiw	r24, 0x00	; 0
    143a:	69 f7       	brne	.-38     	; 0x1416 <LCD_sendCommand+0xb4>
    143c:	14 c0       	rjmp	.+40     	; 0x1466 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    143e:	69 a9       	ldd	r22, Y+49	; 0x31
    1440:	7a a9       	ldd	r23, Y+50	; 0x32
    1442:	8b a9       	ldd	r24, Y+51	; 0x33
    1444:	9c a9       	ldd	r25, Y+52	; 0x34
    1446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144a:	dc 01       	movw	r26, r24
    144c:	cb 01       	movw	r24, r22
    144e:	98 ab       	std	Y+48, r25	; 0x30
    1450:	8f a7       	std	Y+47, r24	; 0x2f
    1452:	8f a5       	ldd	r24, Y+47	; 0x2f
    1454:	98 a9       	ldd	r25, Y+48	; 0x30
    1456:	9c a7       	std	Y+44, r25	; 0x2c
    1458:	8b a7       	std	Y+43, r24	; 0x2b
    145a:	8b a5       	ldd	r24, Y+43	; 0x2b
    145c:	9c a5       	ldd	r25, Y+44	; 0x2c
    145e:	01 97       	sbiw	r24, 0x01	; 1
    1460:	f1 f7       	brne	.-4      	; 0x145e <LCD_sendCommand+0xfc>
    1462:	9c a7       	std	Y+44, r25	; 0x2c
    1464:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	62 e0       	ldi	r22, 0x02	; 2
    146a:	41 e0       	ldi	r20, 0x01	; 1
    146c:	0e 94 6d 07 	call	0xeda	; 0xeda <writePin>
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	a0 e8       	ldi	r26, 0x80	; 128
    1476:	bf e3       	ldi	r27, 0x3F	; 63
    1478:	8f a3       	std	Y+39, r24	; 0x27
    147a:	98 a7       	std	Y+40, r25	; 0x28
    147c:	a9 a7       	std	Y+41, r26	; 0x29
    147e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1480:	6f a1       	ldd	r22, Y+39	; 0x27
    1482:	78 a5       	ldd	r23, Y+40	; 0x28
    1484:	89 a5       	ldd	r24, Y+41	; 0x29
    1486:	9a a5       	ldd	r25, Y+42	; 0x2a
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	4a ef       	ldi	r20, 0xFA	; 250
    148e:	54 e4       	ldi	r21, 0x44	; 68
    1490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	8b a3       	std	Y+35, r24	; 0x23
    149a:	9c a3       	std	Y+36, r25	; 0x24
    149c:	ad a3       	std	Y+37, r26	; 0x25
    149e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14a0:	6b a1       	ldd	r22, Y+35	; 0x23
    14a2:	7c a1       	ldd	r23, Y+36	; 0x24
    14a4:	8d a1       	ldd	r24, Y+37	; 0x25
    14a6:	9e a1       	ldd	r25, Y+38	; 0x26
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 e8       	ldi	r20, 0x80	; 128
    14ae:	5f e3       	ldi	r21, 0x3F	; 63
    14b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b4:	88 23       	and	r24, r24
    14b6:	2c f4       	brge	.+10     	; 0x14c2 <LCD_sendCommand+0x160>
		__ticks = 1;
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	9a a3       	std	Y+34, r25	; 0x22
    14be:	89 a3       	std	Y+33, r24	; 0x21
    14c0:	3f c0       	rjmp	.+126    	; 0x1540 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    14c2:	6b a1       	ldd	r22, Y+35	; 0x23
    14c4:	7c a1       	ldd	r23, Y+36	; 0x24
    14c6:	8d a1       	ldd	r24, Y+37	; 0x25
    14c8:	9e a1       	ldd	r25, Y+38	; 0x26
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	3f ef       	ldi	r19, 0xFF	; 255
    14ce:	4f e7       	ldi	r20, 0x7F	; 127
    14d0:	57 e4       	ldi	r21, 0x47	; 71
    14d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d6:	18 16       	cp	r1, r24
    14d8:	4c f5       	brge	.+82     	; 0x152c <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14da:	6f a1       	ldd	r22, Y+39	; 0x27
    14dc:	78 a5       	ldd	r23, Y+40	; 0x28
    14de:	89 a5       	ldd	r24, Y+41	; 0x29
    14e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e2       	ldi	r20, 0x20	; 32
    14e8:	51 e4       	ldi	r21, 0x41	; 65
    14ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	bc 01       	movw	r22, r24
    14f4:	cd 01       	movw	r24, r26
    14f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	9a a3       	std	Y+34, r25	; 0x22
    1500:	89 a3       	std	Y+33, r24	; 0x21
    1502:	0f c0       	rjmp	.+30     	; 0x1522 <LCD_sendCommand+0x1c0>
    1504:	88 ec       	ldi	r24, 0xC8	; 200
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	98 a3       	std	Y+32, r25	; 0x20
    150a:	8f 8f       	std	Y+31, r24	; 0x1f
    150c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    150e:	98 a1       	ldd	r25, Y+32	; 0x20
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	f1 f7       	brne	.-4      	; 0x1510 <LCD_sendCommand+0x1ae>
    1514:	98 a3       	std	Y+32, r25	; 0x20
    1516:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1518:	89 a1       	ldd	r24, Y+33	; 0x21
    151a:	9a a1       	ldd	r25, Y+34	; 0x22
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	9a a3       	std	Y+34, r25	; 0x22
    1520:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1522:	89 a1       	ldd	r24, Y+33	; 0x21
    1524:	9a a1       	ldd	r25, Y+34	; 0x22
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	69 f7       	brne	.-38     	; 0x1504 <LCD_sendCommand+0x1a2>
    152a:	14 c0       	rjmp	.+40     	; 0x1554 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152c:	6b a1       	ldd	r22, Y+35	; 0x23
    152e:	7c a1       	ldd	r23, Y+36	; 0x24
    1530:	8d a1       	ldd	r24, Y+37	; 0x25
    1532:	9e a1       	ldd	r25, Y+38	; 0x26
    1534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	9a a3       	std	Y+34, r25	; 0x22
    153e:	89 a3       	std	Y+33, r24	; 0x21
    1540:	89 a1       	ldd	r24, Y+33	; 0x21
    1542:	9a a1       	ldd	r25, Y+34	; 0x22
    1544:	9e 8f       	std	Y+30, r25	; 0x1e
    1546:	8d 8f       	std	Y+29, r24	; 0x1d
    1548:	8d 8d       	ldd	r24, Y+29	; 0x1d
    154a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	f1 f7       	brne	.-4      	; 0x154c <LCD_sendCommand+0x1ea>
    1550:	9e 8f       	std	Y+30, r25	; 0x1e
    1552:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1554:	89 ad       	ldd	r24, Y+57	; 0x39
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	40 e0       	ldi	r20, 0x00	; 0
    155c:	50 e0       	ldi	r21, 0x00	; 0
    155e:	82 e0       	ldi	r24, 0x02	; 2
    1560:	ba 01       	movw	r22, r20
    1562:	a9 01       	movw	r20, r18
    1564:	0e 94 c8 08 	call	0x1190	; 0x1190 <writePort>
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	a0 e8       	ldi	r26, 0x80	; 128
    156e:	bf e3       	ldi	r27, 0x3F	; 63
    1570:	89 8f       	std	Y+25, r24	; 0x19
    1572:	9a 8f       	std	Y+26, r25	; 0x1a
    1574:	ab 8f       	std	Y+27, r26	; 0x1b
    1576:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1578:	69 8d       	ldd	r22, Y+25	; 0x19
    157a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    157c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    157e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	4a ef       	ldi	r20, 0xFA	; 250
    1586:	54 e4       	ldi	r21, 0x44	; 68
    1588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	8d 8b       	std	Y+21, r24	; 0x15
    1592:	9e 8b       	std	Y+22, r25	; 0x16
    1594:	af 8b       	std	Y+23, r26	; 0x17
    1596:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1598:	6d 89       	ldd	r22, Y+21	; 0x15
    159a:	7e 89       	ldd	r23, Y+22	; 0x16
    159c:	8f 89       	ldd	r24, Y+23	; 0x17
    159e:	98 8d       	ldd	r25, Y+24	; 0x18
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	40 e8       	ldi	r20, 0x80	; 128
    15a6:	5f e3       	ldi	r21, 0x3F	; 63
    15a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ac:	88 23       	and	r24, r24
    15ae:	2c f4       	brge	.+10     	; 0x15ba <LCD_sendCommand+0x258>
		__ticks = 1;
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	9c 8b       	std	Y+20, r25	; 0x14
    15b6:	8b 8b       	std	Y+19, r24	; 0x13
    15b8:	3f c0       	rjmp	.+126    	; 0x1638 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    15ba:	6d 89       	ldd	r22, Y+21	; 0x15
    15bc:	7e 89       	ldd	r23, Y+22	; 0x16
    15be:	8f 89       	ldd	r24, Y+23	; 0x17
    15c0:	98 8d       	ldd	r25, Y+24	; 0x18
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	3f ef       	ldi	r19, 0xFF	; 255
    15c6:	4f e7       	ldi	r20, 0x7F	; 127
    15c8:	57 e4       	ldi	r21, 0x47	; 71
    15ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ce:	18 16       	cp	r1, r24
    15d0:	4c f5       	brge	.+82     	; 0x1624 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d2:	69 8d       	ldd	r22, Y+25	; 0x19
    15d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	40 e2       	ldi	r20, 0x20	; 32
    15e0:	51 e4       	ldi	r21, 0x41	; 65
    15e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	bc 01       	movw	r22, r24
    15ec:	cd 01       	movw	r24, r26
    15ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	9c 8b       	std	Y+20, r25	; 0x14
    15f8:	8b 8b       	std	Y+19, r24	; 0x13
    15fa:	0f c0       	rjmp	.+30     	; 0x161a <LCD_sendCommand+0x2b8>
    15fc:	88 ec       	ldi	r24, 0xC8	; 200
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	9a 8b       	std	Y+18, r25	; 0x12
    1602:	89 8b       	std	Y+17, r24	; 0x11
    1604:	89 89       	ldd	r24, Y+17	; 0x11
    1606:	9a 89       	ldd	r25, Y+18	; 0x12
    1608:	01 97       	sbiw	r24, 0x01	; 1
    160a:	f1 f7       	brne	.-4      	; 0x1608 <LCD_sendCommand+0x2a6>
    160c:	9a 8b       	std	Y+18, r25	; 0x12
    160e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1610:	8b 89       	ldd	r24, Y+19	; 0x13
    1612:	9c 89       	ldd	r25, Y+20	; 0x14
    1614:	01 97       	sbiw	r24, 0x01	; 1
    1616:	9c 8b       	std	Y+20, r25	; 0x14
    1618:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161a:	8b 89       	ldd	r24, Y+19	; 0x13
    161c:	9c 89       	ldd	r25, Y+20	; 0x14
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	69 f7       	brne	.-38     	; 0x15fc <LCD_sendCommand+0x29a>
    1622:	14 c0       	rjmp	.+40     	; 0x164c <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1624:	6d 89       	ldd	r22, Y+21	; 0x15
    1626:	7e 89       	ldd	r23, Y+22	; 0x16
    1628:	8f 89       	ldd	r24, Y+23	; 0x17
    162a:	98 8d       	ldd	r25, Y+24	; 0x18
    162c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	9c 8b       	std	Y+20, r25	; 0x14
    1636:	8b 8b       	std	Y+19, r24	; 0x13
    1638:	8b 89       	ldd	r24, Y+19	; 0x13
    163a:	9c 89       	ldd	r25, Y+20	; 0x14
    163c:	98 8b       	std	Y+16, r25	; 0x10
    163e:	8f 87       	std	Y+15, r24	; 0x0f
    1640:	8f 85       	ldd	r24, Y+15	; 0x0f
    1642:	98 89       	ldd	r25, Y+16	; 0x10
    1644:	01 97       	sbiw	r24, 0x01	; 1
    1646:	f1 f7       	brne	.-4      	; 0x1644 <LCD_sendCommand+0x2e2>
    1648:	98 8b       	std	Y+16, r25	; 0x10
    164a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	62 e0       	ldi	r22, 0x02	; 2
    1650:	40 e0       	ldi	r20, 0x00	; 0
    1652:	0e 94 6d 07 	call	0xeda	; 0xeda <writePin>
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	a0 e8       	ldi	r26, 0x80	; 128
    165c:	bf e3       	ldi	r27, 0x3F	; 63
    165e:	8b 87       	std	Y+11, r24	; 0x0b
    1660:	9c 87       	std	Y+12, r25	; 0x0c
    1662:	ad 87       	std	Y+13, r26	; 0x0d
    1664:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1666:	6b 85       	ldd	r22, Y+11	; 0x0b
    1668:	7c 85       	ldd	r23, Y+12	; 0x0c
    166a:	8d 85       	ldd	r24, Y+13	; 0x0d
    166c:	9e 85       	ldd	r25, Y+14	; 0x0e
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	4a ef       	ldi	r20, 0xFA	; 250
    1674:	54 e4       	ldi	r21, 0x44	; 68
    1676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	8f 83       	std	Y+7, r24	; 0x07
    1680:	98 87       	std	Y+8, r25	; 0x08
    1682:	a9 87       	std	Y+9, r26	; 0x09
    1684:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1686:	6f 81       	ldd	r22, Y+7	; 0x07
    1688:	78 85       	ldd	r23, Y+8	; 0x08
    168a:	89 85       	ldd	r24, Y+9	; 0x09
    168c:	9a 85       	ldd	r25, Y+10	; 0x0a
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e8       	ldi	r20, 0x80	; 128
    1694:	5f e3       	ldi	r21, 0x3F	; 63
    1696:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    169a:	88 23       	and	r24, r24
    169c:	2c f4       	brge	.+10     	; 0x16a8 <LCD_sendCommand+0x346>
		__ticks = 1;
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	9e 83       	std	Y+6, r25	; 0x06
    16a4:	8d 83       	std	Y+5, r24	; 0x05
    16a6:	3f c0       	rjmp	.+126    	; 0x1726 <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    16a8:	6f 81       	ldd	r22, Y+7	; 0x07
    16aa:	78 85       	ldd	r23, Y+8	; 0x08
    16ac:	89 85       	ldd	r24, Y+9	; 0x09
    16ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	3f ef       	ldi	r19, 0xFF	; 255
    16b4:	4f e7       	ldi	r20, 0x7F	; 127
    16b6:	57 e4       	ldi	r21, 0x47	; 71
    16b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16bc:	18 16       	cp	r1, r24
    16be:	4c f5       	brge	.+82     	; 0x1712 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e2       	ldi	r20, 0x20	; 32
    16ce:	51 e4       	ldi	r21, 0x41	; 65
    16d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	bc 01       	movw	r22, r24
    16da:	cd 01       	movw	r24, r26
    16dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	9e 83       	std	Y+6, r25	; 0x06
    16e6:	8d 83       	std	Y+5, r24	; 0x05
    16e8:	0f c0       	rjmp	.+30     	; 0x1708 <LCD_sendCommand+0x3a6>
    16ea:	88 ec       	ldi	r24, 0xC8	; 200
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	9c 83       	std	Y+4, r25	; 0x04
    16f0:	8b 83       	std	Y+3, r24	; 0x03
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <LCD_sendCommand+0x394>
    16fa:	9c 83       	std	Y+4, r25	; 0x04
    16fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1700:	9e 81       	ldd	r25, Y+6	; 0x06
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	9e 83       	std	Y+6, r25	; 0x06
    1706:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1708:	8d 81       	ldd	r24, Y+5	; 0x05
    170a:	9e 81       	ldd	r25, Y+6	; 0x06
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	69 f7       	brne	.-38     	; 0x16ea <LCD_sendCommand+0x388>
    1710:	14 c0       	rjmp	.+40     	; 0x173a <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1712:	6f 81       	ldd	r22, Y+7	; 0x07
    1714:	78 85       	ldd	r23, Y+8	; 0x08
    1716:	89 85       	ldd	r24, Y+9	; 0x09
    1718:	9a 85       	ldd	r25, Y+10	; 0x0a
    171a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	9e 83       	std	Y+6, r25	; 0x06
    1724:	8d 83       	std	Y+5, r24	; 0x05
    1726:	8d 81       	ldd	r24, Y+5	; 0x05
    1728:	9e 81       	ldd	r25, Y+6	; 0x06
    172a:	9a 83       	std	Y+2, r25	; 0x02
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	9a 81       	ldd	r25, Y+2	; 0x02
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	f1 f7       	brne	.-4      	; 0x1732 <LCD_sendCommand+0x3d0>
    1736:	9a 83       	std	Y+2, r25	; 0x02
    1738:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    173a:	e9 96       	adiw	r28, 0x39	; 57
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	cd bf       	out	0x3d, r28	; 61
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	e9 97       	sbiw	r28, 0x39	; 57
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	89 af       	std	Y+57, r24	; 0x39
	writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	61 e0       	ldi	r22, 0x01	; 1
    1766:	41 e0       	ldi	r20, 0x01	; 1
    1768:	0e 94 6d 07 	call	0xeda	; 0xeda <writePin>
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	a0 e8       	ldi	r26, 0x80	; 128
    1772:	bf e3       	ldi	r27, 0x3F	; 63
    1774:	8d ab       	std	Y+53, r24	; 0x35
    1776:	9e ab       	std	Y+54, r25	; 0x36
    1778:	af ab       	std	Y+55, r26	; 0x37
    177a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177c:	6d a9       	ldd	r22, Y+53	; 0x35
    177e:	7e a9       	ldd	r23, Y+54	; 0x36
    1780:	8f a9       	ldd	r24, Y+55	; 0x37
    1782:	98 ad       	ldd	r25, Y+56	; 0x38
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	4a ef       	ldi	r20, 0xFA	; 250
    178a:	54 e4       	ldi	r21, 0x44	; 68
    178c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	89 ab       	std	Y+49, r24	; 0x31
    1796:	9a ab       	std	Y+50, r25	; 0x32
    1798:	ab ab       	std	Y+51, r26	; 0x33
    179a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    179c:	69 a9       	ldd	r22, Y+49	; 0x31
    179e:	7a a9       	ldd	r23, Y+50	; 0x32
    17a0:	8b a9       	ldd	r24, Y+51	; 0x33
    17a2:	9c a9       	ldd	r25, Y+52	; 0x34
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e8       	ldi	r20, 0x80	; 128
    17aa:	5f e3       	ldi	r21, 0x3F	; 63
    17ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b0:	88 23       	and	r24, r24
    17b2:	2c f4       	brge	.+10     	; 0x17be <LCD_displayCharacter+0x72>
		__ticks = 1;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	98 ab       	std	Y+48, r25	; 0x30
    17ba:	8f a7       	std	Y+47, r24	; 0x2f
    17bc:	3f c0       	rjmp	.+126    	; 0x183c <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    17be:	69 a9       	ldd	r22, Y+49	; 0x31
    17c0:	7a a9       	ldd	r23, Y+50	; 0x32
    17c2:	8b a9       	ldd	r24, Y+51	; 0x33
    17c4:	9c a9       	ldd	r25, Y+52	; 0x34
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	3f ef       	ldi	r19, 0xFF	; 255
    17ca:	4f e7       	ldi	r20, 0x7F	; 127
    17cc:	57 e4       	ldi	r21, 0x47	; 71
    17ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d2:	18 16       	cp	r1, r24
    17d4:	4c f5       	brge	.+82     	; 0x1828 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d6:	6d a9       	ldd	r22, Y+53	; 0x35
    17d8:	7e a9       	ldd	r23, Y+54	; 0x36
    17da:	8f a9       	ldd	r24, Y+55	; 0x37
    17dc:	98 ad       	ldd	r25, Y+56	; 0x38
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e2       	ldi	r20, 0x20	; 32
    17e4:	51 e4       	ldi	r21, 0x41	; 65
    17e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	bc 01       	movw	r22, r24
    17f0:	cd 01       	movw	r24, r26
    17f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	98 ab       	std	Y+48, r25	; 0x30
    17fc:	8f a7       	std	Y+47, r24	; 0x2f
    17fe:	0f c0       	rjmp	.+30     	; 0x181e <LCD_displayCharacter+0xd2>
    1800:	88 ec       	ldi	r24, 0xC8	; 200
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	9e a7       	std	Y+46, r25	; 0x2e
    1806:	8d a7       	std	Y+45, r24	; 0x2d
    1808:	8d a5       	ldd	r24, Y+45	; 0x2d
    180a:	9e a5       	ldd	r25, Y+46	; 0x2e
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	f1 f7       	brne	.-4      	; 0x180c <LCD_displayCharacter+0xc0>
    1810:	9e a7       	std	Y+46, r25	; 0x2e
    1812:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1814:	8f a5       	ldd	r24, Y+47	; 0x2f
    1816:	98 a9       	ldd	r25, Y+48	; 0x30
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	98 ab       	std	Y+48, r25	; 0x30
    181c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1820:	98 a9       	ldd	r25, Y+48	; 0x30
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	69 f7       	brne	.-38     	; 0x1800 <LCD_displayCharacter+0xb4>
    1826:	14 c0       	rjmp	.+40     	; 0x1850 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1828:	69 a9       	ldd	r22, Y+49	; 0x31
    182a:	7a a9       	ldd	r23, Y+50	; 0x32
    182c:	8b a9       	ldd	r24, Y+51	; 0x33
    182e:	9c a9       	ldd	r25, Y+52	; 0x34
    1830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	98 ab       	std	Y+48, r25	; 0x30
    183a:	8f a7       	std	Y+47, r24	; 0x2f
    183c:	8f a5       	ldd	r24, Y+47	; 0x2f
    183e:	98 a9       	ldd	r25, Y+48	; 0x30
    1840:	9c a7       	std	Y+44, r25	; 0x2c
    1842:	8b a7       	std	Y+43, r24	; 0x2b
    1844:	8b a5       	ldd	r24, Y+43	; 0x2b
    1846:	9c a5       	ldd	r25, Y+44	; 0x2c
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	f1 f7       	brne	.-4      	; 0x1848 <LCD_displayCharacter+0xfc>
    184c:	9c a7       	std	Y+44, r25	; 0x2c
    184e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	62 e0       	ldi	r22, 0x02	; 2
    1854:	41 e0       	ldi	r20, 0x01	; 1
    1856:	0e 94 6d 07 	call	0xeda	; 0xeda <writePin>
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	a0 e8       	ldi	r26, 0x80	; 128
    1860:	bf e3       	ldi	r27, 0x3F	; 63
    1862:	8f a3       	std	Y+39, r24	; 0x27
    1864:	98 a7       	std	Y+40, r25	; 0x28
    1866:	a9 a7       	std	Y+41, r26	; 0x29
    1868:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    186a:	6f a1       	ldd	r22, Y+39	; 0x27
    186c:	78 a5       	ldd	r23, Y+40	; 0x28
    186e:	89 a5       	ldd	r24, Y+41	; 0x29
    1870:	9a a5       	ldd	r25, Y+42	; 0x2a
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	4a ef       	ldi	r20, 0xFA	; 250
    1878:	54 e4       	ldi	r21, 0x44	; 68
    187a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	8b a3       	std	Y+35, r24	; 0x23
    1884:	9c a3       	std	Y+36, r25	; 0x24
    1886:	ad a3       	std	Y+37, r26	; 0x25
    1888:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    188a:	6b a1       	ldd	r22, Y+35	; 0x23
    188c:	7c a1       	ldd	r23, Y+36	; 0x24
    188e:	8d a1       	ldd	r24, Y+37	; 0x25
    1890:	9e a1       	ldd	r25, Y+38	; 0x26
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e8       	ldi	r20, 0x80	; 128
    1898:	5f e3       	ldi	r21, 0x3F	; 63
    189a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    189e:	88 23       	and	r24, r24
    18a0:	2c f4       	brge	.+10     	; 0x18ac <LCD_displayCharacter+0x160>
		__ticks = 1;
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	9a a3       	std	Y+34, r25	; 0x22
    18a8:	89 a3       	std	Y+33, r24	; 0x21
    18aa:	3f c0       	rjmp	.+126    	; 0x192a <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    18ac:	6b a1       	ldd	r22, Y+35	; 0x23
    18ae:	7c a1       	ldd	r23, Y+36	; 0x24
    18b0:	8d a1       	ldd	r24, Y+37	; 0x25
    18b2:	9e a1       	ldd	r25, Y+38	; 0x26
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	3f ef       	ldi	r19, 0xFF	; 255
    18b8:	4f e7       	ldi	r20, 0x7F	; 127
    18ba:	57 e4       	ldi	r21, 0x47	; 71
    18bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18c0:	18 16       	cp	r1, r24
    18c2:	4c f5       	brge	.+82     	; 0x1916 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c4:	6f a1       	ldd	r22, Y+39	; 0x27
    18c6:	78 a5       	ldd	r23, Y+40	; 0x28
    18c8:	89 a5       	ldd	r24, Y+41	; 0x29
    18ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e2       	ldi	r20, 0x20	; 32
    18d2:	51 e4       	ldi	r21, 0x41	; 65
    18d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	bc 01       	movw	r22, r24
    18de:	cd 01       	movw	r24, r26
    18e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	9a a3       	std	Y+34, r25	; 0x22
    18ea:	89 a3       	std	Y+33, r24	; 0x21
    18ec:	0f c0       	rjmp	.+30     	; 0x190c <LCD_displayCharacter+0x1c0>
    18ee:	88 ec       	ldi	r24, 0xC8	; 200
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	98 a3       	std	Y+32, r25	; 0x20
    18f4:	8f 8f       	std	Y+31, r24	; 0x1f
    18f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18f8:	98 a1       	ldd	r25, Y+32	; 0x20
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	f1 f7       	brne	.-4      	; 0x18fa <LCD_displayCharacter+0x1ae>
    18fe:	98 a3       	std	Y+32, r25	; 0x20
    1900:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1902:	89 a1       	ldd	r24, Y+33	; 0x21
    1904:	9a a1       	ldd	r25, Y+34	; 0x22
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	9a a3       	std	Y+34, r25	; 0x22
    190a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    190c:	89 a1       	ldd	r24, Y+33	; 0x21
    190e:	9a a1       	ldd	r25, Y+34	; 0x22
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	69 f7       	brne	.-38     	; 0x18ee <LCD_displayCharacter+0x1a2>
    1914:	14 c0       	rjmp	.+40     	; 0x193e <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1916:	6b a1       	ldd	r22, Y+35	; 0x23
    1918:	7c a1       	ldd	r23, Y+36	; 0x24
    191a:	8d a1       	ldd	r24, Y+37	; 0x25
    191c:	9e a1       	ldd	r25, Y+38	; 0x26
    191e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	9a a3       	std	Y+34, r25	; 0x22
    1928:	89 a3       	std	Y+33, r24	; 0x21
    192a:	89 a1       	ldd	r24, Y+33	; 0x21
    192c:	9a a1       	ldd	r25, Y+34	; 0x22
    192e:	9e 8f       	std	Y+30, r25	; 0x1e
    1930:	8d 8f       	std	Y+29, r24	; 0x1d
    1932:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1934:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	f1 f7       	brne	.-4      	; 0x1936 <LCD_displayCharacter+0x1ea>
    193a:	9e 8f       	std	Y+30, r25	; 0x1e
    193c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    193e:	89 ad       	ldd	r24, Y+57	; 0x39
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	50 e0       	ldi	r21, 0x00	; 0
    1948:	82 e0       	ldi	r24, 0x02	; 2
    194a:	ba 01       	movw	r22, r20
    194c:	a9 01       	movw	r20, r18
    194e:	0e 94 c8 08 	call	0x1190	; 0x1190 <writePort>
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	a0 e8       	ldi	r26, 0x80	; 128
    1958:	bf e3       	ldi	r27, 0x3F	; 63
    195a:	89 8f       	std	Y+25, r24	; 0x19
    195c:	9a 8f       	std	Y+26, r25	; 0x1a
    195e:	ab 8f       	std	Y+27, r26	; 0x1b
    1960:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1962:	69 8d       	ldd	r22, Y+25	; 0x19
    1964:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1966:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1968:	9c 8d       	ldd	r25, Y+28	; 0x1c
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	4a ef       	ldi	r20, 0xFA	; 250
    1970:	54 e4       	ldi	r21, 0x44	; 68
    1972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	8d 8b       	std	Y+21, r24	; 0x15
    197c:	9e 8b       	std	Y+22, r25	; 0x16
    197e:	af 8b       	std	Y+23, r26	; 0x17
    1980:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1982:	6d 89       	ldd	r22, Y+21	; 0x15
    1984:	7e 89       	ldd	r23, Y+22	; 0x16
    1986:	8f 89       	ldd	r24, Y+23	; 0x17
    1988:	98 8d       	ldd	r25, Y+24	; 0x18
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	40 e8       	ldi	r20, 0x80	; 128
    1990:	5f e3       	ldi	r21, 0x3F	; 63
    1992:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1996:	88 23       	and	r24, r24
    1998:	2c f4       	brge	.+10     	; 0x19a4 <LCD_displayCharacter+0x258>
		__ticks = 1;
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	9c 8b       	std	Y+20, r25	; 0x14
    19a0:	8b 8b       	std	Y+19, r24	; 0x13
    19a2:	3f c0       	rjmp	.+126    	; 0x1a22 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    19a4:	6d 89       	ldd	r22, Y+21	; 0x15
    19a6:	7e 89       	ldd	r23, Y+22	; 0x16
    19a8:	8f 89       	ldd	r24, Y+23	; 0x17
    19aa:	98 8d       	ldd	r25, Y+24	; 0x18
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	3f ef       	ldi	r19, 0xFF	; 255
    19b0:	4f e7       	ldi	r20, 0x7F	; 127
    19b2:	57 e4       	ldi	r21, 0x47	; 71
    19b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b8:	18 16       	cp	r1, r24
    19ba:	4c f5       	brge	.+82     	; 0x1a0e <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19bc:	69 8d       	ldd	r22, Y+25	; 0x19
    19be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	40 e2       	ldi	r20, 0x20	; 32
    19ca:	51 e4       	ldi	r21, 0x41	; 65
    19cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	bc 01       	movw	r22, r24
    19d6:	cd 01       	movw	r24, r26
    19d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	9c 8b       	std	Y+20, r25	; 0x14
    19e2:	8b 8b       	std	Y+19, r24	; 0x13
    19e4:	0f c0       	rjmp	.+30     	; 0x1a04 <LCD_displayCharacter+0x2b8>
    19e6:	88 ec       	ldi	r24, 0xC8	; 200
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	9a 8b       	std	Y+18, r25	; 0x12
    19ec:	89 8b       	std	Y+17, r24	; 0x11
    19ee:	89 89       	ldd	r24, Y+17	; 0x11
    19f0:	9a 89       	ldd	r25, Y+18	; 0x12
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	f1 f7       	brne	.-4      	; 0x19f2 <LCD_displayCharacter+0x2a6>
    19f6:	9a 8b       	std	Y+18, r25	; 0x12
    19f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19fa:	8b 89       	ldd	r24, Y+19	; 0x13
    19fc:	9c 89       	ldd	r25, Y+20	; 0x14
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	9c 8b       	std	Y+20, r25	; 0x14
    1a02:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a04:	8b 89       	ldd	r24, Y+19	; 0x13
    1a06:	9c 89       	ldd	r25, Y+20	; 0x14
    1a08:	00 97       	sbiw	r24, 0x00	; 0
    1a0a:	69 f7       	brne	.-38     	; 0x19e6 <LCD_displayCharacter+0x29a>
    1a0c:	14 c0       	rjmp	.+40     	; 0x1a36 <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a10:	7e 89       	ldd	r23, Y+22	; 0x16
    1a12:	8f 89       	ldd	r24, Y+23	; 0x17
    1a14:	98 8d       	ldd	r25, Y+24	; 0x18
    1a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	9c 8b       	std	Y+20, r25	; 0x14
    1a20:	8b 8b       	std	Y+19, r24	; 0x13
    1a22:	8b 89       	ldd	r24, Y+19	; 0x13
    1a24:	9c 89       	ldd	r25, Y+20	; 0x14
    1a26:	98 8b       	std	Y+16, r25	; 0x10
    1a28:	8f 87       	std	Y+15, r24	; 0x0f
    1a2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a2c:	98 89       	ldd	r25, Y+16	; 0x10
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	f1 f7       	brne	.-4      	; 0x1a2e <LCD_displayCharacter+0x2e2>
    1a32:	98 8b       	std	Y+16, r25	; 0x10
    1a34:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	62 e0       	ldi	r22, 0x02	; 2
    1a3a:	40 e0       	ldi	r20, 0x00	; 0
    1a3c:	0e 94 6d 07 	call	0xeda	; 0xeda <writePin>
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	a0 e8       	ldi	r26, 0x80	; 128
    1a46:	bf e3       	ldi	r27, 0x3F	; 63
    1a48:	8b 87       	std	Y+11, r24	; 0x0b
    1a4a:	9c 87       	std	Y+12, r25	; 0x0c
    1a4c:	ad 87       	std	Y+13, r26	; 0x0d
    1a4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	4a ef       	ldi	r20, 0xFA	; 250
    1a5e:	54 e4       	ldi	r21, 0x44	; 68
    1a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	8f 83       	std	Y+7, r24	; 0x07
    1a6a:	98 87       	std	Y+8, r25	; 0x08
    1a6c:	a9 87       	std	Y+9, r26	; 0x09
    1a6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a70:	6f 81       	ldd	r22, Y+7	; 0x07
    1a72:	78 85       	ldd	r23, Y+8	; 0x08
    1a74:	89 85       	ldd	r24, Y+9	; 0x09
    1a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	40 e8       	ldi	r20, 0x80	; 128
    1a7e:	5f e3       	ldi	r21, 0x3F	; 63
    1a80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a84:	88 23       	and	r24, r24
    1a86:	2c f4       	brge	.+10     	; 0x1a92 <LCD_displayCharacter+0x346>
		__ticks = 1;
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	9e 83       	std	Y+6, r25	; 0x06
    1a8e:	8d 83       	std	Y+5, r24	; 0x05
    1a90:	3f c0       	rjmp	.+126    	; 0x1b10 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    1a92:	6f 81       	ldd	r22, Y+7	; 0x07
    1a94:	78 85       	ldd	r23, Y+8	; 0x08
    1a96:	89 85       	ldd	r24, Y+9	; 0x09
    1a98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	3f ef       	ldi	r19, 0xFF	; 255
    1a9e:	4f e7       	ldi	r20, 0x7F	; 127
    1aa0:	57 e4       	ldi	r21, 0x47	; 71
    1aa2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aa6:	18 16       	cp	r1, r24
    1aa8:	4c f5       	brge	.+82     	; 0x1afc <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	40 e2       	ldi	r20, 0x20	; 32
    1ab8:	51 e4       	ldi	r21, 0x41	; 65
    1aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	bc 01       	movw	r22, r24
    1ac4:	cd 01       	movw	r24, r26
    1ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	9e 83       	std	Y+6, r25	; 0x06
    1ad0:	8d 83       	std	Y+5, r24	; 0x05
    1ad2:	0f c0       	rjmp	.+30     	; 0x1af2 <LCD_displayCharacter+0x3a6>
    1ad4:	88 ec       	ldi	r24, 0xC8	; 200
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	9c 83       	std	Y+4, r25	; 0x04
    1ada:	8b 83       	std	Y+3, r24	; 0x03
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <LCD_displayCharacter+0x394>
    1ae4:	9c 83       	std	Y+4, r25	; 0x04
    1ae6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aea:	9e 81       	ldd	r25, Y+6	; 0x06
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	9e 83       	std	Y+6, r25	; 0x06
    1af0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af2:	8d 81       	ldd	r24, Y+5	; 0x05
    1af4:	9e 81       	ldd	r25, Y+6	; 0x06
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	69 f7       	brne	.-38     	; 0x1ad4 <LCD_displayCharacter+0x388>
    1afa:	14 c0       	rjmp	.+40     	; 0x1b24 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1afc:	6f 81       	ldd	r22, Y+7	; 0x07
    1afe:	78 85       	ldd	r23, Y+8	; 0x08
    1b00:	89 85       	ldd	r24, Y+9	; 0x09
    1b02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	9e 83       	std	Y+6, r25	; 0x06
    1b0e:	8d 83       	std	Y+5, r24	; 0x05
    1b10:	8d 81       	ldd	r24, Y+5	; 0x05
    1b12:	9e 81       	ldd	r25, Y+6	; 0x06
    1b14:	9a 83       	std	Y+2, r25	; 0x02
    1b16:	89 83       	std	Y+1, r24	; 0x01
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
    1b1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	f1 f7       	brne	.-4      	; 0x1b1c <LCD_displayCharacter+0x3d0>
    1b20:	9a 83       	std	Y+2, r25	; 0x02
    1b22:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1b24:	e9 96       	adiw	r28, 0x39	; 57
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <LCD_displayString+0x6>
    1b3c:	0f 92       	push	r0
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
    1b42:	9b 83       	std	Y+3, r25	; 0x03
    1b44:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1b46:	19 82       	std	Y+1, r1	; 0x01
    1b48:	0e c0       	rjmp	.+28     	; 0x1b66 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	28 2f       	mov	r18, r24
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	9b 81       	ldd	r25, Y+3	; 0x03
    1b54:	fc 01       	movw	r30, r24
    1b56:	e2 0f       	add	r30, r18
    1b58:	f3 1f       	adc	r31, r19
    1b5a:	80 81       	ld	r24, Z
    1b5c:	0e 94 a6 0b 	call	0x174c	; 0x174c <LCD_displayCharacter>
		i++;
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	8f 5f       	subi	r24, 0xFF	; 255
    1b64:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b70:	fc 01       	movw	r30, r24
    1b72:	e2 0f       	add	r30, r18
    1b74:	f3 1f       	adc	r31, r19
    1b76:	80 81       	ld	r24, Z
    1b78:	88 23       	and	r24, r24
    1b7a:	39 f7       	brne	.-50     	; 0x1b4a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	08 95       	ret

00001b88 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	00 d0       	rcall	.+0      	; 0x1b8e <LCD_moveCursor+0x6>
    1b8e:	00 d0       	rcall	.+0      	; 0x1b90 <LCD_moveCursor+0x8>
    1b90:	0f 92       	push	r0
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	8a 83       	std	Y+2, r24	; 0x02
    1b98:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	3d 83       	std	Y+5, r19	; 0x05
    1ba2:	2c 83       	std	Y+4, r18	; 0x04
    1ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba8:	81 30       	cpi	r24, 0x01	; 1
    1baa:	91 05       	cpc	r25, r1
    1bac:	c1 f0       	breq	.+48     	; 0x1bde <LCD_moveCursor+0x56>
    1bae:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1bb2:	22 30       	cpi	r18, 0x02	; 2
    1bb4:	31 05       	cpc	r19, r1
    1bb6:	2c f4       	brge	.+10     	; 0x1bc2 <LCD_moveCursor+0x3a>
    1bb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bba:	9d 81       	ldd	r25, Y+5	; 0x05
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	61 f0       	breq	.+24     	; 0x1bd8 <LCD_moveCursor+0x50>
    1bc0:	19 c0       	rjmp	.+50     	; 0x1bf4 <LCD_moveCursor+0x6c>
    1bc2:	2c 81       	ldd	r18, Y+4	; 0x04
    1bc4:	3d 81       	ldd	r19, Y+5	; 0x05
    1bc6:	22 30       	cpi	r18, 0x02	; 2
    1bc8:	31 05       	cpc	r19, r1
    1bca:	69 f0       	breq	.+26     	; 0x1be6 <LCD_moveCursor+0x5e>
    1bcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bce:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd0:	83 30       	cpi	r24, 0x03	; 3
    1bd2:	91 05       	cpc	r25, r1
    1bd4:	61 f0       	breq	.+24     	; 0x1bee <LCD_moveCursor+0x66>
    1bd6:	0e c0       	rjmp	.+28     	; 0x1bf4 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	89 83       	std	Y+1, r24	; 0x01
    1bdc:	0b c0       	rjmp	.+22     	; 0x1bf4 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	80 5c       	subi	r24, 0xC0	; 192
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	07 c0       	rjmp	.+14     	; 0x1bf4 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	80 5f       	subi	r24, 0xF0	; 240
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	03 c0       	rjmp	.+6      	; 0x1bf4 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	80 5b       	subi	r24, 0xB0	; 176
    1bf2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	80 68       	ori	r24, 0x80	; 128
    1bf8:	0e 94 b1 09 	call	0x1362	; 0x1362 <LCD_sendCommand>
}
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <LCD_displayStringRowColumn+0x6>
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <LCD_displayStringRowColumn+0x8>
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	6a 83       	std	Y+2, r22	; 0x02
    1c1c:	5c 83       	std	Y+4, r21	; 0x04
    1c1e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	6a 81       	ldd	r22, Y+2	; 0x02
    1c24:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2c:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <LCD_displayString>
}
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	08 95       	ret

00001c3e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	62 97       	sbiw	r28, 0x12	; 18
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	cd bf       	out	0x3d, r28	; 61
    1c52:	9a 8b       	std	Y+18, r25	; 0x12
    1c54:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1c56:	89 89       	ldd	r24, Y+17	; 0x11
    1c58:	9a 89       	ldd	r25, Y+18	; 0x12
    1c5a:	9e 01       	movw	r18, r28
    1c5c:	2f 5f       	subi	r18, 0xFF	; 255
    1c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c60:	b9 01       	movw	r22, r18
    1c62:	4a e0       	ldi	r20, 0x0A	; 10
    1c64:	50 e0       	ldi	r21, 0x00	; 0
    1c66:	0e 94 8f 14 	call	0x291e	; 0x291e <itoa>
   LCD_displayString(buff); /* Display the string */
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	01 96       	adiw	r24, 0x01	; 1
    1c6e:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <LCD_displayString>
}
    1c72:	62 96       	adiw	r28, 0x12	; 18
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	0e 94 b1 09 	call	0x1362	; 0x1362 <LCD_sendCommand>
}
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	08 95       	ret

00001c98 <__vector_9>:

/*******************************************************************************
                            ISRs
 ******************************************************************************/
ISR(TIMER1_OVF_vect)
{
    1c98:	1f 92       	push	r1
    1c9a:	0f 92       	push	r0
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	0f 92       	push	r0
    1ca0:	11 24       	eor	r1, r1
    1ca2:	2f 93       	push	r18
    1ca4:	3f 93       	push	r19
    1ca6:	4f 93       	push	r20
    1ca8:	5f 93       	push	r21
    1caa:	6f 93       	push	r22
    1cac:	7f 93       	push	r23
    1cae:	8f 93       	push	r24
    1cb0:	9f 93       	push	r25
    1cb2:	af 93       	push	r26
    1cb4:	bf 93       	push	r27
    1cb6:	ef 93       	push	r30
    1cb8:	ff 93       	push	r31
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1_call_back_ptr != NULL_PTR)
    1cc2:	80 91 ba 00 	lds	r24, 0x00BA
    1cc6:	90 91 bb 00 	lds	r25, 0x00BB
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	29 f0       	breq	.+10     	; 0x1cd8 <__vector_9+0x40>
	{
		(*g_timer1_call_back_ptr)();
    1cce:	e0 91 ba 00 	lds	r30, 0x00BA
    1cd2:	f0 91 bb 00 	lds	r31, 0x00BB
    1cd6:	09 95       	icall
	}
}
    1cd8:	cf 91       	pop	r28
    1cda:	df 91       	pop	r29
    1cdc:	ff 91       	pop	r31
    1cde:	ef 91       	pop	r30
    1ce0:	bf 91       	pop	r27
    1ce2:	af 91       	pop	r26
    1ce4:	9f 91       	pop	r25
    1ce6:	8f 91       	pop	r24
    1ce8:	7f 91       	pop	r23
    1cea:	6f 91       	pop	r22
    1cec:	5f 91       	pop	r21
    1cee:	4f 91       	pop	r20
    1cf0:	3f 91       	pop	r19
    1cf2:	2f 91       	pop	r18
    1cf4:	0f 90       	pop	r0
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	0f 90       	pop	r0
    1cfa:	1f 90       	pop	r1
    1cfc:	18 95       	reti

00001cfe <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1cfe:	1f 92       	push	r1
    1d00:	0f 92       	push	r0
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	0f 92       	push	r0
    1d06:	11 24       	eor	r1, r1
    1d08:	2f 93       	push	r18
    1d0a:	3f 93       	push	r19
    1d0c:	4f 93       	push	r20
    1d0e:	5f 93       	push	r21
    1d10:	6f 93       	push	r22
    1d12:	7f 93       	push	r23
    1d14:	8f 93       	push	r24
    1d16:	9f 93       	push	r25
    1d18:	af 93       	push	r26
    1d1a:	bf 93       	push	r27
    1d1c:	ef 93       	push	r30
    1d1e:	ff 93       	push	r31
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1_call_back_ptr != NULL_PTR)
    1d28:	80 91 ba 00 	lds	r24, 0x00BA
    1d2c:	90 91 bb 00 	lds	r25, 0x00BB
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	29 f0       	breq	.+10     	; 0x1d3e <__vector_7+0x40>
	{
		(*g_timer1_call_back_ptr)();
    1d34:	e0 91 ba 00 	lds	r30, 0x00BA
    1d38:	f0 91 bb 00 	lds	r31, 0x00BB
    1d3c:	09 95       	icall
	}
}
    1d3e:	cf 91       	pop	r28
    1d40:	df 91       	pop	r29
    1d42:	ff 91       	pop	r31
    1d44:	ef 91       	pop	r30
    1d46:	bf 91       	pop	r27
    1d48:	af 91       	pop	r26
    1d4a:	9f 91       	pop	r25
    1d4c:	8f 91       	pop	r24
    1d4e:	7f 91       	pop	r23
    1d50:	6f 91       	pop	r22
    1d52:	5f 91       	pop	r21
    1d54:	4f 91       	pop	r20
    1d56:	3f 91       	pop	r19
    1d58:	2f 91       	pop	r18
    1d5a:	0f 90       	pop	r0
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	0f 90       	pop	r0
    1d60:	1f 90       	pop	r1
    1d62:	18 95       	reti

00001d64 <Timer1_init>:
 ******************************************************************************/
/*
 * Function to initialize the Timer driver
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <Timer1_init+0x6>
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	9a 83       	std	Y+2, r25	; 0x02
    1d70:	89 83       	std	Y+1, r24	; 0x01
	/*set initial counting value*/
	TCNT1 = Config_Ptr -> initial_value;
    1d72:	ac e4       	ldi	r26, 0x4C	; 76
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e9 81       	ldd	r30, Y+1	; 0x01
    1d78:	fa 81       	ldd	r31, Y+2	; 0x02
    1d7a:	80 81       	ld	r24, Z
    1d7c:	91 81       	ldd	r25, Z+1	; 0x01
    1d7e:	11 96       	adiw	r26, 0x01	; 1
    1d80:	9c 93       	st	X, r25
    1d82:	8e 93       	st	-X, r24

	if(Config_Ptr -> mode == normal)
    1d84:	e9 81       	ldd	r30, Y+1	; 0x01
    1d86:	fa 81       	ldd	r31, Y+2	; 0x02
    1d88:	85 81       	ldd	r24, Z+5	; 0x05
    1d8a:	88 23       	and	r24, r24
    1d8c:	99 f4       	brne	.+38     	; 0x1db4 <Timer1_init+0x50>
	{

		/* set FOC1A & FOC1B indicates non-pwm mode*/
		TCCR1A = (1<<FOC1B) | (1<<FOC1A);
    1d8e:	ef e4       	ldi	r30, 0x4F	; 79
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	8c e0       	ldi	r24, 0x0C	; 12
    1d94:	80 83       	st	Z, r24

		/* set ICNC1 to cancel ICU*/
		TCCR1B = (1<<ICNC1) | (Config_Ptr -> prescaler);
    1d96:	ae e4       	ldi	r26, 0x4E	; 78
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d9e:	84 81       	ldd	r24, Z+4	; 0x04
    1da0:	80 68       	ori	r24, 0x80	; 128
    1da2:	8c 93       	st	X, r24

		/*  Overflow Interrupt Enable*/
		TIMSK |= (1<<TOIE1);
    1da4:	a9 e5       	ldi	r26, 0x59	; 89
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e9 e5       	ldi	r30, 0x59	; 89
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	84 60       	ori	r24, 0x04	; 4
    1db0:	8c 93       	st	X, r24
    1db2:	20 c0       	rjmp	.+64     	; 0x1df4 <Timer1_init+0x90>
	}
	else if(Config_Ptr -> mode == compare)
    1db4:	e9 81       	ldd	r30, Y+1	; 0x01
    1db6:	fa 81       	ldd	r31, Y+2	; 0x02
    1db8:	85 81       	ldd	r24, Z+5	; 0x05
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	d9 f4       	brne	.+54     	; 0x1df4 <Timer1_init+0x90>
	{

		/* set FOC1A & FOC1B indicates non-pwm mode*/

		TCCR1A = (1<<FOC1B) | (1<<FOC1A);
    1dbe:	ef e4       	ldi	r30, 0x4F	; 79
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	8c e0       	ldi	r24, 0x0C	; 12
    1dc4:	80 83       	st	Z, r24

		/*
		 * set ICNC1 to cancel ICU
		 * set WGM12 to select CTC mode
		 */
		TCCR1B = (1<<ICNC1) | (1<<WGM12) | (Config_Ptr -> prescaler);
    1dc6:	ae e4       	ldi	r26, 0x4E	; 78
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e9 81       	ldd	r30, Y+1	; 0x01
    1dcc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dce:	84 81       	ldd	r24, Z+4	; 0x04
    1dd0:	88 68       	ori	r24, 0x88	; 136
    1dd2:	8c 93       	st	X, r24

		/*set the compare value*/
		OCR1A = Config_Ptr -> compare_value;
    1dd4:	aa e4       	ldi	r26, 0x4A	; 74
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dda:	fa 81       	ldd	r31, Y+2	; 0x02
    1ddc:	82 81       	ldd	r24, Z+2	; 0x02
    1dde:	93 81       	ldd	r25, Z+3	; 0x03
    1de0:	11 96       	adiw	r26, 0x01	; 1
    1de2:	9c 93       	st	X, r25
    1de4:	8e 93       	st	-X, r24

		/* Output Compare A Match Interrupt Enable*/
		TIMSK |= (1<<OCIE1A);
    1de6:	a9 e5       	ldi	r26, 0x59	; 89
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e9 e5       	ldi	r30, 0x59	; 89
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	80 61       	ori	r24, 0x10	; 16
    1df2:	8c 93       	st	X, r24
	}
}
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <Timer1_deInit>:

/*
 * Function to disable the Timer1
 */
void Timer1_deInit(void)
{
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
	/*clear CS10 &  CS11 &  CS12 to stop timer*/
	TCCR1B = 0;
    1e06:	ee e4       	ldi	r30, 0x4E	; 78
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	10 82       	st	Z, r1
}
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	08 95       	ret

00001e12 <Timer1_setCallBack>:

/*
 * Function to set the Call Back function address
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <Timer1_setCallBack+0x6>
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	9a 83       	std	Y+2, r25	; 0x02
    1e1e:	89 83       	std	Y+1, r24	; 0x01
	g_timer1_call_back_ptr = a_ptr;
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	9a 81       	ldd	r25, Y+2	; 0x02
    1e24:	90 93 bb 00 	sts	0x00BB, r25
    1e28:	80 93 ba 00 	sts	0x00BA, r24
}
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <KEYPAD_getPressedKey>:
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number);
#endif

#endif /* STANDARD_KEYPAD */
uint8 KEYPAD_getPressedKey(void)
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	00 d0       	rcall	.+0      	; 0x1e3c <KEYPAD_getPressedKey+0x6>
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
	setPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	60 e0       	ldi	r22, 0x00	; 0
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	0e 94 a3 05 	call	0xb46	; 0xb46 <setPinDirection>
	setPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	61 e0       	ldi	r22, 0x01	; 1
    1e4e:	40 e0       	ldi	r20, 0x00	; 0
    1e50:	0e 94 a3 05 	call	0xb46	; 0xb46 <setPinDirection>
	setPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	62 e0       	ldi	r22, 0x02	; 2
    1e58:	40 e0       	ldi	r20, 0x00	; 0
    1e5a:	0e 94 a3 05 	call	0xb46	; 0xb46 <setPinDirection>
	setPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	63 e0       	ldi	r22, 0x03	; 3
    1e62:	40 e0       	ldi	r20, 0x00	; 0
    1e64:	0e 94 a3 05 	call	0xb46	; 0xb46 <setPinDirection>
	setPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	64 e0       	ldi	r22, 0x04	; 4
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
    1e6e:	0e 94 a3 05 	call	0xb46	; 0xb46 <setPinDirection>
	setPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	65 e0       	ldi	r22, 0x05	; 5
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	0e 94 a3 05 	call	0xb46	; 0xb46 <setPinDirection>
	setPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	66 e0       	ldi	r22, 0x06	; 6
    1e80:	40 e0       	ldi	r20, 0x00	; 0
    1e82:	0e 94 a3 05 	call	0xb46	; 0xb46 <setPinDirection>
#if (NO_OF_COLS == 4)
	setPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	67 e0       	ldi	r22, 0x07	; 7
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	0e 94 a3 05 	call	0xb46	; 0xb46 <setPinDirection>
#endif
	uint8 row, col;
	while(1)
	{
		for(row = 0; row<NO_OF_ROWS; row++)
    1e90:	1a 82       	std	Y+2, r1	; 0x02
    1e92:	35 c0       	rjmp	.+106    	; 0x1efe <KEYPAD_getPressedKey+0xc8>
		{
			setPinDirection(KEYPAD_ROW_PORT_ID, row, PIN_OUTPUT);
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	6a 81       	ldd	r22, Y+2	; 0x02
    1e98:	41 e0       	ldi	r20, 0x01	; 1
    1e9a:	0e 94 a3 05 	call	0xb46	; 0xb46 <setPinDirection>
			writePin(KEYPAD_ROW_PORT_ID, row, KEYPAD_BUTTON_PRESSED);
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	6a 81       	ldd	r22, Y+2	; 0x02
    1ea2:	40 e0       	ldi	r20, 0x00	; 0
    1ea4:	0e 94 6d 07 	call	0xeda	; 0xeda <writePin>

			for(col = 0; col<NO_OF_COLS;col++)
    1ea8:	19 82       	std	Y+1, r1	; 0x01
    1eaa:	1e c0       	rjmp	.+60     	; 0x1ee8 <KEYPAD_getPressedKey+0xb2>
			{
				if(!(readPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+col)))//pressed
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	98 2f       	mov	r25, r24
    1eb0:	9c 5f       	subi	r25, 0xFC	; 252
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	69 2f       	mov	r22, r25
    1eb6:	0e 94 d2 06 	call	0xda4	; 0xda4 <readPin>
    1eba:	88 23       	and	r24, r24
    1ebc:	91 f4       	brne	.+36     	; 0x1ee2 <KEYPAD_getPressedKey+0xac>
				{
#ifdef standard_keypad
					return ((row*NO_OF_COLS)+col+1);
#elif (NO_OF_COLS == 4)
					return KEYPAD_4x4_adjustKeyNumber((row*NO_OF_COLS)+col+1);
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	88 2f       	mov	r24, r24
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	88 0f       	add	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	98 2f       	mov	r25, r24
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	89 0f       	add	r24, r25
    1ed2:	8f 5f       	subi	r24, 0xFF	; 255
    1ed4:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			setPinDirection(KEYPAD_ROW_PORT_ID, row, PIN_INPUT);
		}
	}
}
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret
		for(row = 0; row<NO_OF_ROWS; row++)
		{
			setPinDirection(KEYPAD_ROW_PORT_ID, row, PIN_OUTPUT);
			writePin(KEYPAD_ROW_PORT_ID, row, KEYPAD_BUTTON_PRESSED);

			for(col = 0; col<NO_OF_COLS;col++)
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	8f 5f       	subi	r24, 0xFF	; 255
    1ee6:	89 83       	std	Y+1, r24	; 0x01
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	84 30       	cpi	r24, 0x04	; 4
    1eec:	f8 f2       	brcs	.-66     	; 0x1eac <KEYPAD_getPressedKey+0x76>
#elif(NO_OF_COLS == 3)
					return KEYPAD_4x3_adjustKeyNumber((row*NO_OF_COLS)+col+1);
#endif
				}
			}
			setPinDirection(KEYPAD_ROW_PORT_ID, row, PIN_INPUT);
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	6a 81       	ldd	r22, Y+2	; 0x02
    1ef2:	40 e0       	ldi	r20, 0x00	; 0
    1ef4:	0e 94 a3 05 	call	0xb46	; 0xb46 <setPinDirection>
	setPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	uint8 row, col;
	while(1)
	{
		for(row = 0; row<NO_OF_ROWS; row++)
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	8f 5f       	subi	r24, 0xFF	; 255
    1efc:	8a 83       	std	Y+2, r24	; 0x02
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	84 30       	cpi	r24, 0x04	; 4
    1f02:	40 f2       	brcs	.-112    	; 0x1e94 <KEYPAD_getPressedKey+0x5e>
    1f04:	c5 cf       	rjmp	.-118    	; 0x1e90 <KEYPAD_getPressedKey+0x5a>

00001f06 <KEYPAD_4x4_adjustKeyNumber>:
	return keypad_button;
}

#elif (NO_OF_COLS == 4)
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	00 d0       	rcall	.+0      	; 0x1f0c <KEYPAD_4x4_adjustKeyNumber+0x6>
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <KEYPAD_4x4_adjustKeyNumber+0x8>
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1f14:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	28 2f       	mov	r18, r24
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	3c 83       	std	Y+4, r19	; 0x04
    1f1e:	2b 83       	std	Y+3, r18	; 0x03
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	9c 81       	ldd	r25, Y+4	; 0x04
    1f24:	88 30       	cpi	r24, 0x08	; 8
    1f26:	91 05       	cpc	r25, r1
    1f28:	09 f4       	brne	.+2      	; 0x1f2c <KEYPAD_4x4_adjustKeyNumber+0x26>
    1f2a:	70 c0       	rjmp	.+224    	; 0x200c <KEYPAD_4x4_adjustKeyNumber+0x106>
    1f2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f30:	29 30       	cpi	r18, 0x09	; 9
    1f32:	31 05       	cpc	r19, r1
    1f34:	5c f5       	brge	.+86     	; 0x1f8c <KEYPAD_4x4_adjustKeyNumber+0x86>
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3a:	84 30       	cpi	r24, 0x04	; 4
    1f3c:	91 05       	cpc	r25, r1
    1f3e:	09 f4       	brne	.+2      	; 0x1f42 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1f40:	59 c0       	rjmp	.+178    	; 0x1ff4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1f42:	2b 81       	ldd	r18, Y+3	; 0x03
    1f44:	3c 81       	ldd	r19, Y+4	; 0x04
    1f46:	25 30       	cpi	r18, 0x05	; 5
    1f48:	31 05       	cpc	r19, r1
    1f4a:	9c f4       	brge	.+38     	; 0x1f72 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f50:	82 30       	cpi	r24, 0x02	; 2
    1f52:	91 05       	cpc	r25, r1
    1f54:	09 f4       	brne	.+2      	; 0x1f58 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1f56:	48 c0       	rjmp	.+144    	; 0x1fe8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1f58:	2b 81       	ldd	r18, Y+3	; 0x03
    1f5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f5c:	23 30       	cpi	r18, 0x03	; 3
    1f5e:	31 05       	cpc	r19, r1
    1f60:	0c f0       	brlt	.+2      	; 0x1f64 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1f62:	45 c0       	rjmp	.+138    	; 0x1fee <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	9c 81       	ldd	r25, Y+4	; 0x04
    1f68:	81 30       	cpi	r24, 0x01	; 1
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	09 f4       	brne	.+2      	; 0x1f70 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1f6e:	39 c0       	rjmp	.+114    	; 0x1fe2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1f70:	67 c0       	rjmp	.+206    	; 0x2040 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1f72:	2b 81       	ldd	r18, Y+3	; 0x03
    1f74:	3c 81       	ldd	r19, Y+4	; 0x04
    1f76:	26 30       	cpi	r18, 0x06	; 6
    1f78:	31 05       	cpc	r19, r1
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <KEYPAD_4x4_adjustKeyNumber+0x78>
    1f7c:	41 c0       	rjmp	.+130    	; 0x2000 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	9c 81       	ldd	r25, Y+4	; 0x04
    1f82:	87 30       	cpi	r24, 0x07	; 7
    1f84:	91 05       	cpc	r25, r1
    1f86:	0c f0       	brlt	.+2      	; 0x1f8a <KEYPAD_4x4_adjustKeyNumber+0x84>
    1f88:	3e c0       	rjmp	.+124    	; 0x2006 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1f8a:	37 c0       	rjmp	.+110    	; 0x1ffa <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1f8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f90:	2c 30       	cpi	r18, 0x0C	; 12
    1f92:	31 05       	cpc	r19, r1
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1f96:	46 c0       	rjmp	.+140    	; 0x2024 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9c:	8d 30       	cpi	r24, 0x0D	; 13
    1f9e:	91 05       	cpc	r25, r1
    1fa0:	5c f4       	brge	.+22     	; 0x1fb8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1fa2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fa6:	2a 30       	cpi	r18, 0x0A	; 10
    1fa8:	31 05       	cpc	r19, r1
    1faa:	b1 f1       	breq	.+108    	; 0x2018 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb0:	8b 30       	cpi	r24, 0x0B	; 11
    1fb2:	91 05       	cpc	r25, r1
    1fb4:	a4 f5       	brge	.+104    	; 0x201e <KEYPAD_4x4_adjustKeyNumber+0x118>
    1fb6:	2d c0       	rjmp	.+90     	; 0x2012 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1fb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fba:	3c 81       	ldd	r19, Y+4	; 0x04
    1fbc:	2e 30       	cpi	r18, 0x0E	; 14
    1fbe:	31 05       	cpc	r19, r1
    1fc0:	b9 f1       	breq	.+110    	; 0x2030 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc6:	8e 30       	cpi	r24, 0x0E	; 14
    1fc8:	91 05       	cpc	r25, r1
    1fca:	7c f1       	brlt	.+94     	; 0x202a <KEYPAD_4x4_adjustKeyNumber+0x124>
    1fcc:	2b 81       	ldd	r18, Y+3	; 0x03
    1fce:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd0:	2f 30       	cpi	r18, 0x0F	; 15
    1fd2:	31 05       	cpc	r19, r1
    1fd4:	79 f1       	breq	.+94     	; 0x2034 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fda:	80 31       	cpi	r24, 0x10	; 16
    1fdc:	91 05       	cpc	r25, r1
    1fde:	69 f1       	breq	.+90     	; 0x203a <KEYPAD_4x4_adjustKeyNumber+0x134>
    1fe0:	2f c0       	rjmp	.+94     	; 0x2040 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1: keypad_button = 7;
    1fe2:	87 e0       	ldi	r24, 0x07	; 7
    1fe4:	89 83       	std	Y+1, r24	; 0x01
    1fe6:	2e c0       	rjmp	.+92     	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 2: keypad_button = 8;
    1fe8:	88 e0       	ldi	r24, 0x08	; 8
    1fea:	89 83       	std	Y+1, r24	; 0x01
    1fec:	2b c0       	rjmp	.+86     	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 3: keypad_button = 9;
    1fee:	89 e0       	ldi	r24, 0x09	; 9
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	28 c0       	rjmp	.+80     	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 4: keypad_button = '%'; // ASCII Code of %
    1ff4:	85 e2       	ldi	r24, 0x25	; 37
    1ff6:	89 83       	std	Y+1, r24	; 0x01
    1ff8:	25 c0       	rjmp	.+74     	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 5: keypad_button = 4;
    1ffa:	84 e0       	ldi	r24, 0x04	; 4
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	22 c0       	rjmp	.+68     	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 6: keypad_button = 5;
    2000:	85 e0       	ldi	r24, 0x05	; 5
    2002:	89 83       	std	Y+1, r24	; 0x01
    2004:	1f c0       	rjmp	.+62     	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 7: keypad_button = 6;
    2006:	86 e0       	ldi	r24, 0x06	; 6
    2008:	89 83       	std	Y+1, r24	; 0x01
    200a:	1c c0       	rjmp	.+56     	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 8: keypad_button = '*'; /* ASCII Code of '*' */
    200c:	8a e2       	ldi	r24, 0x2A	; 42
    200e:	89 83       	std	Y+1, r24	; 0x01
    2010:	19 c0       	rjmp	.+50     	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 9: keypad_button = 1;
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	16 c0       	rjmp	.+44     	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 10: keypad_button = 2;
    2018:	82 e0       	ldi	r24, 0x02	; 2
    201a:	89 83       	std	Y+1, r24	; 0x01
    201c:	13 c0       	rjmp	.+38     	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 11: keypad_button = 3;
    201e:	83 e0       	ldi	r24, 0x03	; 3
    2020:	89 83       	std	Y+1, r24	; 0x01
    2022:	10 c0       	rjmp	.+32     	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2024:	8d e2       	ldi	r24, 0x2D	; 45
    2026:	89 83       	std	Y+1, r24	; 0x01
    2028:	0d c0       	rjmp	.+26     	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 13: keypad_button = 13;  /* ASCII of Enter */
    202a:	8d e0       	ldi	r24, 0x0D	; 13
    202c:	89 83       	std	Y+1, r24	; 0x01
    202e:	0a c0       	rjmp	.+20     	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 14: keypad_button = 0;
    2030:	19 82       	std	Y+1, r1	; 0x01
    2032:	08 c0       	rjmp	.+16     	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 15: keypad_button = '='; /* ASCII Code of '=' */
    2034:	8d e3       	ldi	r24, 0x3D	; 61
    2036:	89 83       	std	Y+1, r24	; 0x01
    2038:	05 c0       	rjmp	.+10     	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 16: keypad_button = '+'; /* ASCII Code of '+' */
    203a:	8b e2       	ldi	r24, 0x2B	; 43
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	default: keypad_button = button_number;
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return keypad_button;
    2044:	89 81       	ldd	r24, Y+1	; 0x01
}
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	08 95       	ret

00002054 <create_password>:
#include"keypad.h"
#include"uart.h"
#include"util/delay.h"

void create_password(void)
{
    2054:	0f 93       	push	r16
    2056:	1f 93       	push	r17
    2058:	df 93       	push	r29
    205a:	cf 93       	push	r28
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	e6 97       	sbiw	r28, 0x36	; 54
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	f8 94       	cli
    2066:	de bf       	out	0x3e, r29	; 62
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	cd bf       	out	0x3d, r28	; 61
	do
	{
		LCD_displayString("plz enter pass:");
    206c:	80 e6       	ldi	r24, 0x60	; 96
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <LCD_displayString>
		uint8 pass1[5];
		/*move cursor to second line*/
		LCD_moveCursor(1, 0);
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	60 e0       	ldi	r22, 0x00	; 0
    2078:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <LCD_moveCursor>
		/*take password when user press enter"="*/

			for(uint8 i=0; i<5; i++)
    207c:	1c a6       	std	Y+44, r1	; 0x2c
    207e:	84 c0       	rjmp	.+264    	; 0x2188 <create_password+0x134>
			{
				pass1[i] = KEYPAD_getPressedKey();
    2080:	8c a5       	ldd	r24, Y+44	; 0x2c
    2082:	08 2f       	mov	r16, r24
    2084:	10 e0       	ldi	r17, 0x00	; 0
    2086:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <KEYPAD_getPressedKey>
    208a:	28 2f       	mov	r18, r24
    208c:	ce 01       	movw	r24, r28
    208e:	8d 96       	adiw	r24, 0x2d	; 45
    2090:	fc 01       	movw	r30, r24
    2092:	e0 0f       	add	r30, r16
    2094:	f1 1f       	adc	r31, r17
    2096:	20 83       	st	Z, r18
				LCD_displayCharacter('*');
    2098:	8a e2       	ldi	r24, 0x2A	; 42
    209a:	0e 94 a6 0b 	call	0x174c	; 0x174c <LCD_displayCharacter>
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	aa e7       	ldi	r26, 0x7A	; 122
    20a4:	b4 e4       	ldi	r27, 0x44	; 68
    20a6:	8f a3       	std	Y+39, r24	; 0x27
    20a8:	98 a7       	std	Y+40, r25	; 0x28
    20aa:	a9 a7       	std	Y+41, r26	; 0x29
    20ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ae:	6f a1       	ldd	r22, Y+39	; 0x27
    20b0:	78 a5       	ldd	r23, Y+40	; 0x28
    20b2:	89 a5       	ldd	r24, Y+41	; 0x29
    20b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	4a ef       	ldi	r20, 0xFA	; 250
    20bc:	54 e4       	ldi	r21, 0x44	; 68
    20be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	8b a3       	std	Y+35, r24	; 0x23
    20c8:	9c a3       	std	Y+36, r25	; 0x24
    20ca:	ad a3       	std	Y+37, r26	; 0x25
    20cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20ce:	6b a1       	ldd	r22, Y+35	; 0x23
    20d0:	7c a1       	ldd	r23, Y+36	; 0x24
    20d2:	8d a1       	ldd	r24, Y+37	; 0x25
    20d4:	9e a1       	ldd	r25, Y+38	; 0x26
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	40 e8       	ldi	r20, 0x80	; 128
    20dc:	5f e3       	ldi	r21, 0x3F	; 63
    20de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e2:	88 23       	and	r24, r24
    20e4:	2c f4       	brge	.+10     	; 0x20f0 <create_password+0x9c>
		__ticks = 1;
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	9a a3       	std	Y+34, r25	; 0x22
    20ec:	89 a3       	std	Y+33, r24	; 0x21
    20ee:	3f c0       	rjmp	.+126    	; 0x216e <create_password+0x11a>
	else if (__tmp > 65535)
    20f0:	6b a1       	ldd	r22, Y+35	; 0x23
    20f2:	7c a1       	ldd	r23, Y+36	; 0x24
    20f4:	8d a1       	ldd	r24, Y+37	; 0x25
    20f6:	9e a1       	ldd	r25, Y+38	; 0x26
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	3f ef       	ldi	r19, 0xFF	; 255
    20fc:	4f e7       	ldi	r20, 0x7F	; 127
    20fe:	57 e4       	ldi	r21, 0x47	; 71
    2100:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2104:	18 16       	cp	r1, r24
    2106:	4c f5       	brge	.+82     	; 0x215a <create_password+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2108:	6f a1       	ldd	r22, Y+39	; 0x27
    210a:	78 a5       	ldd	r23, Y+40	; 0x28
    210c:	89 a5       	ldd	r24, Y+41	; 0x29
    210e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	40 e2       	ldi	r20, 0x20	; 32
    2116:	51 e4       	ldi	r21, 0x41	; 65
    2118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	bc 01       	movw	r22, r24
    2122:	cd 01       	movw	r24, r26
    2124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	9a a3       	std	Y+34, r25	; 0x22
    212e:	89 a3       	std	Y+33, r24	; 0x21
    2130:	0f c0       	rjmp	.+30     	; 0x2150 <create_password+0xfc>
    2132:	88 ec       	ldi	r24, 0xC8	; 200
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	98 a3       	std	Y+32, r25	; 0x20
    2138:	8f 8f       	std	Y+31, r24	; 0x1f
    213a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    213c:	98 a1       	ldd	r25, Y+32	; 0x20
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	f1 f7       	brne	.-4      	; 0x213e <create_password+0xea>
    2142:	98 a3       	std	Y+32, r25	; 0x20
    2144:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2146:	89 a1       	ldd	r24, Y+33	; 0x21
    2148:	9a a1       	ldd	r25, Y+34	; 0x22
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	9a a3       	std	Y+34, r25	; 0x22
    214e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2150:	89 a1       	ldd	r24, Y+33	; 0x21
    2152:	9a a1       	ldd	r25, Y+34	; 0x22
    2154:	00 97       	sbiw	r24, 0x00	; 0
    2156:	69 f7       	brne	.-38     	; 0x2132 <create_password+0xde>
    2158:	14 c0       	rjmp	.+40     	; 0x2182 <create_password+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215a:	6b a1       	ldd	r22, Y+35	; 0x23
    215c:	7c a1       	ldd	r23, Y+36	; 0x24
    215e:	8d a1       	ldd	r24, Y+37	; 0x25
    2160:	9e a1       	ldd	r25, Y+38	; 0x26
    2162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	9a a3       	std	Y+34, r25	; 0x22
    216c:	89 a3       	std	Y+33, r24	; 0x21
    216e:	89 a1       	ldd	r24, Y+33	; 0x21
    2170:	9a a1       	ldd	r25, Y+34	; 0x22
    2172:	9e 8f       	std	Y+30, r25	; 0x1e
    2174:	8d 8f       	std	Y+29, r24	; 0x1d
    2176:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2178:	9e 8d       	ldd	r25, Y+30	; 0x1e
    217a:	01 97       	sbiw	r24, 0x01	; 1
    217c:	f1 f7       	brne	.-4      	; 0x217a <create_password+0x126>
    217e:	9e 8f       	std	Y+30, r25	; 0x1e
    2180:	8d 8f       	std	Y+29, r24	; 0x1d
		uint8 pass1[5];
		/*move cursor to second line*/
		LCD_moveCursor(1, 0);
		/*take password when user press enter"="*/

			for(uint8 i=0; i<5; i++)
    2182:	8c a5       	ldd	r24, Y+44	; 0x2c
    2184:	8f 5f       	subi	r24, 0xFF	; 255
    2186:	8c a7       	std	Y+44, r24	; 0x2c
    2188:	8c a5       	ldd	r24, Y+44	; 0x2c
    218a:	85 30       	cpi	r24, 0x05	; 5
    218c:	08 f4       	brcc	.+2      	; 0x2190 <create_password+0x13c>
    218e:	78 cf       	rjmp	.-272    	; 0x2080 <create_password+0x2c>
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	aa e7       	ldi	r26, 0x7A	; 122
    2196:	b4 e4       	ldi	r27, 0x44	; 68
    2198:	89 8f       	std	Y+25, r24	; 0x19
    219a:	9a 8f       	std	Y+26, r25	; 0x1a
    219c:	ab 8f       	std	Y+27, r26	; 0x1b
    219e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a0:	69 8d       	ldd	r22, Y+25	; 0x19
    21a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	4a ef       	ldi	r20, 0xFA	; 250
    21ae:	54 e4       	ldi	r21, 0x44	; 68
    21b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	8d 8b       	std	Y+21, r24	; 0x15
    21ba:	9e 8b       	std	Y+22, r25	; 0x16
    21bc:	af 8b       	std	Y+23, r26	; 0x17
    21be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21c0:	6d 89       	ldd	r22, Y+21	; 0x15
    21c2:	7e 89       	ldd	r23, Y+22	; 0x16
    21c4:	8f 89       	ldd	r24, Y+23	; 0x17
    21c6:	98 8d       	ldd	r25, Y+24	; 0x18
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e8       	ldi	r20, 0x80	; 128
    21ce:	5f e3       	ldi	r21, 0x3F	; 63
    21d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21d4:	88 23       	and	r24, r24
    21d6:	2c f4       	brge	.+10     	; 0x21e2 <create_password+0x18e>
		__ticks = 1;
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	9c 8b       	std	Y+20, r25	; 0x14
    21de:	8b 8b       	std	Y+19, r24	; 0x13
    21e0:	3f c0       	rjmp	.+126    	; 0x2260 <create_password+0x20c>
	else if (__tmp > 65535)
    21e2:	6d 89       	ldd	r22, Y+21	; 0x15
    21e4:	7e 89       	ldd	r23, Y+22	; 0x16
    21e6:	8f 89       	ldd	r24, Y+23	; 0x17
    21e8:	98 8d       	ldd	r25, Y+24	; 0x18
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	3f ef       	ldi	r19, 0xFF	; 255
    21ee:	4f e7       	ldi	r20, 0x7F	; 127
    21f0:	57 e4       	ldi	r21, 0x47	; 71
    21f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f6:	18 16       	cp	r1, r24
    21f8:	4c f5       	brge	.+82     	; 0x224c <create_password+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21fa:	69 8d       	ldd	r22, Y+25	; 0x19
    21fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2200:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	40 e2       	ldi	r20, 0x20	; 32
    2208:	51 e4       	ldi	r21, 0x41	; 65
    220a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	bc 01       	movw	r22, r24
    2214:	cd 01       	movw	r24, r26
    2216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	9c 8b       	std	Y+20, r25	; 0x14
    2220:	8b 8b       	std	Y+19, r24	; 0x13
    2222:	0f c0       	rjmp	.+30     	; 0x2242 <create_password+0x1ee>
    2224:	88 ec       	ldi	r24, 0xC8	; 200
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	9a 8b       	std	Y+18, r25	; 0x12
    222a:	89 8b       	std	Y+17, r24	; 0x11
    222c:	89 89       	ldd	r24, Y+17	; 0x11
    222e:	9a 89       	ldd	r25, Y+18	; 0x12
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	f1 f7       	brne	.-4      	; 0x2230 <create_password+0x1dc>
    2234:	9a 8b       	std	Y+18, r25	; 0x12
    2236:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2238:	8b 89       	ldd	r24, Y+19	; 0x13
    223a:	9c 89       	ldd	r25, Y+20	; 0x14
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	9c 8b       	std	Y+20, r25	; 0x14
    2240:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2242:	8b 89       	ldd	r24, Y+19	; 0x13
    2244:	9c 89       	ldd	r25, Y+20	; 0x14
    2246:	00 97       	sbiw	r24, 0x00	; 0
    2248:	69 f7       	brne	.-38     	; 0x2224 <create_password+0x1d0>
    224a:	14 c0       	rjmp	.+40     	; 0x2274 <create_password+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    224c:	6d 89       	ldd	r22, Y+21	; 0x15
    224e:	7e 89       	ldd	r23, Y+22	; 0x16
    2250:	8f 89       	ldd	r24, Y+23	; 0x17
    2252:	98 8d       	ldd	r25, Y+24	; 0x18
    2254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	9c 8b       	std	Y+20, r25	; 0x14
    225e:	8b 8b       	std	Y+19, r24	; 0x13
    2260:	8b 89       	ldd	r24, Y+19	; 0x13
    2262:	9c 89       	ldd	r25, Y+20	; 0x14
    2264:	98 8b       	std	Y+16, r25	; 0x10
    2266:	8f 87       	std	Y+15, r24	; 0x0f
    2268:	8f 85       	ldd	r24, Y+15	; 0x0f
    226a:	98 89       	ldd	r25, Y+16	; 0x10
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <create_password+0x218>
    2270:	98 8b       	std	Y+16, r25	; 0x10
    2272:	8f 87       	std	Y+15, r24	; 0x0f
			}
		//	while(KEYPAD_getPressedKey() != '='){}
			_delay_ms(1000);


		LCD_clearScreen();
    2274:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <LCD_clearScreen>
		LCD_moveCursor(0, 0);
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	60 e0       	ldi	r22, 0x00	; 0
    227c:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <LCD_moveCursor>
		LCD_displayString("plz re_enter the same pass:");
    2280:	80 e7       	ldi	r24, 0x70	; 112
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <LCD_displayString>
		uint8 pass2[5];
		/*move cursor to second line*/
		LCD_moveCursor(1, 10);
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	6a e0       	ldi	r22, 0x0A	; 10
    228c:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <LCD_moveCursor>
    2290:	8a c0       	rjmp	.+276    	; 0x23a6 <create_password+0x352>
		/*take password when user press enter"="*/
		while(KEYPAD_getPressedKey() != '=')
		{
			for(uint8 i=0; i<5; i++)
    2292:	1b a6       	std	Y+43, r1	; 0x2b
    2294:	84 c0       	rjmp	.+264    	; 0x239e <create_password+0x34a>
			{
				pass2[i] = KEYPAD_getPressedKey();
    2296:	8b a5       	ldd	r24, Y+43	; 0x2b
    2298:	08 2f       	mov	r16, r24
    229a:	10 e0       	ldi	r17, 0x00	; 0
    229c:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <KEYPAD_getPressedKey>
    22a0:	28 2f       	mov	r18, r24
    22a2:	ce 01       	movw	r24, r28
    22a4:	c2 96       	adiw	r24, 0x32	; 50
    22a6:	fc 01       	movw	r30, r24
    22a8:	e0 0f       	add	r30, r16
    22aa:	f1 1f       	adc	r31, r17
    22ac:	20 83       	st	Z, r18
				LCD_displayCharacter('*');
    22ae:	8a e2       	ldi	r24, 0x2A	; 42
    22b0:	0e 94 a6 0b 	call	0x174c	; 0x174c <LCD_displayCharacter>
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	aa ef       	ldi	r26, 0xFA	; 250
    22ba:	b3 e4       	ldi	r27, 0x43	; 67
    22bc:	8b 87       	std	Y+11, r24	; 0x0b
    22be:	9c 87       	std	Y+12, r25	; 0x0c
    22c0:	ad 87       	std	Y+13, r26	; 0x0d
    22c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	4a ef       	ldi	r20, 0xFA	; 250
    22d2:	54 e4       	ldi	r21, 0x44	; 68
    22d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	8f 83       	std	Y+7, r24	; 0x07
    22de:	98 87       	std	Y+8, r25	; 0x08
    22e0:	a9 87       	std	Y+9, r26	; 0x09
    22e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22e4:	6f 81       	ldd	r22, Y+7	; 0x07
    22e6:	78 85       	ldd	r23, Y+8	; 0x08
    22e8:	89 85       	ldd	r24, Y+9	; 0x09
    22ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e8       	ldi	r20, 0x80	; 128
    22f2:	5f e3       	ldi	r21, 0x3F	; 63
    22f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22f8:	88 23       	and	r24, r24
    22fa:	2c f4       	brge	.+10     	; 0x2306 <create_password+0x2b2>
		__ticks = 1;
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	9e 83       	std	Y+6, r25	; 0x06
    2302:	8d 83       	std	Y+5, r24	; 0x05
    2304:	3f c0       	rjmp	.+126    	; 0x2384 <create_password+0x330>
	else if (__tmp > 65535)
    2306:	6f 81       	ldd	r22, Y+7	; 0x07
    2308:	78 85       	ldd	r23, Y+8	; 0x08
    230a:	89 85       	ldd	r24, Y+9	; 0x09
    230c:	9a 85       	ldd	r25, Y+10	; 0x0a
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	3f ef       	ldi	r19, 0xFF	; 255
    2312:	4f e7       	ldi	r20, 0x7F	; 127
    2314:	57 e4       	ldi	r21, 0x47	; 71
    2316:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    231a:	18 16       	cp	r1, r24
    231c:	4c f5       	brge	.+82     	; 0x2370 <create_password+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2320:	7c 85       	ldd	r23, Y+12	; 0x0c
    2322:	8d 85       	ldd	r24, Y+13	; 0x0d
    2324:	9e 85       	ldd	r25, Y+14	; 0x0e
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e2       	ldi	r20, 0x20	; 32
    232c:	51 e4       	ldi	r21, 0x41	; 65
    232e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	bc 01       	movw	r22, r24
    2338:	cd 01       	movw	r24, r26
    233a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	9e 83       	std	Y+6, r25	; 0x06
    2344:	8d 83       	std	Y+5, r24	; 0x05
    2346:	0f c0       	rjmp	.+30     	; 0x2366 <create_password+0x312>
    2348:	88 ec       	ldi	r24, 0xC8	; 200
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	9c 83       	std	Y+4, r25	; 0x04
    234e:	8b 83       	std	Y+3, r24	; 0x03
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	9c 81       	ldd	r25, Y+4	; 0x04
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	f1 f7       	brne	.-4      	; 0x2354 <create_password+0x300>
    2358:	9c 83       	std	Y+4, r25	; 0x04
    235a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235c:	8d 81       	ldd	r24, Y+5	; 0x05
    235e:	9e 81       	ldd	r25, Y+6	; 0x06
    2360:	01 97       	sbiw	r24, 0x01	; 1
    2362:	9e 83       	std	Y+6, r25	; 0x06
    2364:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2366:	8d 81       	ldd	r24, Y+5	; 0x05
    2368:	9e 81       	ldd	r25, Y+6	; 0x06
    236a:	00 97       	sbiw	r24, 0x00	; 0
    236c:	69 f7       	brne	.-38     	; 0x2348 <create_password+0x2f4>
    236e:	14 c0       	rjmp	.+40     	; 0x2398 <create_password+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2370:	6f 81       	ldd	r22, Y+7	; 0x07
    2372:	78 85       	ldd	r23, Y+8	; 0x08
    2374:	89 85       	ldd	r24, Y+9	; 0x09
    2376:	9a 85       	ldd	r25, Y+10	; 0x0a
    2378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	9e 83       	std	Y+6, r25	; 0x06
    2382:	8d 83       	std	Y+5, r24	; 0x05
    2384:	8d 81       	ldd	r24, Y+5	; 0x05
    2386:	9e 81       	ldd	r25, Y+6	; 0x06
    2388:	9a 83       	std	Y+2, r25	; 0x02
    238a:	89 83       	std	Y+1, r24	; 0x01
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	9a 81       	ldd	r25, Y+2	; 0x02
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	f1 f7       	brne	.-4      	; 0x2390 <create_password+0x33c>
    2394:	9a 83       	std	Y+2, r25	; 0x02
    2396:	89 83       	std	Y+1, r24	; 0x01
		/*move cursor to second line*/
		LCD_moveCursor(1, 10);
		/*take password when user press enter"="*/
		while(KEYPAD_getPressedKey() != '=')
		{
			for(uint8 i=0; i<5; i++)
    2398:	8b a5       	ldd	r24, Y+43	; 0x2b
    239a:	8f 5f       	subi	r24, 0xFF	; 255
    239c:	8b a7       	std	Y+43, r24	; 0x2b
    239e:	8b a5       	ldd	r24, Y+43	; 0x2b
    23a0:	85 30       	cpi	r24, 0x05	; 5
    23a2:	08 f4       	brcc	.+2      	; 0x23a6 <create_password+0x352>
    23a4:	78 cf       	rjmp	.-272    	; 0x2296 <create_password+0x242>
		LCD_displayString("plz re_enter the same pass:");
		uint8 pass2[5];
		/*move cursor to second line*/
		LCD_moveCursor(1, 10);
		/*take password when user press enter"="*/
		while(KEYPAD_getPressedKey() != '=')
    23a6:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <KEYPAD_getPressedKey>
    23aa:	8d 33       	cpi	r24, 0x3D	; 61
    23ac:	09 f0       	breq	.+2      	; 0x23b0 <create_password+0x35c>
    23ae:	71 cf       	rjmp	.-286    	; 0x2292 <create_password+0x23e>
				pass2[i] = KEYPAD_getPressedKey();
				LCD_displayCharacter('*');
				_delay_ms(500);
			}
		}
		while(UART_recieveByte() != ready){}
    23b0:	0e 94 bb 13 	call	0x2776	; 0x2776 <UART_recieveByte>
    23b4:	82 31       	cpi	r24, 0x12	; 18
    23b6:	e1 f7       	brne	.-8      	; 0x23b0 <create_password+0x35c>
		UART_sendString(pass1);
    23b8:	ce 01       	movw	r24, r28
    23ba:	8d 96       	adiw	r24, 0x2d	; 45
    23bc:	0e 94 ca 13 	call	0x2794	; 0x2794 <UART_sendString>
		UART_sendString(pass2);
    23c0:	ce 01       	movw	r24, r28
    23c2:	c2 96       	adiw	r24, 0x32	; 50
    23c4:	0e 94 ca 13 	call	0x2794	; 0x2794 <UART_sendString>
		//	_delay_ms(0.5);
	}while(UART_recieveByte() == un_matched);
    23c8:	0e 94 bb 13 	call	0x2776	; 0x2776 <UART_recieveByte>
    23cc:	84 34       	cpi	r24, 0x44	; 68
    23ce:	09 f4       	brne	.+2      	; 0x23d2 <create_password+0x37e>
    23d0:	4d ce       	rjmp	.-870    	; 0x206c <create_password+0x18>
}
    23d2:	e6 96       	adiw	r28, 0x36	; 54
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	de bf       	out	0x3e, r29	; 62
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	cd bf       	out	0x3d, r28	; 61
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	1f 91       	pop	r17
    23e4:	0f 91       	pop	r16
    23e6:	08 95       	ret

000023e8 <send_pass_to_check>:

void send_pass_to_check(void)
{
    23e8:	0f 93       	push	r16
    23ea:	1f 93       	push	r17
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	64 97       	sbiw	r28, 0x14	; 20
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
	uint8 pass[5];
	LCD_clearScreen();
    2400:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <LCD_clearScreen>
	LCD_displayString("plz enter pass:");
    2404:	80 e6       	ldi	r24, 0x60	; 96
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <LCD_displayString>
	LCD_moveCursor(1, 0);
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	60 e0       	ldi	r22, 0x00	; 0
    2410:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <LCD_moveCursor>
    2414:	8a c0       	rjmp	.+276    	; 0x252a <send_pass_to_check+0x142>
	/*take password when user press enter"="*/
	while(KEYPAD_getPressedKey() != '=')
	{
		for(uint8 i=0; i<5; i++)
    2416:	1f 86       	std	Y+15, r1	; 0x0f
    2418:	84 c0       	rjmp	.+264    	; 0x2522 <send_pass_to_check+0x13a>
		{
			pass[i] = KEYPAD_getPressedKey();
    241a:	8f 85       	ldd	r24, Y+15	; 0x0f
    241c:	08 2f       	mov	r16, r24
    241e:	10 e0       	ldi	r17, 0x00	; 0
    2420:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <KEYPAD_getPressedKey>
    2424:	28 2f       	mov	r18, r24
    2426:	ce 01       	movw	r24, r28
    2428:	40 96       	adiw	r24, 0x10	; 16
    242a:	fc 01       	movw	r30, r24
    242c:	e0 0f       	add	r30, r16
    242e:	f1 1f       	adc	r31, r17
    2430:	20 83       	st	Z, r18
			LCD_displayCharacter('*');
    2432:	8a e2       	ldi	r24, 0x2A	; 42
    2434:	0e 94 a6 0b 	call	0x174c	; 0x174c <LCD_displayCharacter>
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	aa ef       	ldi	r26, 0xFA	; 250
    243e:	b3 e4       	ldi	r27, 0x43	; 67
    2440:	8b 87       	std	Y+11, r24	; 0x0b
    2442:	9c 87       	std	Y+12, r25	; 0x0c
    2444:	ad 87       	std	Y+13, r26	; 0x0d
    2446:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2448:	6b 85       	ldd	r22, Y+11	; 0x0b
    244a:	7c 85       	ldd	r23, Y+12	; 0x0c
    244c:	8d 85       	ldd	r24, Y+13	; 0x0d
    244e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	4a ef       	ldi	r20, 0xFA	; 250
    2456:	54 e4       	ldi	r21, 0x44	; 68
    2458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	8f 83       	std	Y+7, r24	; 0x07
    2462:	98 87       	std	Y+8, r25	; 0x08
    2464:	a9 87       	std	Y+9, r26	; 0x09
    2466:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2468:	6f 81       	ldd	r22, Y+7	; 0x07
    246a:	78 85       	ldd	r23, Y+8	; 0x08
    246c:	89 85       	ldd	r24, Y+9	; 0x09
    246e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e8       	ldi	r20, 0x80	; 128
    2476:	5f e3       	ldi	r21, 0x3F	; 63
    2478:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    247c:	88 23       	and	r24, r24
    247e:	2c f4       	brge	.+10     	; 0x248a <send_pass_to_check+0xa2>
		__ticks = 1;
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	9e 83       	std	Y+6, r25	; 0x06
    2486:	8d 83       	std	Y+5, r24	; 0x05
    2488:	3f c0       	rjmp	.+126    	; 0x2508 <send_pass_to_check+0x120>
	else if (__tmp > 65535)
    248a:	6f 81       	ldd	r22, Y+7	; 0x07
    248c:	78 85       	ldd	r23, Y+8	; 0x08
    248e:	89 85       	ldd	r24, Y+9	; 0x09
    2490:	9a 85       	ldd	r25, Y+10	; 0x0a
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	3f ef       	ldi	r19, 0xFF	; 255
    2496:	4f e7       	ldi	r20, 0x7F	; 127
    2498:	57 e4       	ldi	r21, 0x47	; 71
    249a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    249e:	18 16       	cp	r1, r24
    24a0:	4c f5       	brge	.+82     	; 0x24f4 <send_pass_to_check+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	40 e2       	ldi	r20, 0x20	; 32
    24b0:	51 e4       	ldi	r21, 0x41	; 65
    24b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	bc 01       	movw	r22, r24
    24bc:	cd 01       	movw	r24, r26
    24be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	9e 83       	std	Y+6, r25	; 0x06
    24c8:	8d 83       	std	Y+5, r24	; 0x05
    24ca:	0f c0       	rjmp	.+30     	; 0x24ea <send_pass_to_check+0x102>
    24cc:	88 ec       	ldi	r24, 0xC8	; 200
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	9c 83       	std	Y+4, r25	; 0x04
    24d2:	8b 83       	std	Y+3, r24	; 0x03
    24d4:	8b 81       	ldd	r24, Y+3	; 0x03
    24d6:	9c 81       	ldd	r25, Y+4	; 0x04
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <send_pass_to_check+0xf0>
    24dc:	9c 83       	std	Y+4, r25	; 0x04
    24de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e0:	8d 81       	ldd	r24, Y+5	; 0x05
    24e2:	9e 81       	ldd	r25, Y+6	; 0x06
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	9e 83       	std	Y+6, r25	; 0x06
    24e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ea:	8d 81       	ldd	r24, Y+5	; 0x05
    24ec:	9e 81       	ldd	r25, Y+6	; 0x06
    24ee:	00 97       	sbiw	r24, 0x00	; 0
    24f0:	69 f7       	brne	.-38     	; 0x24cc <send_pass_to_check+0xe4>
    24f2:	14 c0       	rjmp	.+40     	; 0x251c <send_pass_to_check+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f4:	6f 81       	ldd	r22, Y+7	; 0x07
    24f6:	78 85       	ldd	r23, Y+8	; 0x08
    24f8:	89 85       	ldd	r24, Y+9	; 0x09
    24fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	9e 83       	std	Y+6, r25	; 0x06
    2506:	8d 83       	std	Y+5, r24	; 0x05
    2508:	8d 81       	ldd	r24, Y+5	; 0x05
    250a:	9e 81       	ldd	r25, Y+6	; 0x06
    250c:	9a 83       	std	Y+2, r25	; 0x02
    250e:	89 83       	std	Y+1, r24	; 0x01
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	9a 81       	ldd	r25, Y+2	; 0x02
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <send_pass_to_check+0x12c>
    2518:	9a 83       	std	Y+2, r25	; 0x02
    251a:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayString("plz enter pass:");
	LCD_moveCursor(1, 0);
	/*take password when user press enter"="*/
	while(KEYPAD_getPressedKey() != '=')
	{
		for(uint8 i=0; i<5; i++)
    251c:	8f 85       	ldd	r24, Y+15	; 0x0f
    251e:	8f 5f       	subi	r24, 0xFF	; 255
    2520:	8f 87       	std	Y+15, r24	; 0x0f
    2522:	8f 85       	ldd	r24, Y+15	; 0x0f
    2524:	85 30       	cpi	r24, 0x05	; 5
    2526:	08 f4       	brcc	.+2      	; 0x252a <send_pass_to_check+0x142>
    2528:	78 cf       	rjmp	.-272    	; 0x241a <send_pass_to_check+0x32>
	uint8 pass[5];
	LCD_clearScreen();
	LCD_displayString("plz enter pass:");
	LCD_moveCursor(1, 0);
	/*take password when user press enter"="*/
	while(KEYPAD_getPressedKey() != '=')
    252a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <KEYPAD_getPressedKey>
    252e:	8d 33       	cpi	r24, 0x3D	; 61
    2530:	09 f0       	breq	.+2      	; 0x2534 <send_pass_to_check+0x14c>
    2532:	71 cf       	rjmp	.-286    	; 0x2416 <send_pass_to_check+0x2e>
			pass[i] = KEYPAD_getPressedKey();
			LCD_displayCharacter('*');
			_delay_ms(500);
		}
	}
	UART_sendByte(ready_again);
    2534:	85 e5       	ldi	r24, 0x55	; 85
    2536:	0e 94 a4 13 	call	0x2748	; 0x2748 <UART_sendByte>
	//_delay_ms(0.1);
	/*send pass to control_ECU to check it*/
	UART_sendString(pass);
    253a:	ce 01       	movw	r24, r28
    253c:	40 96       	adiw	r24, 0x10	; 16
    253e:	0e 94 ca 13 	call	0x2794	; 0x2794 <UART_sendString>
}
    2542:	64 96       	adiw	r28, 0x14	; 20
    2544:	0f b6       	in	r0, 0x3f	; 63
    2546:	f8 94       	cli
    2548:	de bf       	out	0x3e, r29	; 62
    254a:	0f be       	out	0x3f, r0	; 63
    254c:	cd bf       	out	0x3d, r28	; 61
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	1f 91       	pop	r17
    2554:	0f 91       	pop	r16
    2556:	08 95       	ret

00002558 <main>:
int main(void)
{
    2558:	df 93       	push	r29
    255a:	cf 93       	push	r28
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
    2560:	2c 97       	sbiw	r28, 0x0c	; 12
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	f8 94       	cli
    2566:	de bf       	out	0x3e, r29	; 62
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    256c:	0e 94 15 09 	call	0x122a	; 0x122a <LCD_init>

	UART_ConfigType config = {five_bits, no_parity, one_bit, 9600};
    2570:	ce 01       	movw	r24, r28
    2572:	01 96       	adiw	r24, 0x01	; 1
    2574:	99 87       	std	Y+9, r25	; 0x09
    2576:	88 87       	std	Y+8, r24	; 0x08
    2578:	e2 eb       	ldi	r30, 0xB2	; 178
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	fb 87       	std	Y+11, r31	; 0x0b
    257e:	ea 87       	std	Y+10, r30	; 0x0a
    2580:	f7 e0       	ldi	r31, 0x07	; 7
    2582:	fc 87       	std	Y+12, r31	; 0x0c
    2584:	ea 85       	ldd	r30, Y+10	; 0x0a
    2586:	fb 85       	ldd	r31, Y+11	; 0x0b
    2588:	00 80       	ld	r0, Z
    258a:	8a 85       	ldd	r24, Y+10	; 0x0a
    258c:	9b 85       	ldd	r25, Y+11	; 0x0b
    258e:	01 96       	adiw	r24, 0x01	; 1
    2590:	9b 87       	std	Y+11, r25	; 0x0b
    2592:	8a 87       	std	Y+10, r24	; 0x0a
    2594:	e8 85       	ldd	r30, Y+8	; 0x08
    2596:	f9 85       	ldd	r31, Y+9	; 0x09
    2598:	00 82       	st	Z, r0
    259a:	88 85       	ldd	r24, Y+8	; 0x08
    259c:	99 85       	ldd	r25, Y+9	; 0x09
    259e:	01 96       	adiw	r24, 0x01	; 1
    25a0:	99 87       	std	Y+9, r25	; 0x09
    25a2:	88 87       	std	Y+8, r24	; 0x08
    25a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    25a6:	91 50       	subi	r25, 0x01	; 1
    25a8:	9c 87       	std	Y+12, r25	; 0x0c
    25aa:	ec 85       	ldd	r30, Y+12	; 0x0c
    25ac:	ee 23       	and	r30, r30
    25ae:	51 f7       	brne	.-44     	; 0x2584 <main+0x2c>
	UART_init(&config);
    25b0:	ce 01       	movw	r24, r28
    25b2:	01 96       	adiw	r24, 0x01	; 1
    25b4:	0e 94 27 13 	call	0x264e	; 0x264e <UART_init>

	create_password();
    25b8:	0e 94 2a 10 	call	0x2054	; 0x2054 <create_password>
	/*when passwords match*/
	LCD_clearScreen();
    25bc:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <LCD_clearScreen>
	LCD_displayString("+ : Open Door");
    25c0:	8c e8       	ldi	r24, 0x8C	; 140
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <LCD_displayString>
	/*move cursor to second line*/
	LCD_moveCursor(1, 0);
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	60 e0       	ldi	r22, 0x00	; 0
    25cc:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
    25d0:	8a e9       	ldi	r24, 0x9A	; 154
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <LCD_displayString>
	if(KEYPAD_getPressedKey() == '+')
    25d8:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <KEYPAD_getPressedKey>
    25dc:	8b 32       	cpi	r24, 0x2B	; 43
    25de:	a1 f4       	brne	.+40     	; 0x2608 <main+0xb0>
	{
		send_pass_to_check();
    25e0:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <send_pass_to_check>
		while(UART_recieveByte() != un_matched && UART_recieveByte() != matched){}
    25e4:	0e 94 bb 13 	call	0x2776	; 0x2776 <UART_recieveByte>
    25e8:	84 34       	cpi	r24, 0x44	; 68
    25ea:	21 f0       	breq	.+8      	; 0x25f4 <main+0x9c>
    25ec:	0e 94 bb 13 	call	0x2776	; 0x2776 <UART_recieveByte>
    25f0:	86 36       	cpi	r24, 0x66	; 102
    25f2:	c1 f7       	brne	.-16     	; 0x25e4 <main+0x8c>
		if(UART_recieveByte() == un_matched)
    25f4:	0e 94 bb 13 	call	0x2776	; 0x2776 <UART_recieveByte>
    25f8:	84 34       	cpi	r24, 0x44	; 68
    25fa:	19 f4       	brne	.+6      	; 0x2602 <main+0xaa>
		{
			send_pass_to_check();
    25fc:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <send_pass_to_check>
    2600:	1b c0       	rjmp	.+54     	; 0x2638 <main+0xe0>
		}
		else if(UART_recieveByte() == matched)
    2602:	0e 94 bb 13 	call	0x2776	; 0x2776 <UART_recieveByte>
    2606:	18 c0       	rjmp	.+48     	; 0x2638 <main+0xe0>
		{
		}
	}
	else if(KEYPAD_getPressedKey() == '-')
    2608:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <KEYPAD_getPressedKey>
    260c:	8d 32       	cpi	r24, 0x2D	; 45
    260e:	a1 f4       	brne	.+40     	; 0x2638 <main+0xe0>
	{
		send_pass_to_check();
    2610:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <send_pass_to_check>
		while(UART_recieveByte() != un_matched && UART_recieveByte() != matched){}
    2614:	0e 94 bb 13 	call	0x2776	; 0x2776 <UART_recieveByte>
    2618:	84 34       	cpi	r24, 0x44	; 68
    261a:	21 f0       	breq	.+8      	; 0x2624 <main+0xcc>
    261c:	0e 94 bb 13 	call	0x2776	; 0x2776 <UART_recieveByte>
    2620:	86 36       	cpi	r24, 0x66	; 102
    2622:	c1 f7       	brne	.-16     	; 0x2614 <main+0xbc>
		if(UART_recieveByte() == un_matched)
    2624:	0e 94 bb 13 	call	0x2776	; 0x2776 <UART_recieveByte>
    2628:	84 34       	cpi	r24, 0x44	; 68
    262a:	31 f0       	breq	.+12     	; 0x2638 <main+0xe0>
		{

		}
		else if(UART_recieveByte() == matched)
    262c:	0e 94 bb 13 	call	0x2776	; 0x2776 <UART_recieveByte>
    2630:	86 36       	cpi	r24, 0x66	; 102
    2632:	11 f4       	brne	.+4      	; 0x2638 <main+0xe0>
		{
			create_password();
    2634:	0e 94 2a 10 	call	0x2054	; 0x2054 <create_password>
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	90 e0       	ldi	r25, 0x00	; 0
		}
	}

}
    263c:	2c 96       	adiw	r28, 0x0c	; 12
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	f8 94       	cli
    2642:	de bf       	out	0x3e, r29	; 62
    2644:	0f be       	out	0x3f, r0	; 63
    2646:	cd bf       	out	0x3d, r28	; 61
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <UART_init>:
#include"uart.h"
#include<avr/io.h>
#include"std_types.h"
#include"common_macros.h"
void UART_init(const UART_ConfigType * Config_Ptr)
{
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	00 d0       	rcall	.+0      	; 0x2654 <UART_init+0x6>
    2654:	00 d0       	rcall	.+0      	; 0x2656 <UART_init+0x8>
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    265a:	9c 83       	std	Y+4, r25	; 0x04
    265c:	8b 83       	std	Y+3, r24	; 0x03
	//uint8 no_of_data_bits =
	uint16 UBRR_VALUE = 0;
    265e:	1a 82       	std	Y+2, r1	; 0x02
    2660:	19 82       	std	Y+1, r1	; 0x01
	/*set U2X to double transfer rate for asynchronus comm*/
	UCSRA = (1<<U2X);
    2662:	eb e2       	ldi	r30, 0x2B	; 43
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	82 e0       	ldi	r24, 0x02	; 2
    2668:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN) | ((GET_BIT((Config_Ptr-> bit_data), 2))<<UCSZ2);
    266a:	aa e2       	ldi	r26, 0x2A	; 42
    266c:	b0 e0       	ldi	r27, 0x00	; 0
    266e:	eb 81       	ldd	r30, Y+3	; 0x03
    2670:	fc 81       	ldd	r31, Y+4	; 0x04
    2672:	80 81       	ld	r24, Z
    2674:	84 70       	andi	r24, 0x04	; 4
    2676:	88 61       	ori	r24, 0x18	; 24
    2678:	8c 93       	st	X, r24
	/************************** UCSRC Description **************************
		 *URSEL = 1 to read UCSRC and not write to ubrrh
		 *UCSZ0 = 1 & UCSZ1 = 1 to enable 8 bits mode
		 ***********************************************************************/
	UCSRC = (GET_BIT((Config_Ptr-> bit_data), 0)<<UCSZ0) |(GET_BIT((Config_Ptr-> bit_data), 1)<<UCSZ1) | ((Config_Ptr -> parity) << UPM0) | ((Config_Ptr->stop_bit) << USBS) | (1<<URSEL);
    267a:	a0 e4       	ldi	r26, 0x40	; 64
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	eb 81       	ldd	r30, Y+3	; 0x03
    2680:	fc 81       	ldd	r31, Y+4	; 0x04
    2682:	80 81       	ld	r24, Z
    2684:	88 2f       	mov	r24, r24
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	81 70       	andi	r24, 0x01	; 1
    268a:	90 70       	andi	r25, 0x00	; 0
    268c:	88 0f       	add	r24, r24
    268e:	99 1f       	adc	r25, r25
    2690:	28 2f       	mov	r18, r24
    2692:	eb 81       	ldd	r30, Y+3	; 0x03
    2694:	fc 81       	ldd	r31, Y+4	; 0x04
    2696:	80 81       	ld	r24, Z
    2698:	88 2f       	mov	r24, r24
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	82 70       	andi	r24, 0x02	; 2
    269e:	90 70       	andi	r25, 0x00	; 0
    26a0:	95 95       	asr	r25
    26a2:	87 95       	ror	r24
    26a4:	88 0f       	add	r24, r24
    26a6:	99 1f       	adc	r25, r25
    26a8:	88 0f       	add	r24, r24
    26aa:	99 1f       	adc	r25, r25
    26ac:	28 2b       	or	r18, r24
    26ae:	eb 81       	ldd	r30, Y+3	; 0x03
    26b0:	fc 81       	ldd	r31, Y+4	; 0x04
    26b2:	81 81       	ldd	r24, Z+1	; 0x01
    26b4:	88 2f       	mov	r24, r24
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	82 95       	swap	r24
    26ba:	92 95       	swap	r25
    26bc:	90 7f       	andi	r25, 0xF0	; 240
    26be:	98 27       	eor	r25, r24
    26c0:	80 7f       	andi	r24, 0xF0	; 240
    26c2:	98 27       	eor	r25, r24
    26c4:	28 2b       	or	r18, r24
    26c6:	eb 81       	ldd	r30, Y+3	; 0x03
    26c8:	fc 81       	ldd	r31, Y+4	; 0x04
    26ca:	82 81       	ldd	r24, Z+2	; 0x02
    26cc:	88 2f       	mov	r24, r24
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	88 0f       	add	r24, r24
    26d2:	99 1f       	adc	r25, r25
    26d4:	88 0f       	add	r24, r24
    26d6:	99 1f       	adc	r25, r25
    26d8:	88 0f       	add	r24, r24
    26da:	99 1f       	adc	r25, r25
    26dc:	82 2b       	or	r24, r18
    26de:	80 68       	ori	r24, 0x80	; 128
    26e0:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	UBRR_VALUE = (uint16)(((F_CPU / ((Config_Ptr -> baud_rate) * 8UL))) - 1);
    26e2:	eb 81       	ldd	r30, Y+3	; 0x03
    26e4:	fc 81       	ldd	r31, Y+4	; 0x04
    26e6:	83 81       	ldd	r24, Z+3	; 0x03
    26e8:	94 81       	ldd	r25, Z+4	; 0x04
    26ea:	a5 81       	ldd	r26, Z+5	; 0x05
    26ec:	b6 81       	ldd	r27, Z+6	; 0x06
    26ee:	88 0f       	add	r24, r24
    26f0:	99 1f       	adc	r25, r25
    26f2:	aa 1f       	adc	r26, r26
    26f4:	bb 1f       	adc	r27, r27
    26f6:	88 0f       	add	r24, r24
    26f8:	99 1f       	adc	r25, r25
    26fa:	aa 1f       	adc	r26, r26
    26fc:	bb 1f       	adc	r27, r27
    26fe:	88 0f       	add	r24, r24
    2700:	99 1f       	adc	r25, r25
    2702:	aa 1f       	adc	r26, r26
    2704:	bb 1f       	adc	r27, r27
    2706:	9c 01       	movw	r18, r24
    2708:	ad 01       	movw	r20, r26
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	92 e1       	ldi	r25, 0x12	; 18
    270e:	aa e7       	ldi	r26, 0x7A	; 122
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	bc 01       	movw	r22, r24
    2714:	cd 01       	movw	r24, r26
    2716:	0e 94 36 14 	call	0x286c	; 0x286c <__udivmodsi4>
    271a:	da 01       	movw	r26, r20
    271c:	c9 01       	movw	r24, r18
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	9a 83       	std	Y+2, r25	; 0x02
    2722:	89 83       	std	Y+1, r24	; 0x01

		/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
		UBRRH = UBRR_VALUE>>8;
    2724:	e0 e4       	ldi	r30, 0x40	; 64
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	9a 81       	ldd	r25, Y+2	; 0x02
    272c:	89 2f       	mov	r24, r25
    272e:	99 27       	eor	r25, r25
    2730:	80 83       	st	Z, r24
		UBRRL = UBRR_VALUE;
    2732:	e9 e2       	ldi	r30, 0x29	; 41
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	89 81       	ldd	r24, Y+1	; 0x01
    2738:	80 83       	st	Z, r24
}
    273a:	0f 90       	pop	r0
    273c:	0f 90       	pop	r0
    273e:	0f 90       	pop	r0
    2740:	0f 90       	pop	r0
    2742:	cf 91       	pop	r28
    2744:	df 91       	pop	r29
    2746:	08 95       	ret

00002748 <UART_sendByte>:

void UART_sendByte(uint8 data)
{
    2748:	df 93       	push	r29
    274a:	cf 93       	push	r28
    274c:	0f 92       	push	r0
    274e:	cd b7       	in	r28, 0x3d	; 61
    2750:	de b7       	in	r29, 0x3e	; 62
    2752:	89 83       	std	Y+1, r24	; 0x01
	/*polling until data buffer is empty*/
	while(!(UCSRA &(1<<UDRE))){}
    2754:	eb e2       	ldi	r30, 0x2B	; 43
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	88 2f       	mov	r24, r24
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	80 72       	andi	r24, 0x20	; 32
    2760:	90 70       	andi	r25, 0x00	; 0
    2762:	00 97       	sbiw	r24, 0x00	; 0
    2764:	b9 f3       	breq	.-18     	; 0x2754 <UART_sendByte+0xc>
	UDR = data;
    2766:	ec e2       	ldi	r30, 0x2C	; 44
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	80 83       	st	Z, r24
}
    276e:	0f 90       	pop	r0
    2770:	cf 91       	pop	r28
    2772:	df 91       	pop	r29
    2774:	08 95       	ret

00002776 <UART_recieveByte>:
uint8 UART_recieveByte(void)
{
    2776:	df 93       	push	r29
    2778:	cf 93       	push	r28
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
	/*polling until recieve complete*/
	while(!(UCSRA &(1<<RXC))){}
    277e:	eb e2       	ldi	r30, 0x2B	; 43
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	88 23       	and	r24, r24
    2786:	dc f7       	brge	.-10     	; 0x277e <UART_recieveByte+0x8>
	return UDR;
    2788:	ec e2       	ldi	r30, 0x2C	; 44
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
}
    278e:	cf 91       	pop	r28
    2790:	df 91       	pop	r29
    2792:	08 95       	ret

00002794 <UART_sendString>:

void UART_sendString(const uint8* str)
{
    2794:	df 93       	push	r29
    2796:	cf 93       	push	r28
    2798:	00 d0       	rcall	.+0      	; 0x279a <UART_sendString+0x6>
    279a:	0f 92       	push	r0
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
    27a0:	9b 83       	std	Y+3, r25	; 0x03
    27a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    27a4:	19 82       	std	Y+1, r1	; 0x01
    27a6:	0e c0       	rjmp	.+28     	; 0x27c4 <UART_sendString+0x30>
	while(str[i] != '\0')
	{
		UART_sendByte(str[i]);
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	28 2f       	mov	r18, r24
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	8a 81       	ldd	r24, Y+2	; 0x02
    27b0:	9b 81       	ldd	r25, Y+3	; 0x03
    27b2:	fc 01       	movw	r30, r24
    27b4:	e2 0f       	add	r30, r18
    27b6:	f3 1f       	adc	r31, r19
    27b8:	80 81       	ld	r24, Z
    27ba:	0e 94 a4 13 	call	0x2748	; 0x2748 <UART_sendByte>
		i++;
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	8f 5f       	subi	r24, 0xFF	; 255
    27c2:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8* str)
{
	uint8 i = 0;
	while(str[i] != '\0')
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	28 2f       	mov	r18, r24
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	8a 81       	ldd	r24, Y+2	; 0x02
    27cc:	9b 81       	ldd	r25, Y+3	; 0x03
    27ce:	fc 01       	movw	r30, r24
    27d0:	e2 0f       	add	r30, r18
    27d2:	f3 1f       	adc	r31, r19
    27d4:	80 81       	ld	r24, Z
    27d6:	88 23       	and	r24, r24
    27d8:	39 f7       	brne	.-50     	; 0x27a8 <UART_sendString+0x14>
	{
		UART_sendByte(str[i]);
		i++;
	}
}
    27da:	0f 90       	pop	r0
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
    27e0:	cf 91       	pop	r28
    27e2:	df 91       	pop	r29
    27e4:	08 95       	ret

000027e6 <UART_recieveString>:

void UART_recieveString(uint8 *recieved_str)
{
    27e6:	0f 93       	push	r16
    27e8:	1f 93       	push	r17
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	00 d0       	rcall	.+0      	; 0x27f0 <UART_recieveString+0xa>
    27f0:	0f 92       	push	r0
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
    27f6:	9b 83       	std	Y+3, r25	; 0x03
    27f8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    27fa:	19 82       	std	Y+1, r1	; 0x01
	recieved_str[i] = UART_recieveByte();
    27fc:	89 81       	ldd	r24, Y+1	; 0x01
    27fe:	28 2f       	mov	r18, r24
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	8a 81       	ldd	r24, Y+2	; 0x02
    2804:	9b 81       	ldd	r25, Y+3	; 0x03
    2806:	8c 01       	movw	r16, r24
    2808:	02 0f       	add	r16, r18
    280a:	13 1f       	adc	r17, r19
    280c:	0e 94 bb 13 	call	0x2776	; 0x2776 <UART_recieveByte>
    2810:	f8 01       	movw	r30, r16
    2812:	80 83       	st	Z, r24
    2814:	0f c0       	rjmp	.+30     	; 0x2834 <UART_recieveString+0x4e>
	while(recieved_str[i] != '#')
	{
		i++;
    2816:	89 81       	ldd	r24, Y+1	; 0x01
    2818:	8f 5f       	subi	r24, 0xFF	; 255
    281a:	89 83       	std	Y+1, r24	; 0x01
		recieved_str[i] = UART_recieveByte();
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	28 2f       	mov	r18, r24
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	8a 81       	ldd	r24, Y+2	; 0x02
    2824:	9b 81       	ldd	r25, Y+3	; 0x03
    2826:	8c 01       	movw	r16, r24
    2828:	02 0f       	add	r16, r18
    282a:	13 1f       	adc	r17, r19
    282c:	0e 94 bb 13 	call	0x2776	; 0x2776 <UART_recieveByte>
    2830:	f8 01       	movw	r30, r16
    2832:	80 83       	st	Z, r24

void UART_recieveString(uint8 *recieved_str)
{
	uint8 i = 0;
	recieved_str[i] = UART_recieveByte();
	while(recieved_str[i] != '#')
    2834:	89 81       	ldd	r24, Y+1	; 0x01
    2836:	28 2f       	mov	r18, r24
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	8a 81       	ldd	r24, Y+2	; 0x02
    283c:	9b 81       	ldd	r25, Y+3	; 0x03
    283e:	fc 01       	movw	r30, r24
    2840:	e2 0f       	add	r30, r18
    2842:	f3 1f       	adc	r31, r19
    2844:	80 81       	ld	r24, Z
    2846:	83 32       	cpi	r24, 0x23	; 35
    2848:	31 f7       	brne	.-52     	; 0x2816 <UART_recieveString+0x30>
	{
		i++;
		recieved_str[i] = UART_recieveByte();
	}
	recieved_str[i] = '\0';
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	28 2f       	mov	r18, r24
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	8a 81       	ldd	r24, Y+2	; 0x02
    2852:	9b 81       	ldd	r25, Y+3	; 0x03
    2854:	fc 01       	movw	r30, r24
    2856:	e2 0f       	add	r30, r18
    2858:	f3 1f       	adc	r31, r19
    285a:	10 82       	st	Z, r1
}
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	cf 91       	pop	r28
    2864:	df 91       	pop	r29
    2866:	1f 91       	pop	r17
    2868:	0f 91       	pop	r16
    286a:	08 95       	ret

0000286c <__udivmodsi4>:
    286c:	a1 e2       	ldi	r26, 0x21	; 33
    286e:	1a 2e       	mov	r1, r26
    2870:	aa 1b       	sub	r26, r26
    2872:	bb 1b       	sub	r27, r27
    2874:	fd 01       	movw	r30, r26
    2876:	0d c0       	rjmp	.+26     	; 0x2892 <__udivmodsi4_ep>

00002878 <__udivmodsi4_loop>:
    2878:	aa 1f       	adc	r26, r26
    287a:	bb 1f       	adc	r27, r27
    287c:	ee 1f       	adc	r30, r30
    287e:	ff 1f       	adc	r31, r31
    2880:	a2 17       	cp	r26, r18
    2882:	b3 07       	cpc	r27, r19
    2884:	e4 07       	cpc	r30, r20
    2886:	f5 07       	cpc	r31, r21
    2888:	20 f0       	brcs	.+8      	; 0x2892 <__udivmodsi4_ep>
    288a:	a2 1b       	sub	r26, r18
    288c:	b3 0b       	sbc	r27, r19
    288e:	e4 0b       	sbc	r30, r20
    2890:	f5 0b       	sbc	r31, r21

00002892 <__udivmodsi4_ep>:
    2892:	66 1f       	adc	r22, r22
    2894:	77 1f       	adc	r23, r23
    2896:	88 1f       	adc	r24, r24
    2898:	99 1f       	adc	r25, r25
    289a:	1a 94       	dec	r1
    289c:	69 f7       	brne	.-38     	; 0x2878 <__udivmodsi4_loop>
    289e:	60 95       	com	r22
    28a0:	70 95       	com	r23
    28a2:	80 95       	com	r24
    28a4:	90 95       	com	r25
    28a6:	9b 01       	movw	r18, r22
    28a8:	ac 01       	movw	r20, r24
    28aa:	bd 01       	movw	r22, r26
    28ac:	cf 01       	movw	r24, r30
    28ae:	08 95       	ret

000028b0 <__prologue_saves__>:
    28b0:	2f 92       	push	r2
    28b2:	3f 92       	push	r3
    28b4:	4f 92       	push	r4
    28b6:	5f 92       	push	r5
    28b8:	6f 92       	push	r6
    28ba:	7f 92       	push	r7
    28bc:	8f 92       	push	r8
    28be:	9f 92       	push	r9
    28c0:	af 92       	push	r10
    28c2:	bf 92       	push	r11
    28c4:	cf 92       	push	r12
    28c6:	df 92       	push	r13
    28c8:	ef 92       	push	r14
    28ca:	ff 92       	push	r15
    28cc:	0f 93       	push	r16
    28ce:	1f 93       	push	r17
    28d0:	cf 93       	push	r28
    28d2:	df 93       	push	r29
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
    28d8:	ca 1b       	sub	r28, r26
    28da:	db 0b       	sbc	r29, r27
    28dc:	0f b6       	in	r0, 0x3f	; 63
    28de:	f8 94       	cli
    28e0:	de bf       	out	0x3e, r29	; 62
    28e2:	0f be       	out	0x3f, r0	; 63
    28e4:	cd bf       	out	0x3d, r28	; 61
    28e6:	09 94       	ijmp

000028e8 <__epilogue_restores__>:
    28e8:	2a 88       	ldd	r2, Y+18	; 0x12
    28ea:	39 88       	ldd	r3, Y+17	; 0x11
    28ec:	48 88       	ldd	r4, Y+16	; 0x10
    28ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    28f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    28f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    28f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    28f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    28f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    28fa:	b9 84       	ldd	r11, Y+9	; 0x09
    28fc:	c8 84       	ldd	r12, Y+8	; 0x08
    28fe:	df 80       	ldd	r13, Y+7	; 0x07
    2900:	ee 80       	ldd	r14, Y+6	; 0x06
    2902:	fd 80       	ldd	r15, Y+5	; 0x05
    2904:	0c 81       	ldd	r16, Y+4	; 0x04
    2906:	1b 81       	ldd	r17, Y+3	; 0x03
    2908:	aa 81       	ldd	r26, Y+2	; 0x02
    290a:	b9 81       	ldd	r27, Y+1	; 0x01
    290c:	ce 0f       	add	r28, r30
    290e:	d1 1d       	adc	r29, r1
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	de bf       	out	0x3e, r29	; 62
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	ed 01       	movw	r28, r26
    291c:	08 95       	ret

0000291e <itoa>:
    291e:	fb 01       	movw	r30, r22
    2920:	9f 01       	movw	r18, r30
    2922:	e8 94       	clt
    2924:	42 30       	cpi	r20, 0x02	; 2
    2926:	c4 f0       	brlt	.+48     	; 0x2958 <itoa+0x3a>
    2928:	45 32       	cpi	r20, 0x25	; 37
    292a:	b4 f4       	brge	.+44     	; 0x2958 <itoa+0x3a>
    292c:	4a 30       	cpi	r20, 0x0A	; 10
    292e:	29 f4       	brne	.+10     	; 0x293a <itoa+0x1c>
    2930:	97 fb       	bst	r25, 7
    2932:	1e f4       	brtc	.+6      	; 0x293a <itoa+0x1c>
    2934:	90 95       	com	r25
    2936:	81 95       	neg	r24
    2938:	9f 4f       	sbci	r25, 0xFF	; 255
    293a:	64 2f       	mov	r22, r20
    293c:	77 27       	eor	r23, r23
    293e:	0e 94 c0 14 	call	0x2980	; 0x2980 <__udivmodhi4>
    2942:	80 5d       	subi	r24, 0xD0	; 208
    2944:	8a 33       	cpi	r24, 0x3A	; 58
    2946:	0c f0       	brlt	.+2      	; 0x294a <itoa+0x2c>
    2948:	89 5d       	subi	r24, 0xD9	; 217
    294a:	81 93       	st	Z+, r24
    294c:	cb 01       	movw	r24, r22
    294e:	00 97       	sbiw	r24, 0x00	; 0
    2950:	a1 f7       	brne	.-24     	; 0x293a <itoa+0x1c>
    2952:	16 f4       	brtc	.+4      	; 0x2958 <itoa+0x3a>
    2954:	5d e2       	ldi	r21, 0x2D	; 45
    2956:	51 93       	st	Z+, r21
    2958:	10 82       	st	Z, r1
    295a:	c9 01       	movw	r24, r18
    295c:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <strrev>

00002960 <strrev>:
    2960:	dc 01       	movw	r26, r24
    2962:	fc 01       	movw	r30, r24
    2964:	67 2f       	mov	r22, r23
    2966:	71 91       	ld	r23, Z+
    2968:	77 23       	and	r23, r23
    296a:	e1 f7       	brne	.-8      	; 0x2964 <strrev+0x4>
    296c:	32 97       	sbiw	r30, 0x02	; 2
    296e:	04 c0       	rjmp	.+8      	; 0x2978 <strrev+0x18>
    2970:	7c 91       	ld	r23, X
    2972:	6d 93       	st	X+, r22
    2974:	70 83       	st	Z, r23
    2976:	62 91       	ld	r22, -Z
    2978:	ae 17       	cp	r26, r30
    297a:	bf 07       	cpc	r27, r31
    297c:	c8 f3       	brcs	.-14     	; 0x2970 <strrev+0x10>
    297e:	08 95       	ret

00002980 <__udivmodhi4>:
    2980:	aa 1b       	sub	r26, r26
    2982:	bb 1b       	sub	r27, r27
    2984:	51 e1       	ldi	r21, 0x11	; 17
    2986:	07 c0       	rjmp	.+14     	; 0x2996 <__udivmodhi4_ep>

00002988 <__udivmodhi4_loop>:
    2988:	aa 1f       	adc	r26, r26
    298a:	bb 1f       	adc	r27, r27
    298c:	a6 17       	cp	r26, r22
    298e:	b7 07       	cpc	r27, r23
    2990:	10 f0       	brcs	.+4      	; 0x2996 <__udivmodhi4_ep>
    2992:	a6 1b       	sub	r26, r22
    2994:	b7 0b       	sbc	r27, r23

00002996 <__udivmodhi4_ep>:
    2996:	88 1f       	adc	r24, r24
    2998:	99 1f       	adc	r25, r25
    299a:	5a 95       	dec	r21
    299c:	a9 f7       	brne	.-22     	; 0x2988 <__udivmodhi4_loop>
    299e:	80 95       	com	r24
    29a0:	90 95       	com	r25
    29a2:	bc 01       	movw	r22, r24
    29a4:	cd 01       	movw	r24, r26
    29a6:	08 95       	ret

000029a8 <_exit>:
    29a8:	f8 94       	cli

000029aa <__stop_program>:
    29aa:	ff cf       	rjmp	.-2      	; 0x29aa <__stop_program>
